android.net.compatibility.WebAddress -> android.net.a.a:
    java.lang.String toString() -> toString
android.net.http.AndroidHttpClient -> android.net.http.AndroidHttpClient:
    long DEFAULT_SYNC_MIN_GZIP_BYTES -> DEFAULT_SYNC_MIN_GZIP_BYTES
    void <init>() -> <init>
    android.net.http.AndroidHttpClient newInstance(java.lang.String,android.content.Context) -> newInstance
    android.net.http.AndroidHttpClient newInstance(java.lang.String) -> newInstance
    void finalize() -> finalize
    void modifyRequestToAcceptGzipResponse(org.apache.http.HttpRequest) -> modifyRequestToAcceptGzipResponse
    java.io.InputStream getUngzippedContent(org.apache.http.HttpEntity) -> getUngzippedContent
    void close() -> close
    org.apache.http.params.HttpParams getParams() -> getParams
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[],android.content.ContentResolver) -> getCompressedEntity
    long getMinGzipSize(android.content.ContentResolver) -> getMinGzipSize
    void enableCurlLogging(java.lang.String,int) -> enableCurlLogging
    void disableCurlLogging() -> disableCurlLogging
    long parseDate(java.lang.String) -> parseDate
android.net.http.AndroidHttpClientConnection -> android.net.http.AndroidHttpClientConnection:
    void <init>() -> <init>
    void bind(java.net.Socket,org.apache.http.params.HttpParams) -> bind
    java.lang.String toString() -> toString
    boolean isOpen() -> isOpen
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    void shutdown() -> shutdown
    void close() -> close
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    void doFlush() -> doFlush
    void flush() -> flush
    org.apache.http.StatusLine parseResponseHeader(android.net.http.Headers) -> parseResponseHeader
    org.apache.http.HttpEntity receiveResponseEntity(android.net.http.Headers) -> receiveResponseEntity
    boolean isStale() -> isStale
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
android.net.http.CertificateChainValidator -> android.net.http.CertificateChainValidator:
    void <init>() -> <init>
    android.net.http.CertificateChainValidator getInstance() -> getInstance
    android.net.http.SslError doHandshakeAndValidateServerCertificates(android.net.http.HttpsConnection,javax.net.ssl.SSLSocket,java.lang.String) -> doHandshakeAndValidateServerCertificates
    android.net.http.SslError verifyServerCertificates(byte[][],java.lang.String,java.lang.String) -> verifyServerCertificates
    void handleTrustStorageUpdate() -> handleTrustStorageUpdate
android.net.http.Connection -> android.net.http.Connection:
    android.net.http.SslCertificate mCertificate -> mCertificate
    android.net.http.AndroidHttpClientConnection mHttpClientConnection -> mHttpClientConnection
    void <init>(android.content.Context,org.apache.http.HttpHost,android.net.http.RequestFeeder) -> <init>
    java.lang.String toString() -> toString
android.net.http.DelegatingSSLSession -> android.net.http.DelegatingSSLSession:
    void <init>() -> <init>
    int getApplicationBufferSize() -> getApplicationBufferSize
    java.lang.String getCipherSuite() -> getCipherSuite
    long getCreationTime() -> getCreationTime
    byte[] getId() -> getId
    long getLastAccessedTime() -> getLastAccessedTime
    java.security.cert.Certificate[] getLocalCertificates() -> getLocalCertificates
    java.security.Principal getLocalPrincipal() -> getLocalPrincipal
    int getPacketBufferSize() -> getPacketBufferSize
    javax.security.cert.X509Certificate[] getPeerCertificateChain() -> getPeerCertificateChain
    java.security.cert.Certificate[] getPeerCertificates() -> getPeerCertificates
    java.lang.String getPeerHost() -> getPeerHost
    int getPeerPort() -> getPeerPort
    java.security.Principal getPeerPrincipal() -> getPeerPrincipal
    java.lang.String getProtocol() -> getProtocol
    javax.net.ssl.SSLSessionContext getSessionContext() -> getSessionContext
    java.lang.Object getValue(java.lang.String) -> getValue
    java.lang.String[] getValueNames() -> getValueNames
    void invalidate() -> invalidate
    boolean isValid() -> isValid
    void putValue(java.lang.String,java.lang.Object) -> putValue
    void removeValue(java.lang.String) -> removeValue
android.net.http.DelegatingSSLSession$CertificateWrap -> android.net.http.DelegatingSSLSession$CertificateWrap:
    void <init>(java.security.cert.Certificate) -> <init>
    java.security.cert.Certificate[] getPeerCertificates() -> getPeerCertificates
android.net.http.EventHandler -> android.net.http.EventHandler:
    int ERROR -> ERROR
    int ERROR_AUTH -> ERROR_AUTH
    int ERROR_BAD_URL -> ERROR_BAD_URL
    int ERROR_CONNECT -> ERROR_CONNECT
    int ERROR_FAILED_SSL_HANDSHAKE -> ERROR_FAILED_SSL_HANDSHAKE
    int ERROR_IO -> ERROR_IO
    int ERROR_LOOKUP -> ERROR_LOOKUP
    int ERROR_PROXYAUTH -> ERROR_PROXYAUTH
    int ERROR_REDIRECT_LOOP -> ERROR_REDIRECT_LOOP
    int ERROR_TIMEOUT -> ERROR_TIMEOUT
    int ERROR_UNSUPPORTED_AUTH_SCHEME -> ERROR_UNSUPPORTED_AUTH_SCHEME
    int ERROR_UNSUPPORTED_SCHEME -> ERROR_UNSUPPORTED_SCHEME
    int FILE_ERROR -> FILE_ERROR
    int FILE_NOT_FOUND_ERROR -> FILE_NOT_FOUND_ERROR
    int OK -> OK
    int TOO_MANY_REQUESTS_ERROR -> TOO_MANY_REQUESTS_ERROR
    void status(int,int,int,java.lang.String) -> status
    void headers(android.net.http.Headers) -> headers
    void data(byte[],int) -> data
    void endData() -> endData
    void certificate(android.net.http.SslCertificate) -> certificate
    void error(int,java.lang.String) -> error
    boolean handleSslErrorRequest(android.net.http.SslError) -> handleSslErrorRequest
android.net.http.Headers -> android.net.http.Headers:
    java.lang.String ACCEPT_RANGES -> ACCEPT_RANGES
    java.lang.String CACHE_CONTROL -> CACHE_CONTROL
    int CONN_CLOSE -> CONN_CLOSE
    java.lang.String CONN_DIRECTIVE -> CONN_DIRECTIVE
    int CONN_KEEP_ALIVE -> CONN_KEEP_ALIVE
    java.lang.String CONTENT_DISPOSITION -> CONTENT_DISPOSITION
    java.lang.String CONTENT_ENCODING -> CONTENT_ENCODING
    java.lang.String CONTENT_LEN -> CONTENT_LEN
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    java.lang.String ETAG -> ETAG
    java.lang.String EXPIRES -> EXPIRES
    java.lang.String LAST_MODIFIED -> LAST_MODIFIED
    java.lang.String LOCATION -> LOCATION
    int NO_CONN_TYPE -> NO_CONN_TYPE
    long NO_CONTENT_LENGTH -> NO_CONTENT_LENGTH
    long NO_TRANSFER_ENCODING -> NO_TRANSFER_ENCODING
    java.lang.String PRAGMA -> PRAGMA
    java.lang.String PROXY_AUTHENTICATE -> PROXY_AUTHENTICATE
    java.lang.String PROXY_CONNECTION -> PROXY_CONNECTION
    java.lang.String REFRESH -> REFRESH
    java.lang.String SET_COOKIE -> SET_COOKIE
    java.lang.String TRANSFER_ENCODING -> TRANSFER_ENCODING
    java.lang.String WWW_AUTHENTICATE -> WWW_AUTHENTICATE
    java.lang.String X_PERMITTED_CROSS_DOMAIN_POLICIES -> X_PERMITTED_CROSS_DOMAIN_POLICIES
    void <init>() -> <init>
    void parseHeader(org.apache.http.util.CharArrayBuffer) -> parseHeader
    long getTransferEncoding() -> getTransferEncoding
    long getContentLength() -> getContentLength
    int getConnectionType() -> getConnectionType
    java.lang.String getContentType() -> getContentType
    java.lang.String getContentEncoding() -> getContentEncoding
    java.lang.String getLocation() -> getLocation
    java.lang.String getWwwAuthenticate() -> getWwwAuthenticate
    java.lang.String getProxyAuthenticate() -> getProxyAuthenticate
    java.lang.String getContentDisposition() -> getContentDisposition
    java.lang.String getAcceptRanges() -> getAcceptRanges
    java.lang.String getExpires() -> getExpires
    java.lang.String getCacheControl() -> getCacheControl
    java.lang.String getLastModified() -> getLastModified
    java.lang.String getEtag() -> getEtag
    java.util.ArrayList getSetCookie() -> getSetCookie
    java.lang.String getPragma() -> getPragma
    java.lang.String getRefresh() -> getRefresh
    java.lang.String getXPermittedCrossDomainPolicies() -> getXPermittedCrossDomainPolicies
    void setContentLength(long) -> setContentLength
    void setContentType(java.lang.String) -> setContentType
    void setContentEncoding(java.lang.String) -> setContentEncoding
    void setLocation(java.lang.String) -> setLocation
    void setWwwAuthenticate(java.lang.String) -> setWwwAuthenticate
    void setProxyAuthenticate(java.lang.String) -> setProxyAuthenticate
    void setContentDisposition(java.lang.String) -> setContentDisposition
    void setAcceptRanges(java.lang.String) -> setAcceptRanges
    void setExpires(java.lang.String) -> setExpires
    void setCacheControl(java.lang.String) -> setCacheControl
    void setLastModified(java.lang.String) -> setLastModified
    void setEtag(java.lang.String) -> setEtag
    void setXPermittedCrossDomainPolicies(java.lang.String) -> setXPermittedCrossDomainPolicies
    void getHeaders(android.net.http.Headers$HeaderCallback) -> getHeaders
android.net.http.Headers$HeaderCallback -> android.net.http.Headers$HeaderCallback:
    void header(java.lang.String,java.lang.String) -> header
android.net.http.HttpAuthHeader -> android.net.http.HttpAuthHeader:
    int BASIC -> BASIC
    java.lang.String BASIC_TOKEN -> BASIC_TOKEN
    int DIGEST -> DIGEST
    java.lang.String DIGEST_TOKEN -> DIGEST_TOKEN
    int UNKNOWN -> UNKNOWN
    void <init>(java.lang.String) -> <init>
    boolean isProxy() -> isProxy
    void setProxy() -> setProxy
    java.lang.String getUsername() -> getUsername
    void setUsername(java.lang.String) -> setUsername
    java.lang.String getPassword() -> getPassword
    void setPassword(java.lang.String) -> setPassword
    boolean isBasic() -> isBasic
    boolean isDigest() -> isDigest
    int getScheme() -> getScheme
    boolean getStale() -> getStale
    java.lang.String getRealm() -> getRealm
    java.lang.String getNonce() -> getNonce
    java.lang.String getOpaque() -> getOpaque
    java.lang.String getQop() -> getQop
    java.lang.String getAlgorithm() -> getAlgorithm
    boolean isSupportedScheme() -> isSupportedScheme
android.net.http.HttpResponseCache -> android.net.http.HttpResponseCache:
    void <init>() -> <init>
    android.net.http.HttpResponseCache getInstalled() -> getInstalled
    android.net.http.HttpResponseCache install(java.io.File,long) -> install
    java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map) -> get
    java.net.CacheRequest put(java.net.URI,java.net.URLConnection) -> put
    long size() -> size
    long maxSize() -> maxSize
    void flush() -> flush
    int getNetworkCount() -> getNetworkCount
    int getHitCount() -> getHitCount
    int getRequestCount() -> getRequestCount
    void close() -> close
    void delete() -> delete
android.net.http.HttpsConnection -> android.net.http.HttpsConnection:
    android.net.http.SslCertificate mCertificate -> mCertificate
    android.net.http.AndroidHttpClientConnection mHttpClientConnection -> mHttpClientConnection
    void <init>() -> <init>
    void initializeEngine(java.io.File) -> initializeEngine
    java.lang.String toString() -> toString
android.net.http.LoggingEventHandler -> android.net.http.LoggingEventHandler:
    void <init>() -> <init>
    void requestSent() -> requestSent
    void status(int,int,int,java.lang.String) -> status
    void headers(android.net.http.Headers) -> headers
    void locationChanged(java.lang.String,boolean) -> locationChanged
    void data(byte[],int) -> data
    void endData() -> endData
    void certificate(android.net.http.SslCertificate) -> certificate
    void error(int,java.lang.String) -> error
    boolean handleSslErrorRequest(android.net.http.SslError) -> handleSslErrorRequest
android.net.http.Request -> android.net.http.Request:
    void <init>() -> <init>
    java.lang.String toString() -> toString
    void handleSslErrorResponse(boolean) -> handleSslErrorResponse
android.net.http.RequestFeeder -> android.net.http.RequestFeeder:
    android.net.http.Request getRequest() -> getRequest
    android.net.http.Request getRequest(org.apache.http.HttpHost) -> getRequest
    boolean haveRequest(org.apache.http.HttpHost) -> haveRequest
    void requeueRequest(android.net.http.Request) -> requeueRequest
android.net.http.RequestHandle -> android.net.http.RequestHandle:
    int MAX_REDIRECT_COUNT -> MAX_REDIRECT_COUNT
    void <init>(android.net.http.RequestQueue,java.lang.String,android.net.compatibility.WebAddress,java.lang.String,java.util.Map,java.io.InputStream,int,android.net.http.Request) -> <init>
    void <init>(android.net.http.RequestQueue,java.lang.String,android.net.compatibility.WebAddress,java.lang.String,java.util.Map,java.io.InputStream,int,android.net.http.Request,android.net.http.Connection) -> <init>
    void cancel() -> cancel
    void pauseRequest(boolean) -> pauseRequest
    void handleSslErrorResponse(boolean) -> handleSslErrorResponse
    boolean isRedirectMax() -> isRedirectMax
    int getRedirectCount() -> getRedirectCount
    void setRedirectCount(int) -> setRedirectCount
    boolean setupRedirect(java.lang.String,int,java.util.Map) -> setupRedirect
    void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String) -> setupBasicAuthResponse
    void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> setupDigestAuthResponse
    java.lang.String getMethod() -> getMethod
    java.lang.String computeBasicAuthResponse(java.lang.String,java.lang.String) -> computeBasicAuthResponse
    void waitUntilComplete() -> waitUntilComplete
    void processRequest() -> processRequest
    java.lang.String authorizationHeader(boolean) -> authorizationHeader
android.net.http.RequestQueue -> android.net.http.RequestQueue:
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,int) -> <init>
    void enablePlatformNotifications() -> enablePlatformNotifications
    void disablePlatformNotifications() -> disablePlatformNotifications
    org.apache.http.HttpHost getProxyHost() -> getProxyHost
    android.net.http.RequestHandle queueRequest(java.lang.String,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int) -> queueRequest
    android.net.http.RequestHandle queueRequest(java.lang.String,android.net.compatibility.WebAddress,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int) -> queueRequest
    android.net.http.RequestHandle queueSynchronousRequest(java.lang.String,android.net.compatibility.WebAddress,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int) -> queueSynchronousRequest
    android.net.http.Request getRequest() -> getRequest
    android.net.http.Request getRequest(org.apache.http.HttpHost) -> getRequest
    boolean haveRequest(org.apache.http.HttpHost) -> haveRequest
    void requeueRequest(android.net.http.Request) -> requeueRequest
    void shutdown() -> shutdown
    void queueRequest(android.net.http.Request,boolean) -> queueRequest
    void startTiming() -> startTiming
    void stopTiming() -> stopTiming
android.net.http.SslCertificate -> android.net.http.SslCertificate:
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date) -> <init>
    void <init>(java.security.cert.X509Certificate) -> <init>
    android.os.Bundle saveState(android.net.http.SslCertificate) -> saveState
    android.net.http.SslCertificate restoreState(android.os.Bundle) -> restoreState
    java.util.Date getValidNotBeforeDate() -> getValidNotBeforeDate
    java.lang.String getValidNotBefore() -> getValidNotBefore
    java.util.Date getValidNotAfterDate() -> getValidNotAfterDate
    java.lang.String getValidNotAfter() -> getValidNotAfter
    android.net.http.SslCertificate$DName getIssuedTo() -> getIssuedTo
    android.net.http.SslCertificate$DName getIssuedBy() -> getIssuedBy
    java.lang.String toString() -> toString
android.net.http.SslCertificate$DName -> android.net.http.SslCertificate$DName:
    android.net.http.SslCertificate this$0 -> this$0
    void <init>(android.net.http.SslCertificate,java.lang.String) -> <init>
    java.lang.String getDName() -> getDName
    java.lang.String getCName() -> getCName
    java.lang.String getOName() -> getOName
    java.lang.String getUName() -> getUName
android.net.http.SslError -> android.net.http.SslError:
    int SSL_DATE_INVALID -> SSL_DATE_INVALID
    int SSL_EXPIRED -> SSL_EXPIRED
    int SSL_IDMISMATCH -> SSL_IDMISMATCH
    int SSL_INVALID -> SSL_INVALID
    int SSL_MAX_ERROR -> SSL_MAX_ERROR
    int SSL_NOTYETVALID -> SSL_NOTYETVALID
    int SSL_UNTRUSTED -> SSL_UNTRUSTED
    void <init>(int,android.net.http.SslCertificate) -> <init>
    void <init>(int,java.security.cert.X509Certificate) -> <init>
    void <init>(int,android.net.http.SslCertificate,java.lang.String) -> <init>
    void <init>(int,java.security.cert.X509Certificate,java.lang.String) -> <init>
    android.net.http.SslCertificate getCertificate() -> getCertificate
    java.lang.String getUrl() -> getUrl
    boolean addError(int) -> addError
    boolean hasError(int) -> hasError
    int getPrimaryError() -> getPrimaryError
    java.lang.String toString() -> toString
android.support.annotation.Keep -> android.support.annotation.Keep:
android.support.v4.app.NotificationBuilderWithActions -> android.support.v4.a.a:
    void addAction(android.support.v4.app.NotificationCompatBase$Action) -> a
android.support.v4.app.NotificationBuilderWithBuilderAccessor -> android.support.v4.a.b:
    android.app.Notification$Builder getBuilder() -> a
    android.app.Notification build() -> b
android.support.v4.app.NotificationCompat -> android.support.v4.a.c:
    android.support.v4.app.NotificationCompat$NotificationCompatImpl IMPL -> a
    void addActionsToBuilder(android.support.v4.app.NotificationBuilderWithActions,java.util.ArrayList) -> b
    void addStyleToBuilderJellybean(android.support.v4.app.NotificationBuilderWithBuilderAccessor,android.support.v4.app.NotificationCompat$Style) -> b
    void access$000(android.support.v4.app.NotificationBuilderWithActions,java.util.ArrayList) -> a
    void access$100(android.support.v4.app.NotificationBuilderWithBuilderAccessor,android.support.v4.app.NotificationCompat$Style) -> a
    android.support.v4.app.NotificationCompat$NotificationCompatImpl access$200() -> a
    void <clinit>() -> <clinit>
android.support.v4.app.NotificationCompat$Action -> android.support.v4.a.d:
    android.os.Bundle mExtras -> e
    android.support.v4.app.RemoteInput[] mRemoteInputs -> f
    int icon -> a
    java.lang.CharSequence title -> b
    android.app.PendingIntent actionIntent -> c
    android.support.v4.app.NotificationCompatBase$Action$Factory FACTORY -> d
    int getIcon() -> a
    java.lang.CharSequence getTitle() -> b
    android.app.PendingIntent getActionIntent() -> c
    android.os.Bundle getExtras() -> d
    android.support.v4.app.RemoteInput[] getRemoteInputs() -> e
    android.support.v4.app.RemoteInputCompatBase$RemoteInput[] getRemoteInputs() -> f
    void <clinit>() -> <clinit>
android.support.v4.app.NotificationCompat$Action$1 -> android.support.v4.a.e:
    void <init>() -> <init>
android.support.v4.app.NotificationCompat$BigPictureStyle -> android.support.v4.a.f:
    android.graphics.Bitmap mPicture -> a
    android.graphics.Bitmap mBigLargeIcon -> b
    boolean mBigLargeIconSet -> c
    void <init>() -> <init>
android.support.v4.app.NotificationCompat$BigTextStyle -> android.support.v4.a.g:
    java.lang.CharSequence mBigText -> a
    void <init>() -> <init>
android.support.v4.app.NotificationCompat$Builder -> android.support.v4.a.h:
    android.content.Context mContext -> a
    java.lang.CharSequence mContentTitle -> b
    java.lang.CharSequence mContentText -> c
    android.app.PendingIntent mContentIntent -> d
    android.app.PendingIntent mFullScreenIntent -> e
    android.widget.RemoteViews mTickerView -> f
    android.graphics.Bitmap mLargeIcon -> g
    java.lang.CharSequence mContentInfo -> h
    int mNumber -> i
    int mPriority -> j
    boolean mShowWhen -> k
    boolean mUseChronometer -> l
    android.support.v4.app.NotificationCompat$Style mStyle -> m
    java.lang.CharSequence mSubText -> n
    int mProgressMax -> o
    int mProgress -> p
    boolean mProgressIndeterminate -> q
    java.lang.String mGroupKey -> r
    boolean mGroupSummary -> s
    java.lang.String mSortKey -> t
    java.util.ArrayList mActions -> u
    boolean mLocalOnly -> v
    java.lang.String mCategory -> w
    android.os.Bundle mExtras -> x
    int mColor -> y
    int mVisibility -> z
    android.app.Notification mPublicVersion -> A
    android.app.Notification mNotification -> B
    java.util.ArrayList mPeople -> C
    void <init>(android.content.Context) -> <init>
    android.support.v4.app.NotificationCompat$Builder setSmallIcon(int) -> a
    android.support.v4.app.NotificationCompat$Builder setContentTitle(java.lang.CharSequence) -> a
    android.support.v4.app.NotificationCompat$Builder setContentText(java.lang.CharSequence) -> b
    android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent) -> a
    android.support.v4.app.NotificationCompat$Builder setOngoing(boolean) -> a
    void setFlag(int,boolean) -> a
    android.app.Notification build() -> a
    android.support.v4.app.NotificationCompat$BuilderExtender getExtender() -> b
    java.lang.CharSequence limitCharSequenceLength(java.lang.CharSequence) -> c
android.support.v4.app.NotificationCompat$BuilderExtender -> android.support.v4.a.i:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationBuilderWithBuilderAccessor) -> a
android.support.v4.app.NotificationCompat$InboxStyle -> android.support.v4.a.j:
    java.util.ArrayList mTexts -> a
    void <init>() -> <init>
android.support.v4.app.NotificationCompat$NotificationCompatImpl -> android.support.v4.a.k:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplApi20 -> android.support.v4.a.l:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplApi21 -> android.support.v4.a.m:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplBase -> android.support.v4.a.n:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplGingerbread -> android.support.v4.a.o:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplHoneycomb -> android.support.v4.a.p:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplIceCreamSandwich -> android.support.v4.a.q:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplJellybean -> android.support.v4.a.r:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplKitKat -> android.support.v4.a.s:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$Style -> android.support.v4.a.t:
    java.lang.CharSequence mBigContentTitle -> d
    java.lang.CharSequence mSummaryText -> e
    boolean mSummaryTextSet -> f
    void <init>() -> <init>
android.support.v4.app.NotificationCompatApi20 -> android.support.v4.a.u:
    void addAction(android.app.Notification$Builder,android.support.v4.app.NotificationCompatBase$Action) -> a
android.support.v4.app.NotificationCompatApi20$Builder -> android.support.v4.a.v:
    android.app.Notification$Builder b -> a
    android.os.Bundle mExtras -> b
    void <init>(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean,boolean,boolean,int,java.lang.CharSequence,boolean,java.util.ArrayList,android.os.Bundle,java.lang.String,boolean,java.lang.String) -> <init>
    void addAction(android.support.v4.app.NotificationCompatBase$Action) -> a
    android.app.Notification$Builder getBuilder() -> a
    android.app.Notification build() -> b
android.support.v4.app.NotificationCompatApi21 -> android.support.v4.a.w:
android.support.v4.app.NotificationCompatApi21$Builder -> android.support.v4.a.x:
    android.app.Notification$Builder b -> a
    void <init>(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean,boolean,boolean,int,java.lang.CharSequence,boolean,java.lang.String,java.util.ArrayList,android.os.Bundle,int,int,android.app.Notification,java.lang.String,boolean,java.lang.String) -> <init>
    void addAction(android.support.v4.app.NotificationCompatBase$Action) -> a
    android.app.Notification$Builder getBuilder() -> a
    android.app.Notification build() -> b
android.support.v4.app.NotificationCompatBase -> android.support.v4.a.y:
    android.app.Notification add(android.app.Notification,android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent) -> a
android.support.v4.app.NotificationCompatBase$Action -> android.support.v4.a.z:
    int getIcon() -> a
    java.lang.CharSequence getTitle() -> b
    android.app.PendingIntent getActionIntent() -> c
    android.os.Bundle getExtras() -> d
    android.support.v4.app.RemoteInputCompatBase$RemoteInput[] getRemoteInputs() -> f
android.support.v4.app.NotificationCompatBase$Action$Factory -> android.support.v4.a.aa:
android.support.v4.app.NotificationCompatGingerbread -> android.support.v4.a.ab:
    android.app.Notification add(android.app.Notification,android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent,android.app.PendingIntent) -> a
android.support.v4.app.NotificationCompatHoneycomb -> android.support.v4.a.ac:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap) -> a
android.support.v4.app.NotificationCompatIceCreamSandwich -> android.support.v4.a.ad:
android.support.v4.app.NotificationCompatIceCreamSandwich$Builder -> android.support.v4.a.ae:
    android.app.Notification$Builder b -> a
    void <init>(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean) -> <init>
    android.app.Notification$Builder getBuilder() -> a
    android.app.Notification build() -> b
android.support.v4.app.NotificationCompatJellybean -> android.support.v4.a.af:
    java.lang.Object sExtrasLock -> a
    java.lang.reflect.Field sExtrasField -> b
    boolean sExtrasFieldAccessFailed -> c
    java.lang.Object sActionsLock -> d
    void addBigTextStyle(android.support.v4.app.NotificationBuilderWithBuilderAccessor,java.lang.CharSequence,boolean,java.lang.CharSequence,java.lang.CharSequence) -> a
    void addBigPictureStyle(android.support.v4.app.NotificationBuilderWithBuilderAccessor,java.lang.CharSequence,boolean,java.lang.CharSequence,android.graphics.Bitmap,android.graphics.Bitmap,boolean) -> a
    void addInboxStyle(android.support.v4.app.NotificationBuilderWithBuilderAccessor,java.lang.CharSequence,boolean,java.lang.CharSequence,java.util.ArrayList) -> a
    android.util.SparseArray buildActionExtrasMap(java.util.List) -> a
    android.os.Bundle getExtras(android.app.Notification) -> a
    android.os.Bundle writeActionAndGetExtras(android.app.Notification$Builder,android.support.v4.app.NotificationCompatBase$Action) -> a
    void <clinit>() -> <clinit>
android.support.v4.app.NotificationCompatJellybean$Builder -> android.support.v4.a.ag:
    android.app.Notification$Builder b -> a
    android.os.Bundle mExtras -> b
    java.util.List mActionExtrasList -> c
    void <init>(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean,boolean,int,java.lang.CharSequence,boolean,android.os.Bundle,java.lang.String,boolean,java.lang.String) -> <init>
    void addAction(android.support.v4.app.NotificationCompatBase$Action) -> a
    android.app.Notification$Builder getBuilder() -> a
    android.app.Notification build() -> b
android.support.v4.app.NotificationCompatKitKat -> android.support.v4.a.ah:
android.support.v4.app.NotificationCompatKitKat$Builder -> android.support.v4.a.ai:
    android.app.Notification$Builder b -> a
    android.os.Bundle mExtras -> b
    java.util.List mActionExtrasList -> c
    void <init>(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean,boolean,boolean,int,java.lang.CharSequence,boolean,java.util.ArrayList,android.os.Bundle,java.lang.String,boolean,java.lang.String) -> <init>
    void addAction(android.support.v4.app.NotificationCompatBase$Action) -> a
    android.app.Notification$Builder getBuilder() -> a
    android.app.Notification build() -> b
android.support.v4.app.RemoteInput -> android.support.v4.a.aj:
    java.lang.String mResultKey -> b
    java.lang.CharSequence mLabel -> c
    java.lang.CharSequence[] mChoices -> d
    boolean mAllowFreeFormInput -> e
    android.os.Bundle mExtras -> f
    android.support.v4.app.RemoteInput$Impl IMPL -> g
    android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory FACTORY -> a
    java.lang.String getResultKey() -> a
    java.lang.CharSequence getLabel() -> b
    java.lang.CharSequence[] getChoices() -> c
    boolean getAllowFreeFormInput() -> d
    android.os.Bundle getExtras() -> e
    void <clinit>() -> <clinit>
android.support.v4.app.RemoteInput$1 -> android.support.v4.a.ak:
    void <init>() -> <init>
android.support.v4.app.RemoteInput$Impl -> android.support.v4.a.al:
android.support.v4.app.RemoteInput$ImplApi20 -> android.support.v4.a.am:
    void <init>() -> <init>
android.support.v4.app.RemoteInput$ImplBase -> android.support.v4.a.an:
    void <init>() -> <init>
android.support.v4.app.RemoteInput$ImplJellybean -> android.support.v4.a.ao:
    void <init>() -> <init>
android.support.v4.app.RemoteInputCompatApi20 -> android.support.v4.a.ap:
    android.app.RemoteInput[] fromCompat(android.support.v4.app.RemoteInputCompatBase$RemoteInput[]) -> a
android.support.v4.app.RemoteInputCompatBase -> android.support.v4.a.aq:
android.support.v4.app.RemoteInputCompatBase$RemoteInput -> android.support.v4.a.ar:
    java.lang.String getResultKey() -> a
    java.lang.CharSequence getLabel() -> b
    java.lang.CharSequence[] getChoices() -> c
    boolean getAllowFreeFormInput() -> d
    android.os.Bundle getExtras() -> e
android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory -> android.support.v4.a.as:
android.support.v4.app.RemoteInputCompatJellybean -> android.support.v4.a.at:
    android.os.Bundle toBundle(android.support.v4.app.RemoteInputCompatBase$RemoteInput) -> a
    android.os.Bundle[] toBundleArray(android.support.v4.app.RemoteInputCompatBase$RemoteInput[]) -> a
android.support.v4.content.FileProvider -> android.support.v4.content.FileProvider:
    java.lang.String[] COLUMNS -> a
    java.io.File DEVICE_ROOT -> b
    java.util.HashMap sCache -> c
    android.support.v4.content.FileProvider$PathStrategy mStrategy -> d
    void <init>() -> <init>
    boolean onCreate() -> onCreate
    void attachInfo(android.content.Context,android.content.pm.ProviderInfo) -> attachInfo
    android.net.Uri getUriForFile(android.content.Context,java.lang.String,java.io.File) -> a
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    java.lang.String getType(android.net.Uri) -> getType
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String) -> openFile
    android.support.v4.content.FileProvider$PathStrategy getPathStrategy(android.content.Context,java.lang.String) -> a
    android.support.v4.content.FileProvider$PathStrategy parsePathStrategy(android.content.Context,java.lang.String) -> b
    int modeToMode(java.lang.String) -> a
    java.io.File buildPath(java.io.File,java.lang.String[]) -> a
    java.lang.String[] copyOf(java.lang.String[],int) -> a
    java.lang.Object[] copyOf(java.lang.Object[],int) -> a
    void <clinit>() -> <clinit>
android.support.v4.content.FileProvider$PathStrategy -> android.support.v4.content.a:
    android.net.Uri getUriForFile(java.io.File) -> a
    java.io.File getFileForUri(android.net.Uri) -> a
android.support.v4.content.FileProvider$SimplePathStrategy -> android.support.v4.content.b:
    java.lang.String mAuthority -> a
    java.util.HashMap mRoots -> b
    void <init>(java.lang.String) -> <init>
    void addRoot(java.lang.String,java.io.File) -> a
    android.net.Uri getUriForFile(java.io.File) -> a
    java.io.File getFileForUri(android.net.Uri) -> a
cn.netin.elui.ActivityBridge -> cn.netin.elui.ActivityBridge:
    android.content.Context sContext -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void init(android.content.Context) -> init
    java.lang.String getRemovableSD() -> getRemovableSD
    java.lang.String getUsbStorage() -> getUsbStorage
    void setContext(android.content.Context,android.content.res.AssetManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int) -> setContext
    void setRemovables(java.lang.String,java.lang.String) -> setRemovables
cn.netin.elui.DeviceId -> cn.netin.elui.DeviceId:
    android.content.Context mContext -> a
    int CONNECTIVITY_UNAVAILABLE -> CONNECTIVITY_UNAVAILABLE
    int CONNECTIVITY_AVAILABLE -> CONNECTIVITY_AVAILABLE
    int CONNECTIVITY_CONNECTED -> CONNECTIVITY_CONNECTED
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void setContext(android.content.Context) -> setContext
    java.lang.String getAndroidId() -> getAndroidId
    java.lang.String getMacFromWifiInfo(android.net.wifi.WifiManager) -> a
    boolean openWifi(android.net.wifi.WifiManager) -> b
    void closeWifi(android.net.wifi.WifiManager) -> c
    java.lang.String getMacAddressFromWifi(android.net.wifi.WifiManager) -> d
    java.lang.String getMac() -> getMac
    java.lang.String getAdressMacByInterface() -> a
    java.lang.String getAddressMacByFile(android.net.wifi.WifiManager) -> e
    java.lang.String getIMEI() -> getIMEI
    java.lang.Boolean checkimeisame(java.lang.String) -> a
    java.lang.Boolean checkimei(java.lang.String) -> b
    java.util.List IMEI_initMtkDoubleSim() -> b
    java.util.List IMEI_initMtkSecondDoubleSim() -> c
    java.util.List IMEI_initSpreadDoubleSim() -> d
    java.util.List IMEI_initQualcommDoubleSim() -> IMEI_initQualcommDoubleSim
    int getNetState() -> getNetState
    void release() -> release
cn.netin.elui.Storage -> cn.netin.elui.Storage:
    java.lang.String path -> path
    boolean isRemovable -> isRemovable
    boolean isMounted -> isMounted
    void <init>() -> <init>
    java.util.List getStorageList(android.content.Context) -> getStorageList
    java.lang.String storages(android.content.Context) -> storages
cn.netin.kidsbrowser.AndroidBug5497Workaround -> cn.netin.kidsbrowser.a:
    android.view.View mChildOfContent -> a
    int usableHeightPrevious -> b
    android.widget.FrameLayout$LayoutParams frameLayoutParams -> c
    void assistActivity(android.app.Activity) -> a
    void <init>(android.app.Activity) -> <init>
    void possiblyResizeChildOfContent() -> a
    int computeUsableHeight() -> b
    void access$0(cn.netin.kidsbrowser.AndroidBug5497Workaround) -> a
cn.netin.kidsbrowser.AndroidBug5497Workaround$1 -> cn.netin.kidsbrowser.b:
    cn.netin.kidsbrowser.AndroidBug5497Workaround this$0 -> a
    void <init>(cn.netin.kidsbrowser.AndroidBug5497Workaround) -> <init>
    void onGlobalLayout() -> onGlobalLayout
cn.netin.kidsbrowser.DownloadServiceDownloadListener -> cn.netin.kidsbrowser.c:
    android.content.Context mContext -> a
    void <init>(android.content.Context) -> <init>
    void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long) -> onDownloadStart
cn.netin.kidsbrowser.ImageFilePath -> cn.netin.kidsbrowser.d:
    java.lang.String getPath(android.content.Context,android.net.Uri) -> a
    java.lang.String getDataColumn(android.content.Context,android.net.Uri,java.lang.String,java.lang.String[]) -> a
    boolean isExternalStorageDocument(android.net.Uri) -> a
    boolean isDownloadsDocument(android.net.Uri) -> b
    boolean isMediaDocument(android.net.Uri) -> c
    boolean isGooglePhotosUri(android.net.Uri) -> d
cn.netin.kidsbrowser.MainActivity -> cn.netin.kidsbrowser.MainActivity:
    cn.netin.kidsbrowser.UrlAdapter mGriddapter -> a
    cn.netin.kidsbrowser.WebAccessData mData -> b
    java.util.List mBookmarkList -> c
    java.util.List mWhiteList -> d
    cn.netin.kidsbrowser.MyWebView mWebView -> e
    android.widget.GridView mGridView -> f
    android.widget.EditText mUrlEdit -> g
    android.widget.ImageButton mReloadButton -> h
    android.widget.ImageButton mForwardButton -> i
    android.widget.ImageButton mBackwardButton -> j
    boolean mIsLoading -> k
    boolean mIsLimited -> l
    boolean mKeyboardShown -> m
    void <init>() -> <init>
    void setFullScreen() -> a
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void closeInputMethod() -> b
    void onCreate(android.os.Bundle) -> onCreate
    float dpToPx(android.content.Context,float) -> a
    void setupWebview() -> c
    void onNewIntent(android.content.Intent) -> onNewIntent
    void handleIntent(android.content.Intent) -> a
    void browse(java.lang.String) -> a
    void updateButtons() -> d
    void onClick(android.view.View) -> onClick
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean match(java.lang.String,java.lang.String) -> a
    java.lang.String getDomain(java.lang.String) -> b
    boolean checkUrl(java.util.List,java.lang.String) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.widget.ImageButton access$0(cn.netin.kidsbrowser.MainActivity) -> a
    void access$1(cn.netin.kidsbrowser.MainActivity,boolean) -> a
    void access$2(cn.netin.kidsbrowser.MainActivity) -> b
    boolean access$3(cn.netin.kidsbrowser.MainActivity) -> c
    java.util.List access$4(cn.netin.kidsbrowser.MainActivity) -> d
    android.widget.EditText access$5(cn.netin.kidsbrowser.MainActivity) -> e
    void access$6(cn.netin.kidsbrowser.MainActivity,java.lang.String) -> a
    java.util.List access$7(cn.netin.kidsbrowser.MainActivity) -> f
    void access$8(cn.netin.kidsbrowser.MainActivity,boolean) -> b
    boolean access$9(cn.netin.kidsbrowser.MainActivity) -> g
    void access$10(cn.netin.kidsbrowser.MainActivity) -> h
cn.netin.kidsbrowser.MainActivity$1 -> cn.netin.kidsbrowser.e:
    cn.netin.kidsbrowser.MainActivity this$0 -> a
    void <init>(cn.netin.kidsbrowser.MainActivity) -> <init>
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
cn.netin.kidsbrowser.MainActivity$2 -> cn.netin.kidsbrowser.f:
    cn.netin.kidsbrowser.MainActivity this$0 -> a
    void <init>(cn.netin.kidsbrowser.MainActivity) -> <init>
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
cn.netin.kidsbrowser.MainActivity$3 -> cn.netin.kidsbrowser.g:
    cn.netin.kidsbrowser.MainActivity this$0 -> a
    android.widget.FrameLayout val$activityRootView -> b
    void <init>(cn.netin.kidsbrowser.MainActivity,android.widget.FrameLayout) -> <init>
    void onGlobalLayout() -> onGlobalLayout
cn.netin.kidsbrowser.MainActivity$MyWebViewClient -> cn.netin.kidsbrowser.h:
    cn.netin.kidsbrowser.MainActivity this$0 -> a
    void <init>(cn.netin.kidsbrowser.MainActivity) -> <init>
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void <init>(cn.netin.kidsbrowser.MainActivity,cn.netin.kidsbrowser.MainActivity$MyWebViewClient) -> <init>
cn.netin.kidsbrowser.MyWebView -> cn.netin.kidsbrowser.MyWebView:
    android.widget.ProgressBar mProgressBar -> a
    android.content.Context mContext -> b
    android.app.Activity mActivity -> c
    android.webkit.ValueCallback mUploadMessage -> d
    android.webkit.ValueCallback mFilePathCallback -> e
    java.lang.String mCameraPhotoPath -> f
    java.io.File createImageFile() -> a
    void setActivity(android.app.Activity) -> setActivity
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    boolean onActivityResult(int,int,android.content.Intent) -> a
    void onScrollChanged(int,int,int,int) -> onScrollChanged
    android.widget.ProgressBar access$0(cn.netin.kidsbrowser.MyWebView) -> a
    android.content.Context access$1(cn.netin.kidsbrowser.MyWebView) -> b
    android.webkit.ValueCallback access$2(cn.netin.kidsbrowser.MyWebView) -> c
    void access$3(cn.netin.kidsbrowser.MyWebView,android.webkit.ValueCallback) -> a
    java.io.File access$4(cn.netin.kidsbrowser.MyWebView) -> d
    java.lang.String access$5(cn.netin.kidsbrowser.MyWebView) -> e
    void access$6(cn.netin.kidsbrowser.MyWebView,java.lang.String) -> a
    android.app.Activity access$7(cn.netin.kidsbrowser.MyWebView) -> f
cn.netin.kidsbrowser.MyWebView$WebChromeClient -> cn.netin.kidsbrowser.i:
    cn.netin.kidsbrowser.MyWebView this$0 -> a
    void <init>(cn.netin.kidsbrowser.MyWebView) -> <init>
    void onProgressChanged(android.webkit.WebView,int) -> onProgressChanged
    boolean onConsoleMessage(android.webkit.ConsoleMessage) -> onConsoleMessage
    boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult) -> onJsAlert
    boolean onShowFileChooser(android.webkit.WebView,android.webkit.ValueCallback,android.webkit.WebChromeClient$FileChooserParams) -> onShowFileChooser
cn.netin.kidsbrowser.R -> cn.netin.kidsbrowser.j:
cn.netin.kidsbrowser.R$drawable -> cn.netin.kidsbrowser.k:
    int bg_input -> bg_input
    int bg_navi -> bg_navi
    int btn_backward -> btn_backward
    int btn_close -> btn_close
    int btn_forward -> btn_forward
    int btn_home -> btn_home
    int btn_reload -> btn_reload
    int btn_stop -> btn_stop
    int coods -> coods
    int ic_launcher -> ic_launcher
    int nv_backward -> nv_backward
    int nv_backward_pressed -> nv_backward_pressed
    int nv_close -> nv_close
    int nv_close_pressed -> nv_close_pressed
    int nv_forward -> nv_forward
    int nv_forward_pressed -> nv_forward_pressed
    int nv_home -> nv_home
    int nv_home_pressed -> nv_home_pressed
    int nv_reload -> nv_reload
    int nv_reload_pressed -> nv_reload_pressed
    int nv_stop -> nv_stop
    int nv_stop_pressed -> nv_stop_pressed
    int page_background -> page_background
    int page_beijing -> page_beijing
    int page_btn_numpad_cancel_src -> page_btn_numpad_cancel_src
    int page_btn_numpad_del_src -> page_btn_numpad_del_src
    int page_first_btn -> page_first_btn
    int page_first_default -> page_first_default
    int page_first_enabled -> page_first_enabled
    int page_first_focused -> page_first_focused
    int page_first_press -> page_first_press
    int page_last_btn -> page_last_btn
    int page_last_default -> page_last_default
    int page_last_enabled -> page_last_enabled
    int page_last_focuse -> page_last_focuse
    int page_last_press -> page_last_press
    int page_next_btn -> page_next_btn
    int page_next_default -> page_next_default
    int page_next_enabled -> page_next_enabled
    int page_next_focuse -> page_next_focuse
    int page_next_press -> page_next_press
    int page_number_text -> page_number_text
    int page_numpad -> page_numpad
    int page_numpad_0 -> page_numpad_0
    int page_numpad_1 -> page_numpad_1
    int page_numpad_2 -> page_numpad_2
    int page_numpad_3 -> page_numpad_3
    int page_numpad_4 -> page_numpad_4
    int page_numpad_5 -> page_numpad_5
    int page_numpad_6 -> page_numpad_6
    int page_numpad_7 -> page_numpad_7
    int page_numpad_8 -> page_numpad_8
    int page_numpad_9 -> page_numpad_9
    int page_numpad_cancel -> page_numpad_cancel
    int page_numpad_del -> page_numpad_del
    int page_numpad_enter -> page_numpad_enter
    int page_previous_btn -> page_previous_btn
    int page_previous_default -> page_previous_default
    int page_previous_enabled -> page_previous_enabled
    int page_previous_focused -> page_previous_focused
    int page_previous_press -> page_previous_press
    int progressbar -> progressbar
    int st_0 -> st_0
    int st_1 -> st_1
    int st_2 -> st_2
    int st_3 -> st_3
    int sticker_0 -> sticker_0
    int sticker_0_pressed -> sticker_0_pressed
    int sticker_1 -> sticker_1
    int sticker_1_pressed -> sticker_1_pressed
    int sticker_2 -> sticker_2
    int sticker_2_pressed -> sticker_2_pressed
    int sticker_3 -> sticker_3
    int sticker_3_pressed -> sticker_3_pressed
    int subject_all -> subject_all
    int subject_biology -> subject_biology
    int subject_chemisty -> subject_chemisty
    int subject_chinese -> subject_chinese
    int subject_english -> subject_english
    int subject_geography -> subject_geography
    int subject_history -> subject_history
    int subject_maths -> subject_maths
    int subject_other -> subject_other
    int subject_physics -> subject_physics
    int subject_political -> subject_political
    int subject_science -> subject_science
    int subject_unknown -> subject_unknown
    int transparent -> transparent
cn.netin.kidsbrowser.R$id -> cn.netin.kidsbrowser.l:
    int FrameLayout1 -> FrameLayout1
    int RelativeLayout1 -> RelativeLayout1
    int action_settings -> action_settings
    int backwardButton -> backwardButton
    int cancel_btn -> cancel_btn
    int closeButton -> closeButton
    int del_btn -> del_btn
    int editPageNum -> editPageNum
    int first_btn -> first_btn
    int forwardButton -> forwardButton
    int gridView -> gridView
    int homeButton -> homeButton
    int icon -> icon
    int key1 -> key1
    int last_btn -> last_btn
    int next_btn -> next_btn
    int num_0_btn -> num_0_btn
    int num_1_btn -> num_1_btn
    int num_2_btn -> num_2_btn
    int num_3_btn -> num_3_btn
    int num_4_btn -> num_4_btn
    int num_5_btn -> num_5_btn
    int num_6_btn -> num_6_btn
    int num_7_btn -> num_7_btn
    int num_8_btn -> num_8_btn
    int num_9_btn -> num_9_btn
    int pageNum -> pageNum
    int pageableView1 -> pageableView1
    int prev_btn -> prev_btn
    int reloadButton -> reloadButton
    int showNum -> showNum
    int subjectselector_gridview -> subjectselector_gridview
    int subjectselector_label -> subjectselector_label
    int submit_btn -> submit_btn
    int urlEdit -> urlEdit
    int webView -> webView
cn.netin.kidsbrowser.R$layout -> cn.netin.kidsbrowser.m:
    int activity_main -> activity_main
    int bookmark_item -> bookmark_item
    int icons_item -> icons_item
    int number_input_dialog -> number_input_dialog
    int page_board -> page_board
    int page_pageable_activity -> page_pageable_activity
    int pagenavi -> pagenavi
    int subjectselector -> subjectselector
    int subjectselector_item -> subjectselector_item
cn.netin.kidsbrowser.R$string -> cn.netin.kidsbrowser.n:
    int access_denied -> access_denied
    int action_settings -> action_settings
    int app_name -> app_name
    int first_page -> first_page
    int hello_world -> hello_world
    int last_page -> last_page
    int next_page -> next_page
    int previous_page -> previous_page
cn.netin.kidsbrowser.UrlAdapter -> cn.netin.kidsbrowser.o:
    int[] resIds -> b
    android.content.Context mContext -> a
    java.util.List mUrlList -> c
    int mSelected -> d
    void <init>(android.content.Context) -> <init>
    void setData(java.util.List) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    java.lang.String getSiteName(java.lang.String) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
cn.netin.kidsbrowser.WebAccessData -> cn.netin.kidsbrowser.p:
    android.content.Context mContext -> a
    void <init>(android.content.Context) -> <init>
    boolean isEnable() -> a
    java.util.List getBookmarks() -> b
    java.util.List getUrls() -> c
cn.netin.launcher.AboutActivity -> cn.netin.launcher.AboutActivity:
    void <init>() -> <init>
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onCreate(android.os.Bundle) -> onCreate
cn.netin.launcher.Avatar -> cn.netin.launcher.a:
    int sAvatarSize -> a
    void <clinit>() -> <clinit>
    int getAvatarSize(android.content.Context) -> b
    android.graphics.Bitmap getDefault(android.content.Context,boolean) -> a
    boolean saveDefault(android.content.Context,android.graphics.drawable.BitmapDrawable) -> a
    android.graphics.Bitmap getAvatar(android.graphics.drawable.BitmapDrawable,android.content.Context) -> a
    android.graphics.Bitmap getAvatar(java.lang.String,android.content.Context) -> a
    java.lang.String getName(android.content.Context) -> a
    void saveName(android.content.Context,java.lang.String,boolean) -> a
    android.net.Uri getOutputMediaFileUri(int) -> a
    java.io.File getOutputMediaFile(int) -> b
cn.netin.launcher.AvatarActivity -> cn.netin.launcher.AvatarActivity:
    android.widget.Gallery mGallery -> a
    android.widget.ImageView mAvatarView -> b
    android.widget.EditText mNameEdit -> c
    java.util.ArrayList mAvatars -> d
    com.hanceedu.common.HanceApplication mApp -> e
    android.net.Uri mPhotoUri -> f
    int mSelectedIndex -> g
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void findAvatars() -> a
    void saveAvatar() -> b
    void startCamera() -> c
    void startAlbum() -> d
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void handleClick(android.view.View) -> handleClick
    void onClick(android.view.View) -> onClick
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    java.util.ArrayList access$0(cn.netin.launcher.AvatarActivity) -> a
cn.netin.launcher.AvatarActivity$ImageAdapter -> cn.netin.launcher.b:
    android.view.LayoutInflater mLayoutInflater -> b
    cn.netin.launcher.AvatarActivity this$0 -> a
    void <init>(cn.netin.launcher.AvatarActivity,android.content.Context) -> <init>
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
cn.netin.launcher.BatteryHandler -> cn.netin.launcher.c:
    android.widget.ImageView mBatteryView -> a
    cn.netin.launcher.receiver.BatteryStatusReceiver mBatteryStatusReceiver -> b
    void <init>(android.app.Application) -> <init>
    void setView(android.widget.ImageView) -> a
    void handleBatteryStatus(int,int,boolean) -> a
    void release() -> a
    void access$0(cn.netin.launcher.BatteryHandler,int,int,boolean) -> a
cn.netin.launcher.BatteryHandler$1 -> cn.netin.launcher.d:
    cn.netin.launcher.BatteryHandler this$0 -> a
    void <init>(cn.netin.launcher.BatteryHandler) -> <init>
    void onChange(int,int,boolean) -> a
cn.netin.launcher.BlockActivity -> cn.netin.launcher.BlockActivity:
    void <init>() -> <init>
    void onDestroy() -> onDestroy
    void onResume() -> onResume
    void onPause() -> onPause
    void onCreate(android.os.Bundle) -> onCreate
    void onBackPressed() -> onBackPressed
cn.netin.launcher.CellLayout -> cn.netin.launcher.CellLayout:
    boolean mPortrait -> c
    int mCellWidth -> d
    int mCellHeight -> e
    int mLongAxisStartPadding -> f
    int mLongAxisEndPadding -> g
    int mShortAxisStartPadding -> h
    int mShortAxisEndPadding -> i
    int mShortAxisCells -> j
    int mLongAxisCells -> k
    int mWidthGap -> l
    int mHeightGap -> m
    int[] mCellXY -> a
    int mChildCount -> b
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void cancelLongPress() -> cancelLongPress
    int getCountX() -> getCountX
    int getCountY() -> getCountY
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    int getLeftPadding() -> getLeftPadding
    int getTopPadding() -> getTopPadding
    int getRightPadding() -> getRightPadding
    int getBottomPadding() -> getBottomPadding
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void setChildrenDrawingCacheEnabled(boolean) -> setChildrenDrawingCacheEnabled
    void setChildrenDrawnWithCacheEnabled(boolean) -> setChildrenDrawnWithCacheEnabled
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
cn.netin.launcher.CellLayout$CellLayoutParams -> cn.netin.launcher.e:
    int cellX -> a
    int cellY -> b
    int cellHSpan -> c
    int cellVSpan -> d
    int x -> e
    int y -> f
    boolean regenerateId -> g
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.view.ViewGroup$LayoutParams) -> <init>
    void <init>(int,int,int,int) -> <init>
    void setup(int,int,int,int,int,int) -> a
cn.netin.launcher.ConnectivityHandler -> cn.netin.launcher.f:
    cn.netin.launcher.receiver.ConnectivityReceiver mConnectivityReceiver -> a
    android.widget.ImageView mWifiView -> b
    void <init>(android.app.Application) -> <init>
    void setView(android.widget.ImageView) -> a
    void handleConnectivity(int,boolean) -> a
    void release() -> a
    void access$0(cn.netin.launcher.ConnectivityHandler,int,boolean) -> a
cn.netin.launcher.ConnectivityHandler$1 -> cn.netin.launcher.g:
    cn.netin.launcher.ConnectivityHandler this$0 -> a
    void <init>(cn.netin.launcher.ConnectivityHandler) -> <init>
    void onChange(int,boolean) -> a
cn.netin.launcher.Controller -> cn.netin.launcher.h:
    com.hanceedu.common.HanceApplication mApp -> a
    cn.netin.launcher.data.LauncherData mData -> b
    java.util.List mAppList -> c
    android.content.Context mContext -> d
    cn.netin.launcher.Controller$ControllerListener sListener -> e
    boolean mReload -> f
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    void setListener(cn.netin.launcher.Controller$ControllerListener) -> a
    void prepareItemList() -> a
    int activate(java.lang.String) -> a
    void handleData(com.hanceedu.common.data.DataInterface$Param) -> a
    void onAppList() -> e
    void showError(int) -> c
    boolean startActivitySafely(android.content.Intent) -> a
    void downloadApk(java.lang.String) -> d
    void startWifiSettingActivity() -> f
    void launchParentSettings() -> g
    void startElsApp(int) -> d
    void handlePortalClick(int) -> a
    void openXl(java.lang.String) -> b
    com.hanceedu.common.App getAppById(int) -> e
    void handleItemClick(int) -> b
    boolean startPackage(java.lang.String) -> c
    void startBoltWeb() -> h
    void startWeb(java.lang.String) -> e
    void switchLauncher() -> i
    void launcherOn() -> b
    void launcherOff() -> c
    void startAvatarActivity() -> j
    void setAvatar(int) -> f
    void release() -> d
    void access$0(cn.netin.launcher.Controller,boolean) -> a
    void access$1(cn.netin.launcher.Controller) -> a
    void access$2(cn.netin.launcher.Controller,int) -> a
    void access$3(cn.netin.launcher.Controller) -> b
    void access$4(cn.netin.launcher.Controller,com.hanceedu.common.data.DataInterface$Param) -> a
cn.netin.launcher.Controller$1 -> cn.netin.launcher.i:
    cn.netin.launcher.Controller this$0 -> a
    void <init>(cn.netin.launcher.Controller) -> <init>
    void onData(com.hanceedu.common.data.DataInterface$Param) -> a
cn.netin.launcher.Controller$AppObserver -> cn.netin.launcher.j:
    cn.netin.launcher.Controller this$0 -> a
    void <init>(cn.netin.launcher.Controller,android.os.Handler) -> <init>
    void onChange(boolean) -> onChange
cn.netin.launcher.Controller$ControllerListener -> cn.netin.launcher.k:
    void onAppList(java.util.List) -> a
cn.netin.launcher.Controller$MyHandler -> cn.netin.launcher.l:
    cn.netin.launcher.Controller this$0 -> a
    void <init>(cn.netin.launcher.Controller) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
cn.netin.launcher.ErrorActivity -> cn.netin.launcher.ErrorActivity:
    java.lang.String[] TITLES -> a
    java.lang.String[] TEXTS -> b
    android.widget.TextView mTitleView -> c
    android.widget.TextView mContentView -> d
    android.widget.TextView mCodeText -> e
    android.widget.EditText mCodeEdit -> f
    android.widget.Button mSubmitButton -> g
    cn.netin.launcher.Controller mController -> h
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void handleIntent(android.content.Intent) -> a
    void showError(int) -> a
    void displayCodeInput(boolean) -> a
    void onClick(android.view.View) -> onClick
    void activate() -> b
cn.netin.launcher.FullScreenActivity -> cn.netin.launcher.m:
    void <init>() -> <init>
    void setFullScreen() -> a
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onResume() -> onResume
cn.netin.launcher.LauncherActivity -> cn.netin.launcher.LauncherActivity:
    int mPlace -> b
    android.view.View mHeaderView -> c
    android.view.View mBackButton -> d
    com.hanceedu.common.HanceApplication mApp -> e
    cn.netin.launcher.data.ProtectionData mProtectionData -> f
    android.view.View mPortalView -> g
    cn.netin.launcher.Controller mController -> h
    android.view.LayoutInflater mInflater -> i
    android.content.Context mContext -> j
    boolean mFlatStyle -> k
    boolean mLogoAsAvatar -> l
    cn.netin.launcher.BatteryHandler mBatteryHandler -> m
    cn.netin.launcher.ConnectivityHandler mConnectivityHandler -> n
    cn.netin.launcher.TimeHandler mTimeHandler -> o
    cn.netin.launcher.LockScreenHandler mLockScreenHandler -> p
    cn.netin.launcher.LauncherPermissions mLauncherPermissions -> q
    cn.netin.launcher.WorkspaceHandler mWorkspaceHandler -> r
    android.content.BroadcastReceiver mReceiver -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void registerReceiver() -> c
    android.content.Context getContext() -> getContext
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void handelIntent(android.content.Intent) -> a
    void initViews() -> b
    void setAvatar(boolean) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void showMenu() -> d
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void handleClick(android.view.View) -> handleClick
    void switchToWorkspace(int) -> a
    void switchToPortal(boolean) -> b
    void handleBackButton() -> e
    void quit() -> f
    void showPasswordDialog(int) -> b
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onRestart() -> onRestart
    void onResume() -> onResume
    void onStart() -> onStart
    void onStop() -> onStop
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void access$0(cn.netin.launcher.LauncherActivity,boolean) -> a
    void access$1(cn.netin.launcher.LauncherActivity,boolean) -> b
    cn.netin.launcher.Controller access$2(cn.netin.launcher.LauncherActivity) -> a
    cn.netin.launcher.WorkspaceHandler access$3(cn.netin.launcher.LauncherActivity) -> b
cn.netin.launcher.LauncherActivity$1 -> cn.netin.launcher.n:
    cn.netin.launcher.LauncherActivity this$0 -> a
    void <init>(cn.netin.launcher.LauncherActivity) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
cn.netin.launcher.LauncherActivity$2 -> cn.netin.launcher.o:
    cn.netin.launcher.LauncherActivity this$0 -> a
    void <init>(cn.netin.launcher.LauncherActivity) -> <init>
    void onItemClicked(int) -> a
cn.netin.launcher.LauncherActivity$3 -> cn.netin.launcher.p:
    cn.netin.launcher.LauncherActivity this$0 -> a
    void <init>(cn.netin.launcher.LauncherActivity) -> <init>
    void onAppList(java.util.List) -> a
cn.netin.launcher.LauncherPermissions -> cn.netin.launcher.q:
    boolean mStatPermissionChecked -> a
    boolean mInstallerChecked -> b
    android.app.AlertDialog mUsageDialog -> c
    android.app.AlertDialog mAppDialog -> d
    android.content.Context mContext -> e
    int mCheckCount -> f
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    void check() -> a
    void startUsageSetting() -> b
    void startAppSetting() -> c
    void access$0(cn.netin.launcher.LauncherPermissions) -> a
    void access$1(cn.netin.launcher.LauncherPermissions) -> b
cn.netin.launcher.LauncherPermissions$1 -> cn.netin.launcher.r:
    cn.netin.launcher.LauncherPermissions this$0 -> a
    void <init>(cn.netin.launcher.LauncherPermissions) -> <init>
    void onCancel(android.content.DialogInterface) -> onCancel
cn.netin.launcher.LauncherPermissions$2 -> cn.netin.launcher.s:
    cn.netin.launcher.LauncherPermissions this$0 -> a
    void <init>(cn.netin.launcher.LauncherPermissions) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
cn.netin.launcher.LauncherPermissions$3 -> cn.netin.launcher.t:
    cn.netin.launcher.LauncherPermissions this$0 -> a
    void <init>(cn.netin.launcher.LauncherPermissions) -> <init>
    void onCancel(android.content.DialogInterface) -> onCancel
cn.netin.launcher.LauncherPermissions$4 -> cn.netin.launcher.u:
    cn.netin.launcher.LauncherPermissions this$0 -> a
    void <init>(cn.netin.launcher.LauncherPermissions) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
cn.netin.launcher.LockScreenHandler -> cn.netin.launcher.v:
    android.content.Context mContext -> a
    boolean sIsLocked -> b
    android.content.BroadcastReceiver mReceiver -> c
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    void registerReceiver() -> c
    void startLock() -> d
    void removeLock() -> e
    void mayLockScreen() -> a
    void release() -> b
    void access$0(cn.netin.launcher.LockScreenHandler) -> a
    void access$1(cn.netin.launcher.LockScreenHandler) -> b
cn.netin.launcher.LockScreenHandler$1 -> cn.netin.launcher.w:
    cn.netin.launcher.LockScreenHandler this$0 -> a
    void <init>(cn.netin.launcher.LockScreenHandler) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
cn.netin.launcher.ManageSpaceActivity -> cn.netin.launcher.ManageSpaceActivity:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
cn.netin.launcher.MenuActivity -> cn.netin.launcher.MenuActivity:
    cn.netin.launcher.data.ProtectionData mProtectionData -> a
    com.hanceedu.common.HanceApplication mApp -> b
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void handleClick(android.view.View) -> handleClick
    void startWallpaper() -> a
    void showNotifications() -> b
    void startParentSettings() -> c
    void startSetting() -> d
    void startAbout() -> e
cn.netin.launcher.PasswordActivity -> cn.netin.launcher.PasswordActivity:
    android.widget.EditText mPasswordEdit -> a
    android.widget.TextView mMessageView -> b
    com.hanceedu.common.HanceApplication mApp -> c
    cn.netin.launcher.data.ProtectionData mProtectionData -> d
    int mQuitFor -> e
    void <init>() -> <init>
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onCreate(android.os.Bundle) -> onCreate
    void handleClick(android.view.View) -> handleClick
    void handlePass(java.lang.String) -> a
    java.lang.String getPassword() -> a
    void savePassword(java.lang.String) -> b
cn.netin.launcher.R -> cn.netin.launcher.x:
cn.netin.launcher.R$drawable -> cn.netin.launcher.y:
    int a1 -> a1
    int avatar_0 -> avatar_0
    int avatar_1 -> avatar_1
    int avatar_10 -> avatar_10
    int avatar_11 -> avatar_11
    int avatar_12 -> avatar_12
    int avatar_2 -> avatar_2
    int avatar_3 -> avatar_3
    int avatar_4 -> avatar_4
    int avatar_5 -> avatar_5
    int avatar_6 -> avatar_6
    int avatar_7 -> avatar_7
    int avatar_8 -> avatar_8
    int avatar_9 -> avatar_9
    int back_arrow -> back_arrow
    int back_btn2_default -> back_btn2_default
    int back_btn2_pressed -> back_btn2_pressed
    int back_btn_bg -> back_btn_bg
    int back_btn_default -> back_btn_default
    int back_btn_press -> back_btn_press
    int back_btn_pressed -> back_btn_pressed
    int back_btn_selector -> back_btn_selector
    int back_button_default -> back_button_default
    int back_button_press -> back_button_press
    int bar_o -> bar_o
    int bar_orange -> bar_orange
    int battery0 -> battery0
    int battery1 -> battery1
    int battery1c -> battery1c
    int battery2 -> battery2
    int battery2c -> battery2c
    int battery3 -> battery3
    int battery3c -> battery3c
    int battery4 -> battery4
    int battery4c -> battery4c
    int battery5 -> battery5
    int battery5c -> battery5c
    int battery_error -> battery_error
    int battery_unknown -> battery_unknown
    int bear -> bear
    int bear_p -> bear_p
    int bg_avatar_frame -> bg_avatar_frame
    int bg_avatars -> bg_avatars
    int bg_cloud -> bg_cloud
    int bg_cloud_port -> bg_cloud_port
    int bg_cloud_title -> bg_cloud_title
    int bg_custom_dialog -> bg_custom_dialog
    int bg_frame_land -> bg_frame_land
    int bg_frame_port -> bg_frame_port
    int bg_ico7 -> bg_ico7
    int bg_icon -> bg_icon
    int bg_icon0 -> bg_icon0
    int bg_icon1 -> bg_icon1
    int bg_icon10 -> bg_icon10
    int bg_icon11 -> bg_icon11
    int bg_icon2 -> bg_icon2
    int bg_icon3 -> bg_icon3
    int bg_icon4 -> bg_icon4
    int bg_icon5 -> bg_icon5
    int bg_icon6 -> bg_icon6
    int bg_icon7 -> bg_icon7
    int bg_icon8 -> bg_icon8
    int bg_icon9 -> bg_icon9
    int bg_input -> bg_input
    int bg_input_big -> bg_input_big
    int bg_input_big_pressed -> bg_input_big_pressed
    int bg_input_pressed -> bg_input_pressed
    int bg_navi -> bg_navi
    int bg_pad -> bg_pad
    int bg_transparent_yellow -> bg_transparent_yellow
    int bg_window -> bg_window
    int board -> board
    int board0 -> board0
    int board1 -> board1
    int board2 -> board2
    int board3 -> board3
    int bt_add -> bt_add
    int bt_add_pressed -> bt_add_pressed
    int bt_back_normal -> bt_back_normal
    int bt_back_pressed -> bt_back_pressed
    int bt_close_normal -> bt_close_normal
    int bt_close_pressed -> bt_close_pressed
    int bt_day -> bt_day
    int bt_day_pressed -> bt_day_pressed
    int bt_menu_normal -> bt_menu_normal
    int bt_menu_pressed -> bt_menu_pressed
    int bt_month -> bt_month
    int bt_month_pressed -> bt_month_pressed
    int bt_ok -> bt_ok
    int bt_ok_normal -> bt_ok_normal
    int bt_ok_pressed -> bt_ok_pressed
    int bt_remove -> bt_remove
    int bt_remove_pressed -> bt_remove_pressed
    int bt_test -> bt_test
    int bt_week -> bt_week
    int bt_week_pressed -> bt_week_pressed
    int btn_add -> btn_add
    int btn_add_pressed -> btn_add_pressed
    int btn_album -> btn_album
    int btn_album_pressed -> btn_album_pressed
    int btn_backward -> btn_backward
    int btn_camera -> btn_camera
    int btn_camera_pressed -> btn_camera_pressed
    int btn_close -> btn_close
    int btn_forward -> btn_forward
    int btn_home -> btn_home
    int btn_reload -> btn_reload
    int btn_stop -> btn_stop
    int button_add -> button_add
    int button_add2 -> button_add2
    int button_album -> button_album
    int button_camera -> button_camera
    int button_close -> button_close
    int button_day -> button_day
    int button_month -> button_month
    int button_ok -> button_ok
    int button_remove -> button_remove
    int button_switch -> button_switch
    int button_week -> button_week
    int close_normal -> close_normal
    int close_pressed -> close_pressed
    int coods -> coods
    int cvgallery_bg -> cvgallery_bg
    int div_grey -> div_grey
    int floor -> floor
    int focused_application_background -> focused_application_background
    int frame -> frame
    int frame2 -> frame2
    int hd_grey -> hd_grey
    int hd_grey_end -> hd_grey_end
    int hd_grey_mid -> hd_grey_mid
    int hd_grey_start -> hd_grey_start
    int ic_kids_browser -> ic_kids_browser
    int ic_launcher -> ic_launcher
    int ic_launcher_application -> ic_launcher_application
    int ic_menu_notifications -> ic_menu_notifications
    int ic_parental_control -> ic_parental_control
    int ic_trash -> ic_trash
    int ic_trash_pressed -> ic_trash_pressed
    int icon -> icon
    int icon2 -> icon2
    int icon_notification -> icon_notification
    int icon_notification0 -> icon_notification0
    int icon_trash -> icon_trash
    int input -> input
    int line_hor_black_2_dp -> line_hor_black_2_dp
    int line_hor_blue_5_dp -> line_hor_blue_5_dp
    int line_ver_black_1_dp -> line_ver_black_1_dp
    int list_container_land_1024x768 -> list_container_land_1024x768
    int list_container_port_1024x768 -> list_container_port_1024x768
    int list_container_title_bg -> list_container_title_bg
    int logo -> logo
    int logo_l -> logo_l
    int menu_bg -> menu_bg
    int menu_btn_selector -> menu_btn_selector
    int menu_notifications -> menu_notifications
    int menu_parent_pass -> menu_parent_pass
    int menu_settings -> menu_settings
    int menu_wallpaper -> menu_wallpaper
    int navi_end -> navi_end
    int navi_mid -> navi_mid
    int navi_start -> navi_start
    int night -> night
    int nv_backward -> nv_backward
    int nv_backward_pressed -> nv_backward_pressed
    int nv_close -> nv_close
    int nv_close_pressed -> nv_close_pressed
    int nv_forward -> nv_forward
    int nv_forward_pressed -> nv_forward_pressed
    int nv_home -> nv_home
    int nv_home_pressed -> nv_home_pressed
    int nv_reload -> nv_reload
    int nv_reload_pressed -> nv_reload_pressed
    int nv_stop -> nv_stop
    int nv_stop_pressed -> nv_stop_pressed
    int opition_bg_default -> opition_bg_default
    int opition_bg_pressed -> opition_bg_pressed
    int opition_bg_select -> opition_bg_select
    int opition_bg_selected -> opition_bg_selected
    int page_background -> page_background
    int page_beijing -> page_beijing
    int page_btn_numpad_cancel_src -> page_btn_numpad_cancel_src
    int page_btn_numpad_del_src -> page_btn_numpad_del_src
    int page_first_btn -> page_first_btn
    int page_first_default -> page_first_default
    int page_first_enabled -> page_first_enabled
    int page_first_focused -> page_first_focused
    int page_first_press -> page_first_press
    int page_last_btn -> page_last_btn
    int page_last_default -> page_last_default
    int page_last_enabled -> page_last_enabled
    int page_last_focuse -> page_last_focuse
    int page_last_press -> page_last_press
    int page_next_btn -> page_next_btn
    int page_next_default -> page_next_default
    int page_next_enabled -> page_next_enabled
    int page_next_focuse -> page_next_focuse
    int page_next_press -> page_next_press
    int page_number_text -> page_number_text
    int page_numpad -> page_numpad
    int page_numpad_0 -> page_numpad_0
    int page_numpad_1 -> page_numpad_1
    int page_numpad_2 -> page_numpad_2
    int page_numpad_3 -> page_numpad_3
    int page_numpad_4 -> page_numpad_4
    int page_numpad_5 -> page_numpad_5
    int page_numpad_6 -> page_numpad_6
    int page_numpad_7 -> page_numpad_7
    int page_numpad_8 -> page_numpad_8
    int page_numpad_9 -> page_numpad_9
    int page_numpad_cancel -> page_numpad_cancel
    int page_numpad_del -> page_numpad_del
    int page_numpad_enter -> page_numpad_enter
    int page_previous_btn -> page_previous_btn
    int page_previous_default -> page_previous_default
    int page_previous_enabled -> page_previous_enabled
    int page_previous_focused -> page_previous_focused
    int page_previous_press -> page_previous_press
    int planet -> planet
    int pn_end -> pn_end
    int pn_end_pressed -> pn_end_pressed
    int pn_mid -> pn_mid
    int pn_mid_pressed -> pn_mid_pressed
    int pn_start -> pn_start
    int pn_start_pressed -> pn_start_pressed
    int portal_apps -> portal_apps
    int portal_class -> portal_class
    int portal_dict -> portal_dict
    int portal_homework -> portal_homework
    int portal_message -> portal_message
    int portal_profile -> portal_profile
    int portal_promote -> portal_promote
    int portal_schoolbag -> portal_schoolbag
    int portal_space -> portal_space
    int portal_tutor -> portal_tutor
    int pressed_application_background -> pressed_application_background
    int preview_background -> preview_background
    int preview_bg -> preview_bg
    int preview_bg_focus -> preview_bg_focus
    int preview_bg_press -> preview_bg_press
    int progressbar -> progressbar
    int rm_apps -> rm_apps
    int rm_dict -> rm_dict
    int rm_schoolbag -> rm_schoolbag
    int room_apps -> room_apps
    int room_apps_p -> room_apps_p
    int room_bg -> room_bg
    int room_class_label -> room_class_label
    int room_dict -> room_dict
    int room_dict_p -> room_dict_p
    int room_dmkt -> room_dmkt
    int room_dmkt_p -> room_dmkt_p
    int room_dzsb -> room_dzsb
    int room_dzsb_p -> room_dzsb_p
    int room_floor -> room_floor
    int room_floor1 -> room_floor1
    int room_floor2 -> room_floor2
    int room_flower -> room_flower
    int room_frame -> room_frame
    int room_frame_p -> room_frame_p
    int room_homework -> room_homework
    int room_homework_p -> room_homework_p
    int room_message -> room_message
    int room_profile -> room_profile
    int room_promote -> room_promote
    int room_promote_p -> room_promote_p
    int room_schoolbag -> room_schoolbag
    int room_schoolbag_p -> room_schoolbag_p
    int room_space -> room_space
    int room_space_p -> room_space_p
    int room_tutor -> room_tutor
    int room_tutor_p -> room_tutor_p
    int rooom_message -> rooom_message
    int rooom_profile -> rooom_profile
    int seekbar -> seekbar
    int seekbar30 -> seekbar30
    int seekbar_bg -> seekbar_bg
    int seekbar_bg30 -> seekbar_bg30
    int seekbar_progress -> seekbar_progress
    int seekbar_progress30 -> seekbar_progress30
    int seekbar_thumb -> seekbar_thumb
    int setting_bg -> setting_bg
    int shape_dialog -> shape_dialog
    int shortcut_selector -> shortcut_selector
    int sleeping -> sleeping
    int st_0 -> st_0
    int st_1 -> st_1
    int st_2 -> st_2
    int st_3 -> st_3
    int stars_bg -> stars_bg
    int stars_bg2 -> stars_bg2
    int sticker_0 -> sticker_0
    int sticker_0_pressed -> sticker_0_pressed
    int sticker_1 -> sticker_1
    int sticker_1_pressed -> sticker_1_pressed
    int sticker_2 -> sticker_2
    int sticker_2_pressed -> sticker_2_pressed
    int sticker_3 -> sticker_3
    int sticker_3_pressed -> sticker_3_pressed
    int subject_all -> subject_all
    int subject_biology -> subject_biology
    int subject_chemisty -> subject_chemisty
    int subject_chinese -> subject_chinese
    int subject_english -> subject_english
    int subject_geography -> subject_geography
    int subject_history -> subject_history
    int subject_maths -> subject_maths
    int subject_other -> subject_other
    int subject_physics -> subject_physics
    int subject_political -> subject_political
    int subject_science -> subject_science
    int subject_unknown -> subject_unknown
    int switch_off -> switch_off
    int switch_on -> switch_on
    int transparent -> transparent
    int unlock -> unlock
    int vbar -> vbar
    int wallpaper1 -> wallpaper1
    int wallpaper10 -> wallpaper10
    int wallpaper10_s -> wallpaper10_s
    int wallpaper11 -> wallpaper11
    int wallpaper11_s -> wallpaper11_s
    int wallpaper12 -> wallpaper12
    int wallpaper12_s -> wallpaper12_s
    int wallpaper13 -> wallpaper13
    int wallpaper13_s -> wallpaper13_s
    int wallpaper14 -> wallpaper14
    int wallpaper14_s -> wallpaper14_s
    int wallpaper1_s -> wallpaper1_s
    int wallpaper2 -> wallpaper2
    int wallpaper2_s -> wallpaper2_s
    int wallpaper3 -> wallpaper3
    int wallpaper3_s -> wallpaper3_s
    int wallpaper4 -> wallpaper4
    int wallpaper4_s -> wallpaper4_s
    int wallpaper5 -> wallpaper5
    int wallpaper5_s -> wallpaper5_s
    int wallpaper6 -> wallpaper6
    int wallpaper6_s -> wallpaper6_s
    int wallpaper7 -> wallpaper7
    int wallpaper7_s -> wallpaper7_s
    int wallpaper8 -> wallpaper8
    int wallpaper8_s -> wallpaper8_s
    int wallpaper9 -> wallpaper9
    int wallpaper9_s -> wallpaper9_s
    int wifi0 -> wifi0
    int wifi1 -> wifi1
    int wifi2 -> wifi2
    int wifi3 -> wifi3
    int wifi4 -> wifi4
    int xl_homework -> xl_homework
    int xl_promote -> xl_promote
    int xl_space -> xl_space
    int xl_tutor -> xl_tutor
cn.netin.launcher.R$string -> cn.netin.launcher.z:
    int access_denied -> access_denied
    int action_settings -> action_settings
    int activity_not_found -> activity_not_found
    int add -> add
    int add_ok -> add_ok
    int apk_installer -> apk_installer
    int app_name -> app_name
    int app_permit -> app_permit
    int available -> available
    int avatar_setting -> avatar_setting
    int block_activity -> block_activity
    int block_warning -> block_warning
    int cancel -> cancel
    int chooser_wallpaper -> chooser_wallpaper
    int close_window -> close_window
    int configure_wallpaper -> configure_wallpaper
    int confirm -> confirm
    int confirm_password -> confirm_password
    int confirm_required -> confirm_required
    int conn_status -> conn_status
    int connect_wifi -> connect_wifi
    int data_not_found -> data_not_found
    int data_path -> data_path
    int default_pass -> default_pass
    int dialog_message -> dialog_message
    int dialog_no -> dialog_no
    int dialog_ok -> dialog_ok
    int dialog_title -> dialog_title
    int disconnect_wifi -> disconnect_wifi
    int empty_category -> empty_category
    int error -> error
    int first_page -> first_page
    int from -> from
    int hello -> hello
    int hello_world -> hello_world
    int input_email -> input_email
    int input_pass -> input_pass
    int input_password -> input_password
    int invalid_period -> invalid_period
    int invalid_url -> invalid_url
    int ip_address -> ip_address
    int kids -> kids
    int kids_browser -> kids_browser
    int last_page -> last_page
    int launcher_name -> launcher_name
    int launcher_service -> launcher_service
    int launcher_text -> launcher_text
    int manage_space -> manage_space
    int manage_space_text -> manage_space_text
    int max_play_time -> max_play_time
    int menu_about -> menu_about
    int menu_notifications -> menu_notifications
    int menu_password -> menu_password
    int menu_settings -> menu_settings
    int menu_wallpaper -> menu_wallpaper
    int new_pass -> new_pass
    int new_pass_please -> new_pass_please
    int next_page -> next_page
    int no_launcher -> no_launcher
    int not_same -> not_same
    int old_pass -> old_pass
    int old_pass_wrong -> old_pass_wrong
    int parent_password -> parent_password
    int parent_password_ok -> parent_password_ok
    int parent_settings -> parent_settings
    int parental_control -> parental_control
    int password_not_confirm -> password_not_confirm
    int password_protection -> password_protection
    int password_required -> password_required
    int pick_wallpaper -> pick_wallpaper
    int play_limit -> play_limit
    int play_peroid_limit -> play_peroid_limit
    int play_time_disabled -> play_time_disabled
    int play_time_limit -> play_time_limit
    int previous_page -> previous_page
    int protection_switch -> protection_switch
    int reenter_pass -> reenter_pass
    int remove -> remove
    int remove_ok -> remove_ok
    int rest_time -> rest_time
    int security_exception -> security_exception
    int security_level -> security_level
    int select_source -> select_source
    int select_target -> select_target
    int service_name -> service_name
    int service_text -> service_text
    int set_avatar -> set_avatar
    int set_pass -> set_pass
    int show_wifi_password -> show_wifi_password
    int signal_strength -> signal_strength
    int stat_permission -> stat_permission
    int style_kids -> style_kids
    int support -> support
    int switch_owner -> switch_owner
    int to -> to
    int ui_style -> ui_style
    int unknown_error -> unknown_error
    int usage_report -> usage_report
    int version_name -> version_name
    int wallpaper_instructions -> wallpaper_instructions
    int web_access -> web_access
    int web_access_limit -> web_access_limit
    int web_id -> web_id
    int web_pass -> web_pass
    int white_list -> white_list
    int wifi_app_name -> wifi_app_name
    int wifi_password -> wifi_password
    int wrong_password -> wrong_password
cn.netin.launcher.R$styleable -> cn.netin.launcher.aa:
    int[] ButtonGroupLayout -> ButtonGroupLayout
    int ButtonGroupLayout_buttonCount -> ButtonGroupLayout_buttonCount
    int ButtonGroupLayout_endAngel -> ButtonGroupLayout_endAngel
    int ButtonGroupLayout_isNeedFocus -> ButtonGroupLayout_isNeedFocus
    int ButtonGroupLayout_itemRadio -> ButtonGroupLayout_itemRadio
    int ButtonGroupLayout_layoutRadio -> ButtonGroupLayout_layoutRadio
    int ButtonGroupLayout_startAngel -> ButtonGroupLayout_startAngel
    int[] CellLayout -> CellLayout
    int CellLayout_cellHeight -> CellLayout_cellHeight
    int CellLayout_cellWidth -> CellLayout_cellWidth
    int CellLayout_isPort -> CellLayout_isPort
    int CellLayout_longAxisCells -> CellLayout_longAxisCells
    int CellLayout_longAxisEndPadding -> CellLayout_longAxisEndPadding
    int CellLayout_longAxisStartPadding -> CellLayout_longAxisStartPadding
    int CellLayout_shortAxisCells -> CellLayout_shortAxisCells
    int CellLayout_shortAxisEndPadding -> CellLayout_shortAxisEndPadding
    int CellLayout_shortAxisStartPadding -> CellLayout_shortAxisStartPadding
    int[] Workspace -> Workspace
    int Workspace_defaultScreen -> Workspace_defaultScreen
    int[] WorkspaceIndicator -> WorkspaceIndicator
    int WorkspaceIndicator_workspaceCount -> WorkspaceIndicator_workspaceCount
    void <clinit>() -> <clinit>
cn.netin.launcher.RestActivity -> cn.netin.launcher.RestActivity:
    android.view.ViewGroup mPasswordLayout -> a
    cn.netin.launcher.data.ProtectionData mProtectionData -> b
    cn.netin.launcher.data.Protection mProtection -> c
    android.widget.EditText mPasswordEdit -> d
    void <init>() -> <init>
    void setFullScreen() -> b
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onCreate(android.os.Bundle) -> onCreate
    void handleClick(android.view.View) -> handleClick
    void handleSubmit() -> c
    void disableRestTime() -> a
    void onDestroy() -> onDestroy
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
cn.netin.launcher.SettingActivity -> cn.netin.launcher.SettingActivity:
    android.widget.EditText mIdEdit -> a
    android.widget.EditText mPassEdit -> b
    com.hanceedu.common.HanceApplication mApp -> c
    android.widget.ToggleButton mStyleSwitch -> d
    android.widget.ToggleButton mFlatSwitch -> e
    java.lang.String mWebId -> f
    java.lang.String mWebPass -> g
    void <init>() -> <init>
    void setFullScreen() -> a
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void saveAccount() -> b
    void handleClick(android.view.View) -> handleClick
cn.netin.launcher.SettingActivity$1 -> cn.netin.launcher.ab:
    cn.netin.launcher.SettingActivity this$0 -> a
    android.content.SharedPreferences$Editor val$sfEditor -> b
    void <init>(cn.netin.launcher.SettingActivity,android.content.SharedPreferences$Editor) -> <init>
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
cn.netin.launcher.SettingActivity$2 -> cn.netin.launcher.ac:
    cn.netin.launcher.SettingActivity this$0 -> a
    android.content.SharedPreferences$Editor val$sfEditor -> b
    void <init>(cn.netin.launcher.SettingActivity,android.content.SharedPreferences$Editor) -> <init>
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
cn.netin.launcher.StatusBarPull -> cn.netin.launcher.ad:
    android.app.Activity mContext -> a
    cn.netin.launcher.StatusBarPull sInstance -> b
    void <clinit>() -> <clinit>
    cn.netin.launcher.StatusBarPull getInstance(android.app.Activity) -> a
    void <init>(android.app.Activity) -> <init>
    void disable() -> a
    void hideBottomUIMenu() -> b
cn.netin.launcher.TimeHandler -> cn.netin.launcher.ae:
    java.lang.Thread mTimeThread -> a
    android.widget.TextView mTextView -> b
    java.lang.String mTimeStr -> c
    android.os.Handler mHandler -> d
    void <init>() -> <init>
    void setView(android.widget.TextView) -> a
    java.lang.String getCurrentTime() -> c
    void release() -> a
    java.lang.String access$0() -> b
    java.lang.String access$1(cn.netin.launcher.TimeHandler) -> a
    android.widget.TextView access$2(cn.netin.launcher.TimeHandler) -> b
    void access$3(cn.netin.launcher.TimeHandler,java.lang.String) -> a
    android.os.Handler access$4(cn.netin.launcher.TimeHandler) -> c
cn.netin.launcher.TimeHandler$1 -> cn.netin.launcher.af:
    cn.netin.launcher.TimeHandler this$0 -> a
    void <init>(cn.netin.launcher.TimeHandler) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
cn.netin.launcher.TimeHandler$TimeThread -> cn.netin.launcher.ag:
    cn.netin.launcher.TimeHandler this$0 -> a
    void <init>(cn.netin.launcher.TimeHandler) -> <init>
    void run() -> run
cn.netin.launcher.WallpaperChooser -> cn.netin.launcher.WallpaperChooser:
    java.lang.String TAG -> a
    android.widget.Gallery mGallery -> b
    android.widget.ImageView mImageView -> c
    boolean mIsWallpaperSet -> d
    android.graphics.Bitmap mBitmap -> e
    java.util.ArrayList mThumbs -> f
    java.util.ArrayList mImages -> g
    cn.netin.launcher.WallpaperChooser$WallpaperLoader mLoader -> h
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onCreate(android.os.Bundle) -> onCreate
    void findWallpapers() -> b
    void addWallpapers(android.content.res.Resources,java.lang.String,int) -> a
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void selectWallpaper(int) -> a
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    void onClick(android.view.View) -> onClick
    java.util.ArrayList access$0(cn.netin.launcher.WallpaperChooser) -> a
    java.lang.String access$1() -> a
    java.util.ArrayList access$2(cn.netin.launcher.WallpaperChooser) -> b
    android.graphics.Bitmap access$3(cn.netin.launcher.WallpaperChooser) -> c
    android.widget.ImageView access$4(cn.netin.launcher.WallpaperChooser) -> d
    void access$5(cn.netin.launcher.WallpaperChooser,android.graphics.Bitmap) -> a
    void access$6(cn.netin.launcher.WallpaperChooser,cn.netin.launcher.WallpaperChooser$WallpaperLoader) -> a
cn.netin.launcher.WallpaperChooser$ImageAdapter -> cn.netin.launcher.ah:
    android.view.LayoutInflater mLayoutInflater -> b
    cn.netin.launcher.WallpaperChooser this$0 -> a
    void <init>(cn.netin.launcher.WallpaperChooser,cn.netin.launcher.WallpaperChooser) -> <init>
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
cn.netin.launcher.WallpaperChooser$WallpaperLoader -> cn.netin.launcher.ai:
    android.graphics.BitmapFactory$Options mOptions -> a
    cn.netin.launcher.WallpaperChooser this$0 -> b
    void <init>(cn.netin.launcher.WallpaperChooser) -> <init>
    android.graphics.Bitmap doInBackground(java.lang.Integer[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void cancel() -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onPostExecute(java.lang.Object) -> onPostExecute
cn.netin.launcher.Workspace -> cn.netin.launcher.Workspace:
    android.widget.Scroller mScroller -> a
    android.graphics.Paint mPaint -> b
    android.graphics.Bitmap mWallpaperBitmap -> c
    cn.netin.launcher.WorkspaceIndicator mIndicator -> d
    android.view.LayoutInflater mInflater -> e
    android.app.WallpaperManager mWallpaperManager -> f
    int mScrollerX -> g
    int mCurrentScreen -> h
    int mNextScreen -> i
    int mCurrentDuration -> j
    float mDownX -> k
    float mLastX -> l
    float mMoveDistance -> m
    long mLastTime -> n
    int mSpeed -> o
    int mTouchState -> p
    int mScreenCount -> q
    int mCapacityPerScreen -> r
    int mItemTotal -> s
    boolean mScrollLeft -> t
    boolean mWallpaperLoaded -> u
    boolean childrenCacheEnabled -> v
    boolean mIsScrolling -> w
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void handleActionDown(float) -> a
    void handleMove(float) -> b
    void snapToScreen() -> e
    void snapToScreen(int) -> a
    void setToScreen(int) -> setToScreen
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    void computeScroll() -> computeScroll
    void addInScreen(android.view.View) -> a
    void addInScreen(android.view.View,int,int,int,int,int,boolean) -> a
    void setIndicator(cn.netin.launcher.WorkspaceIndicator) -> setIndicator
    int getCurrentScreen() -> getCurrentScreen
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void enableChildrenCache() -> a
    void clearChildrenCache() -> b
    void updateWallpaperOffset() -> f
    void clearWorksapce() -> c
    void release() -> d
cn.netin.launcher.WorkspaceHandler -> cn.netin.launcher.aj:
    int[] bgs -> b
    android.content.Context mContext -> c
    int mTopWorkspaceScreen -> d
    int mGroupId -> e
    boolean mKidsStyle -> f
    java.lang.String mTitle -> g
    java.util.List mAppViewList -> h
    java.util.List mAppList -> a
    com.hanceedu.common.util.AppUtil mAppUtil -> i
    cn.netin.launcher.Workspace mWorkspace -> j
    cn.netin.launcher.WorkspaceIndicator mIndicator -> k
    android.widget.TextView mCategoryView -> l
    android.view.LayoutInflater mInflater -> m
    cn.netin.launcher.WorkspaceHandler$OnClickListener mOnClickListener -> n
    cn.netin.launcher.WorkspaceHandler$WorkspaceListener mListener -> o
    android.content.BroadcastReceiver mReceiver -> p
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    void setLisener(cn.netin.launcher.WorkspaceHandler$WorkspaceListener) -> a
    void setAppList(java.util.List) -> a
    void setView(cn.netin.launcher.Workspace,cn.netin.launcher.WorkspaceIndicator,android.widget.TextView) -> a
    void clear() -> a
    void reload() -> b
    void show(int) -> a
    void showTopScreen() -> c
    void hide() -> d
    boolean isInSubscreen() -> e
    void registerReceiver() -> g
    void showAppList(int) -> b
    void addViewListToWorkspace(java.util.List) -> b
    android.view.View createItemView(com.hanceedu.common.App,int) -> a
    void release() -> f
    void access$0(cn.netin.launcher.WorkspaceHandler,boolean) -> a
    void access$1(cn.netin.launcher.WorkspaceHandler,int) -> a
    cn.netin.launcher.WorkspaceIndicator access$2(cn.netin.launcher.WorkspaceHandler) -> a
    void access$3(cn.netin.launcher.WorkspaceHandler,int) -> b
    void access$4(cn.netin.launcher.WorkspaceHandler,java.lang.String) -> a
    cn.netin.launcher.WorkspaceHandler$WorkspaceListener access$5(cn.netin.launcher.WorkspaceHandler) -> b
    cn.netin.launcher.Workspace access$6(cn.netin.launcher.WorkspaceHandler) -> c
cn.netin.launcher.WorkspaceHandler$1 -> cn.netin.launcher.ak:
    cn.netin.launcher.WorkspaceHandler this$0 -> a
    void <init>(cn.netin.launcher.WorkspaceHandler) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
cn.netin.launcher.WorkspaceHandler$2 -> cn.netin.launcher.al:
    cn.netin.launcher.WorkspaceHandler this$0 -> a
    void <init>(cn.netin.launcher.WorkspaceHandler) -> <init>
    void gotoScreen(int) -> a
cn.netin.launcher.WorkspaceHandler$OnClickListener -> cn.netin.launcher.am:
    cn.netin.launcher.WorkspaceHandler this$0 -> a
    void <init>(cn.netin.launcher.WorkspaceHandler) -> <init>
    void onClick(android.view.View) -> onClick
cn.netin.launcher.WorkspaceHandler$WorkspaceListener -> cn.netin.launcher.an:
    void onItemClicked(int) -> a
cn.netin.launcher.WorkspaceIndicator -> cn.netin.launcher.WorkspaceIndicator:
    float textSize -> a
    float mLabelTextSize -> b
    int mMoreWidth -> c
    int mCount -> d
    int mShowCount -> e
    int mCurrentScreen -> f
    android.graphics.Paint mPaint -> g
    android.view.animation.AlphaAnimation mAnimation -> h
    android.graphics.Paint mTextPaint -> i
    android.graphics.Paint mLabelPaint -> j
    cn.netin.launcher.WorkspaceIndicator$GotoScreenListener mGotoScreenListener -> k
    java.lang.String[] mLabels -> l
    boolean mShowLabels -> m
    void <clinit>() -> <clinit>
    void setShowLabels(boolean) -> setShowLabels
    int getCurrentScreen() -> getCurrentScreen
    void <init>(android.content.Context,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void init() -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
    void show(int) -> a
    void setScreenCount(int) -> setScreenCount
    void setMeasuredDimension() -> b
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean isLastSection() -> c
    void setGotoScreenListener(cn.netin.launcher.WorkspaceIndicator$GotoScreenListener) -> setGotoScreenListener
cn.netin.launcher.WorkspaceIndicator$1 -> cn.netin.launcher.ao:
    cn.netin.launcher.WorkspaceIndicator this$0 -> a
    void <init>(cn.netin.launcher.WorkspaceIndicator) -> <init>
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
cn.netin.launcher.WorkspaceIndicator$GotoScreenListener -> cn.netin.launcher.ap:
    void gotoScreen(int) -> a
cn.netin.launcher.data.Constants -> cn.netin.launcher.data.a:
    boolean BAN_INSTALLER -> a
    boolean WALLPAPER_LIMITED -> b
    boolean HIDE_ELS -> c
    boolean FLAT_STYLE -> d
    boolean HAS_PORTAL -> e
    byte[] PASS -> f
    byte[] SUPER -> g
    boolean AVATAR_ALLOWED -> h
    boolean IS_BOX -> i
    int ICON_SIZE -> j
    int ICON_SIZE_SMALL -> k
    void <clinit>() -> <clinit>
cn.netin.launcher.data.DatabaseHelper -> cn.netin.launcher.data.b:
    void <init>(android.content.Context) -> <init>
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
cn.netin.launcher.data.LauncherData -> cn.netin.launcher.data.LauncherData:
    android.content.Context mContext -> a
    android.content.pm.PackageManager mPackageManager -> b
    com.hanceedu.common.HanceApplication sApp -> c
    com.hanceedu.common.data.DataInterface$DataListener sListener -> d
    int sIconSize -> e
    boolean sValid -> f
    java.util.List sAppList -> g
    java.util.List sVerifiedList -> h
    cn.netin.launcher.data.LauncherData sInstance -> i
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    cn.netin.launcher.data.LauncherData getInstance(android.content.Context) -> getInstance
    boolean isValid() -> isValid
    void clearAll() -> f
    java.util.List getLauncherAppList() -> getLauncherAppList
    void verifyList() -> a
    boolean prepare(com.hanceedu.common.data.DataInterface$Param) -> a
    boolean isPkgInList(com.hanceedu.common.App,java.util.List) -> a
    void setListener(com.hanceedu.common.data.DataInterface$DataListener) -> a
    void setApp(int,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> setApp
    int insertApp(com.hanceedu.common.App) -> a
    void removeApp(int) -> a
    void notifyChange() -> g
    int initData() -> initData
    int addItem(java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String) -> addItem
    void removeItem(int) -> removeItem
    int activate(java.lang.String) -> activate
    void access$0() -> b
    int access$1() -> c
    void access$2(boolean) -> a
    java.util.List access$3() -> d
    com.hanceedu.common.data.DataInterface$DataListener access$4() -> e
    void access$5(cn.netin.launcher.data.LauncherData) -> a
cn.netin.launcher.data.LauncherData$DataTask -> cn.netin.launcher.data.c:
    cn.netin.launcher.data.LauncherData this$0 -> a
    void <init>(cn.netin.launcher.data.LauncherData) -> <init>
    com.hanceedu.common.data.DataInterface$Param doInBackground(com.hanceedu.common.data.DataInterface$Param[]) -> a
    void onPostExecute(com.hanceedu.common.data.DataInterface$Param) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onPostExecute(java.lang.Object) -> onPostExecute
    void <init>(cn.netin.launcher.data.LauncherData,cn.netin.launcher.data.LauncherData$DataTask) -> <init>
cn.netin.launcher.data.LauncherState -> cn.netin.launcher.data.d:
    boolean sIsOwner -> a
    boolean sIsAlive -> b
    boolean sIsBlocking -> c
    boolean sInstallerChecked -> d
    void <clinit>() -> <clinit>
    boolean isBlocking() -> a
    void setBlocking(boolean) -> a
    boolean isAlive() -> b
    void setAlive(boolean) -> b
    boolean isCurrentUserOwner(android.content.Context) -> a
    void checkOwner(android.content.Context) -> b
    android.content.Intent getInstallerIntent(android.content.Context) -> d
    boolean checkInstaller(android.content.Context) -> c
cn.netin.launcher.data.Protection -> cn.netin.launcher.data.e:
    boolean enable -> a
    java.lang.String password -> b
    java.lang.String conformPassword -> c
    java.lang.String question -> d
    java.lang.String answer -> e
    void <init>() -> <init>
cn.netin.launcher.data.ProtectionData -> cn.netin.launcher.data.f:
    android.content.Context mContext -> a
    void <init>(android.content.Context) -> <init>
    cn.netin.launcher.data.Protection getProtection() -> a
    int insertOrUpdateProtection(cn.netin.launcher.data.Protection) -> a
cn.netin.launcher.data.StatPermissionData -> cn.netin.launcher.data.g:
    boolean isGranted(android.content.Context) -> a
cn.netin.launcher.installer.InstallActivity -> cn.netin.launcher.installer.InstallActivity:
    java.io.File mContentUriApkStagingFile -> a
    android.os.AsyncTask mStagingAsynTask -> b
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onDestroy() -> onDestroy
    void handelIntent(android.content.Intent) -> a
    boolean processPackageUri(android.net.Uri) -> a
    void setPermission(java.lang.String) -> a
    void checkIfAllowedAndInitiateInstall(android.net.Uri) -> b
    void startSystemInstaller(android.net.Uri) -> c
    void startOtherInstaller(android.net.Uri) -> d
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void clearCachedApkIfNeededAndFinish() -> a
    void access$0(cn.netin.launcher.installer.InstallActivity,java.io.File) -> a
    boolean access$1(cn.netin.launcher.installer.InstallActivity,android.net.Uri) -> a
cn.netin.launcher.installer.InstallActivity$StagingAsyncTask -> cn.netin.launcher.installer.a:
    cn.netin.launcher.installer.InstallActivity this$0 -> a
    void <init>(cn.netin.launcher.installer.InstallActivity) -> <init>
    void onPreExecute() -> onPreExecute
    java.io.File doInBackground(android.net.Uri[]) -> a
    void onPostExecute(java.io.File) -> a
    void onCancelled(java.io.File) -> b
    void onCancelled(java.lang.Object) -> onCancelled
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onPostExecute(java.lang.Object) -> onPostExecute
    void <init>(cn.netin.launcher.installer.InstallActivity,cn.netin.launcher.installer.InstallActivity$StagingAsyncTask) -> <init>
cn.netin.launcher.installer.PackageParser -> cn.netin.launcher.installer.b:
    java.lang.String getPackageName(java.io.File,java.lang.String) -> a
    java.lang.Object getPackage(java.io.File,java.lang.String) -> b
cn.netin.launcher.provider.AppProvider -> cn.netin.launcher.provider.AppProvider:
    cn.netin.launcher.data.DatabaseHelper mDbHelper -> a
    android.content.UriMatcher mMatcher -> b
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean onCreate() -> onCreate
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    java.lang.String getType(android.net.Uri) -> getType
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
cn.netin.launcher.provider.ParentalProvider -> cn.netin.launcher.provider.ParentalProvider:
    cn.netin.launcher.service.DatabaseHelper mDbHelper -> a
    android.content.UriMatcher mMatcher -> b
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean onCreate() -> onCreate
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    android.database.Cursor queryProtection() -> a
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    java.lang.String getType(android.net.Uri) -> getType
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
cn.netin.launcher.receiver.BatteryStatusReceiver -> cn.netin.launcher.receiver.a:
    android.app.Application mApplication -> b
    cn.netin.launcher.receiver.BatteryStatusReceiver$BatteryStatusListener mListener -> a
    void <init>(android.app.Application,cn.netin.launcher.receiver.BatteryStatusReceiver$BatteryStatusListener) -> <init>
    int[] getBatteryStatus() -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void release() -> b
cn.netin.launcher.receiver.BatteryStatusReceiver$BatteryStatusListener -> cn.netin.launcher.receiver.b:
    void onChange(int,int,boolean) -> a
cn.netin.launcher.receiver.ConnectivityReceiver -> cn.netin.launcher.receiver.c:
    android.app.Application mApplication -> b
    cn.netin.launcher.receiver.ConnectivityReceiver$ConnectivityListener mListener -> a
    void <init>(android.app.Application,cn.netin.launcher.receiver.ConnectivityReceiver$ConnectivityListener) -> <init>
    boolean isConnected(int) -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void release() -> a
cn.netin.launcher.receiver.ConnectivityReceiver$ConnectivityListener -> cn.netin.launcher.receiver.d:
    void onChange(int,boolean) -> a
cn.netin.launcher.receiver.LauncherStateReceiver -> cn.netin.launcher.receiver.LauncherStateReceiver:
    void <init>() -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
cn.netin.launcher.service.AIService -> cn.netin.launcher.service.AIService:
    cn.netin.launcher.service.aispeech.AIScorer mScorer -> b
    cn.netin.launcher.service.MediaHelper mMediaHelper -> c
    android.os.Messenger mClientMessenger -> d
    cn.netin.launcher.service.aispeech.AIScorer$AIScorerListener mAIScorerListener -> e
    android.os.Messenger mMessenger -> a
    void <init>() -> <init>
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void notifyError(int) -> a
    void onCreate() -> onCreate
    boolean onUnbind(android.content.Intent) -> onUnbind
    void onRebind(android.content.Intent) -> onRebind
    void onDestroy() -> onDestroy
    void score(java.lang.String) -> a
    void notifyResult(int,java.lang.String) -> a
    void stop() -> a
    void access$0(cn.netin.launcher.service.AIService,int) -> a
    void access$1(cn.netin.launcher.service.AIService,int,java.lang.String) -> a
    void access$2(cn.netin.launcher.service.AIService,android.os.Messenger) -> a
    void access$3(cn.netin.launcher.service.AIService,java.lang.String) -> a
    void access$4(cn.netin.launcher.service.AIService) -> a
cn.netin.launcher.service.AIService$1 -> cn.netin.launcher.service.a:
    cn.netin.launcher.service.AIService this$0 -> a
    void <init>(cn.netin.launcher.service.AIService) -> <init>
    void onCompletion(int,java.lang.String) -> a
cn.netin.launcher.service.AIService$IncomingHandler -> cn.netin.launcher.service.b:
    cn.netin.launcher.service.AIService this$0 -> a
    void <init>(cn.netin.launcher.service.AIService) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
cn.netin.launcher.service.AppStat -> cn.netin.launcher.service.AppStat:
    android.content.pm.PackageManager mPackageManager -> a
    android.app.ActivityManager mActivityManager -> b
    android.content.Context mContext -> c
    cn.netin.launcher.service.DatabaseHelper mDatabaseHelper -> d
    android.os.PowerManager mPowerManager -> e
    android.app.KeyguardManager mKeyguardManager -> f
    cn.netin.launcher.data.ProtectionData mProtectionData -> g
    int mRestSeconds -> h
    int mPlaySeconds -> i
    boolean mIsLocked -> j
    boolean mProtectionEnabled -> k
    android.database.ContentObserver mLauncherDataObserver -> l
    android.database.ContentObserver mProtectionObserver -> m
    void <clinit>() -> <clinit>
    void setProtection(boolean) -> a
    void setInstallerAllowed(boolean) -> b
    void <init>(android.content.Context) -> <init>
    boolean isScreenOff() -> f
    boolean isScreenLocked() -> g
    void handleRest() -> h
    void handlePlay() -> i
    void resetRestTime() -> j
    void resetPlayTime() -> k
    boolean isRestEnough() -> a
    boolean isPlayEnough() -> b
    boolean isInPlayPeriod() -> c
    void updateRunningTasks(int) -> a
    void run() -> run
    void release() -> l
    void unlockScreen() -> d
    void lockScreen() -> e
    boolean isAllowed(java.lang.String,java.lang.String) -> a
    void block(java.lang.String) -> a
    void nativeSetInstallerAllowed(boolean) -> nativeSetInstallerAllowed
    boolean nativeIsAllowed(java.lang.String,java.lang.String,boolean) -> nativeIsAllowed
    cn.netin.launcher.data.ProtectionData access$0(cn.netin.launcher.service.AppStat) -> a
    void access$1(boolean) -> c
cn.netin.launcher.service.AppStat$1 -> cn.netin.launcher.service.c:
    cn.netin.launcher.service.AppStat this$0 -> a
    void <init>(cn.netin.launcher.service.AppStat,android.os.Handler) -> <init>
    void onChange(boolean) -> onChange
cn.netin.launcher.service.AppStat$2 -> cn.netin.launcher.service.d:
    cn.netin.launcher.service.AppStat this$0 -> a
    void <init>(cn.netin.launcher.service.AppStat,android.os.Handler) -> <init>
    void onChange(boolean) -> onChange
cn.netin.launcher.service.AppStatService -> cn.netin.launcher.service.AppStatService:
    cn.netin.launcher.service.AppStat mAppStat -> a
    android.content.BroadcastReceiver mReceiver -> b
    void <init>() -> <init>
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void registerReceiver() -> a
cn.netin.launcher.service.AppStatService$1 -> cn.netin.launcher.service.e:
    cn.netin.launcher.service.AppStatService this$0 -> a
    void <init>(cn.netin.launcher.service.AppStatService) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
cn.netin.launcher.service.DatabaseHelper -> cn.netin.launcher.service.f:
    void <init>(android.content.Context) -> <init>
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void insertDefaults(android.database.sqlite.SQLiteDatabase) -> a
    void enableProtection() -> a
    void release() -> b
    long getStatId(java.lang.String,int) -> a
    void insertOrUpdateStat(java.lang.String,int,int) -> a
    void insertStat(java.lang.String,int,int) -> b
    void updateStat(long,int) -> a
    android.database.Cursor queryStat(int,java.lang.String,java.lang.String) -> a
    boolean hasRestTimeRecord() -> c
    long insertOrUpdateRestTime(android.content.ContentValues) -> a
    long insertRestTime(android.content.ContentValues) -> e
    int updateRestTime(android.content.ContentValues) -> f
    android.database.Cursor queryRestTime() -> d
    cn.netin.launcher.service.RestTime getRestTime() -> e
    android.database.Cursor queryWebAccessEnable() -> f
    boolean hasWebAccessEnableRecord() -> g
    long insertOrUpdateWebAccessEnable(android.content.ContentValues) -> b
    long insertWebAccessEnable(android.content.ContentValues) -> g
    int updateWebAccessEnable(android.content.ContentValues) -> h
    long insertUrl(android.content.ContentValues) -> c
    int deleteUrl(java.lang.String,java.lang.String[]) -> a
    android.database.Cursor queryUrl() -> h
    boolean hasProtectionRecord() -> i
    long insertOrUpdateProtection(android.content.ContentValues) -> d
    long insertProtection(android.content.ContentValues) -> i
    int updateProtection(android.content.ContentValues) -> j
    android.database.Cursor queryProtection() -> j
cn.netin.launcher.service.DownloadService -> cn.netin.launcher.service.DownloadService:
    android.app.DownloadManager mDownloadManager -> a
    cn.netin.launcher.service.DownloadService$DownloadCompleteReceiver mReceiver -> b
    java.util.List mDownloadList -> c
    void <init>() -> <init>
    void onCreate() -> onCreate
    boolean isInList(java.lang.String) -> a
    void removeFromList(long) -> a
    cn.netin.launcher.service.DownloadService$Download getDownload(long) -> b
    void startDownload(java.lang.String,int) -> a
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
    boolean isNetworkAvailable() -> a
    android.app.DownloadManager access$0(cn.netin.launcher.service.DownloadService) -> a
    cn.netin.launcher.service.DownloadService$Download access$1(cn.netin.launcher.service.DownloadService,long) -> a
    void access$2(cn.netin.launcher.service.DownloadService,long) -> b
cn.netin.launcher.service.DownloadService$Download -> cn.netin.launcher.service.g:
    long id -> a
    java.lang.String url -> b
    int action -> c
    cn.netin.launcher.service.DownloadService this$0 -> d
    void <init>(cn.netin.launcher.service.DownloadService,long,java.lang.String,int) -> <init>
cn.netin.launcher.service.DownloadService$DownloadCompleteReceiver -> cn.netin.launcher.service.h:
    cn.netin.launcher.service.DownloadService this$0 -> a
    void <init>(cn.netin.launcher.service.DownloadService) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
cn.netin.launcher.service.MediaHelper -> cn.netin.launcher.service.i:
    android.media.MediaPlayer mMediaPlayer -> a
    android.media.MediaRecorder mMediaRecorder -> b
    android.media.AudioRecord mAudioRecord -> c
    android.media.AudioTrack mAudioTrack -> d
    android.content.Context mContext -> e
    cn.netin.launcher.service.MediaHelper$MediaHelperListener mListener -> f
    boolean mMediaRecorder_recording -> g
    boolean mAudioRecord_recording -> h
    boolean mAudioTrack_playing -> i
    java.io.File mPcmFile -> j
    int mAudioSource -> k
    int mAudioFrequence -> l
    int mAudioInChannel -> m
    int mAudioOutChannel -> n
    int mAudioEncoding -> o
    cn.netin.launcher.service.MediaHelper$AudioRecordThread mAudioRecordThread -> p
    cn.netin.launcher.service.MediaHelper$AudioTrackThread mAudioTrackThread -> q
    int mBufferSize -> r
    java.util.Timer mTimer -> s
    java.util.TimerTask mTask -> t
    android.media.MediaPlayer$OnCompletionListener mOnCompletionListener -> u
    void setListener(cn.netin.launcher.service.MediaHelper$MediaHelperListener) -> a
    void <init>(android.content.Context) -> <init>
    void notifyCompletion() -> e
    void play(java.lang.String) -> a
    void playMedia(java.lang.String) -> b
    void playPcm(java.lang.String) -> c
    void record(java.lang.String,int) -> a
    void recordMedia(java.lang.String,int) -> b
    void recordPcm(java.lang.String,int) -> c
    void resetTimer() -> f
    void schedule(int) -> a
    void stop() -> a
    void wait_a_moment() -> g
    void release() -> b
    boolean isAudioRecordRecording() -> h
    boolean isAudioTrackPlaying() -> i
    void access$0(cn.netin.launcher.service.MediaHelper) -> a
    java.io.File access$1(cn.netin.launcher.service.MediaHelper) -> b
    int access$2(cn.netin.launcher.service.MediaHelper) -> c
    android.media.AudioRecord access$3() -> c
    void access$4(boolean) -> a
    boolean access$5(cn.netin.launcher.service.MediaHelper) -> d
    android.media.AudioTrack access$6() -> d
    void access$7(boolean) -> b
    boolean access$8(cn.netin.launcher.service.MediaHelper) -> e
cn.netin.launcher.service.MediaHelper$1 -> cn.netin.launcher.service.j:
    cn.netin.launcher.service.MediaHelper this$0 -> a
    void <init>(cn.netin.launcher.service.MediaHelper) -> <init>
    void onCompletion(android.media.MediaPlayer) -> onCompletion
cn.netin.launcher.service.MediaHelper$2 -> cn.netin.launcher.service.k:
    cn.netin.launcher.service.MediaHelper this$0 -> a
    void <init>(cn.netin.launcher.service.MediaHelper) -> <init>
    void run() -> run
cn.netin.launcher.service.MediaHelper$AudioRecordThread -> cn.netin.launcher.service.l:
    cn.netin.launcher.service.MediaHelper this$0 -> a
    void <init>(cn.netin.launcher.service.MediaHelper) -> <init>
    void run() -> run
    void waveScalse(short[],int) -> a
    void <init>(cn.netin.launcher.service.MediaHelper,cn.netin.launcher.service.MediaHelper$AudioRecordThread) -> <init>
cn.netin.launcher.service.MediaHelper$AudioTrackThread -> cn.netin.launcher.service.m:
    cn.netin.launcher.service.MediaHelper this$0 -> a
    void <init>(cn.netin.launcher.service.MediaHelper) -> <init>
    void run() -> run
    void <init>(cn.netin.launcher.service.MediaHelper,cn.netin.launcher.service.MediaHelper$AudioTrackThread) -> <init>
cn.netin.launcher.service.MediaHelper$MediaHelperListener -> cn.netin.launcher.service.n:
    void onCompletion() -> a
cn.netin.launcher.service.MediaService -> cn.netin.launcher.service.MediaService:
    cn.netin.launcher.service.MediaHelper mMediaHelper -> b
    android.os.Messenger mClientMessenger -> c
    cn.netin.launcher.service.MediaHelper$MediaHelperListener mMediaHelperListener -> d
    android.os.Messenger mMessenger -> a
    void <init>() -> <init>
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void notifyStop() -> b
    void onCreate() -> onCreate
    boolean onUnbind(android.content.Intent) -> onUnbind
    void onRebind(android.content.Intent) -> onRebind
    void onDestroy() -> onDestroy
    void play(java.lang.String) -> a
    void record(java.lang.String,int) -> a
    void stop() -> a
    void access$0(cn.netin.launcher.service.MediaService) -> a
    void access$1(cn.netin.launcher.service.MediaService,android.os.Messenger) -> a
cn.netin.launcher.service.MediaService$1 -> cn.netin.launcher.service.o:
    cn.netin.launcher.service.MediaService this$0 -> a
    void <init>(cn.netin.launcher.service.MediaService) -> <init>
    void onCompletion() -> a
cn.netin.launcher.service.MediaService$IncomingHandler -> cn.netin.launcher.service.p:
    cn.netin.launcher.service.MediaService this$0 -> a
    void <init>(cn.netin.launcher.service.MediaService) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
cn.netin.launcher.service.RemoteService -> cn.netin.launcher.service.RemoteService:
    cn.netin.launcher.service.SocketServer mServer -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    android.os.IBinder onBind(android.content.Intent) -> onBind
cn.netin.launcher.service.RestTime -> cn.netin.launcher.service.q:
    boolean enableRest -> a
    int play -> b
    int rest -> c
    boolean enablePeriod -> d
    int startTime -> e
    int endTime -> f
    void <init>() -> <init>
cn.netin.launcher.service.SocketServer -> cn.netin.launcher.service.r:
    java.net.ServerSocket serverSocket -> a
    java.util.concurrent.ExecutorService pool -> b
    android.content.Context mContext -> c
    void <init>(android.content.Context,int,int) -> <init>
    void run() -> run
    void close() -> a
    void shutdownAndAwaitTermination(java.util.concurrent.ExecutorService) -> a
    void broadcast(byte) -> a
    void access$0(cn.netin.launcher.service.SocketServer,byte) -> a
cn.netin.launcher.service.SocketServer$Handler -> cn.netin.launcher.service.s:
    java.net.Socket socket -> b
    cn.netin.launcher.service.SocketServer this$0 -> a
    void <init>(cn.netin.launcher.service.SocketServer,java.net.Socket) -> <init>
    void run() -> run
cn.netin.launcher.service.TopActivityUtils -> cn.netin.launcher.service.t:
    boolean DEBUG -> a
    java.lang.String TAG -> b
    java.lang.String sLastTopApp -> c
    void <clinit>() -> <clinit>
    android.content.ComponentName getTopActivity(android.content.Context,android.app.ActivityManager) -> a
    java.lang.String getActivityByPackageName(android.content.Context,java.lang.String) -> a
    boolean isStatAccessPermissionSet(android.content.Context) -> a
    java.lang.String getTopPackageOnAndroidLPlus(android.content.Context) -> c
    java.lang.String getTopPackageByRunningAppProcesses(android.content.Context) -> d
    java.util.List getUsageStatsList(android.content.Context) -> e
    java.lang.String getTopPackageByUsageStats(android.content.Context) -> b
    java.lang.Object invokeMethod(java.lang.String,java.lang.String,java.lang.Object) -> a
cn.netin.launcher.service.TopActivityUtils$1 -> cn.netin.launcher.service.u:
    java.lang.reflect.Method val$med -> a
    void <init>(java.lang.reflect.Method) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
cn.netin.launcher.service.WtsService -> cn.netin.launcher.service.WtsService:
    android.media.MediaPlayer mMediaPlayer -> b
    android.os.Messenger mClientMessenger -> c
    java.lang.String mPath -> d
    java.lang.String mDataPath -> e
    boolean mReady -> f
    android.os.Messenger mMessenger -> g
    android.media.MediaPlayer$OnCompletionListener mOnCompletionListener -> a
    void <init>() -> <init>
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void notifyStop() -> b
    void check(java.lang.String) -> b
    void onCreate() -> onCreate
    java.lang.String findDataPath() -> c
    boolean loadLibrary() -> d
    boolean initVoice() -> e
    boolean onUnbind(android.content.Intent) -> onUnbind
    void onRebind(android.content.Intent) -> onRebind
    void onDestroy() -> onDestroy
    void stop() -> a
    void play(java.lang.String) -> a
    boolean init(java.lang.String) -> init
    boolean voice(java.lang.String,java.lang.String) -> voice
    void access$0(cn.netin.launcher.service.WtsService) -> a
    void access$1(cn.netin.launcher.service.WtsService,android.os.Messenger) -> a
    void access$2(cn.netin.launcher.service.WtsService,java.lang.String) -> a
cn.netin.launcher.service.WtsService$1 -> cn.netin.launcher.service.v:
    cn.netin.launcher.service.WtsService this$0 -> a
    void <init>(cn.netin.launcher.service.WtsService) -> <init>
    void onCompletion(android.media.MediaPlayer) -> onCompletion
cn.netin.launcher.service.WtsService$IncomingHandler -> cn.netin.launcher.service.w:
    cn.netin.launcher.service.WtsService this$0 -> a
    void <init>(cn.netin.launcher.service.WtsService) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
cn.netin.launcher.service.aispeech.AIEngineHelper -> cn.netin.launcher.service.a.a:
    java.lang.String TAG -> a
    int BUFFER_SIZE -> b
    android.content.Context mContext -> c
    boolean mIsBusy -> d
    void <clinit>() -> <clinit>
    void init(android.content.Context) -> a
    long getEngine() -> a
    boolean isBusy() -> b
    java.lang.String getPrepairedFilesDir() -> c
    java.lang.String readFileAsString(java.io.File) -> a
    void writeFileAsString(java.io.File,java.lang.String) -> a
    java.lang.String registerDeviceOnce(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.io.File getFilesDir(android.content.Context) -> b
    java.lang.String sha1(java.lang.String) -> a
    java.lang.String bytes2hex(byte[]) -> a
cn.netin.launcher.service.aispeech.AIRecorder -> cn.netin.launcher.service.a.b:
    java.lang.String TAG -> a
    int CHANNELS -> b
    int BITS -> c
    int FREQUENCY -> d
    int INTERVAL -> e
    java.lang.String latestPath -> f
    boolean running -> g
    java.util.concurrent.ExecutorService workerThread -> h
    java.util.concurrent.Future future -> i
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    int start(java.lang.String,cn.netin.launcher.service.aispeech.AIRecorder$Callback,android.content.Context) -> a
    int stop() -> a
    java.io.RandomAccessFile fopen(java.lang.String) -> a
    void fwrite(java.io.RandomAccessFile,byte[],int,int) -> a
    void fclose(java.io.RandomAccessFile) -> a
    int access$0() -> b
    int access$1() -> c
    int access$2() -> d
    int access$3() -> e
    void access$4(cn.netin.launcher.service.aispeech.AIRecorder,boolean) -> a
    java.lang.String access$5() -> f
    void access$6(cn.netin.launcher.service.aispeech.AIRecorder,java.io.RandomAccessFile) -> a
    java.io.RandomAccessFile access$7(cn.netin.launcher.service.aispeech.AIRecorder,java.lang.String) -> a
    boolean access$8(cn.netin.launcher.service.aispeech.AIRecorder) -> a
    void access$9(cn.netin.launcher.service.aispeech.AIRecorder,java.io.RandomAccessFile,byte[],int,int) -> a
cn.netin.launcher.service.aispeech.AIRecorder$1 -> cn.netin.launcher.service.a.c:
    cn.netin.launcher.service.aispeech.AIRecorder this$0 -> a
    java.lang.String val$path -> b
    cn.netin.launcher.service.aispeech.AIRecorder$Callback val$callback -> c
    void <init>(cn.netin.launcher.service.aispeech.AIRecorder,java.lang.String,cn.netin.launcher.service.aispeech.AIRecorder$Callback) -> <init>
    void run() -> run
cn.netin.launcher.service.aispeech.AIRecorder$Callback -> cn.netin.launcher.service.a.d:
    void run(byte[],int) -> a
cn.netin.launcher.service.aispeech.AIScorer -> cn.netin.launcher.service.a.e:
    android.content.Context mContext -> b
    cn.netin.launcher.service.aispeech.AIRecorder mRecorder -> c
    long mEngine -> d
    boolean mIsStopped -> a
    cn.netin.launcher.service.aispeech.AIScorer$AIScorerListener mListener -> e
    java.lang.String mFilesDir -> f
    int mCount -> g
    cn.netin.launcher.service.aispeech.AIRecorder$Callback recordCallback -> h
    com.aispeech.AIEngine$aiengine_callback callback -> i
    void setListener(cn.netin.launcher.service.aispeech.AIScorer$AIScorerListener) -> a
    void <init>(android.content.Context) -> <init>
    int score(java.lang.String) -> a
    void stopScore() -> a
    long access$0(cn.netin.launcher.service.aispeech.AIScorer) -> a
    int access$1(cn.netin.launcher.service.aispeech.AIScorer) -> b
    void access$2(cn.netin.launcher.service.aispeech.AIScorer,int) -> a
    cn.netin.launcher.service.aispeech.AIScorer$AIScorerListener access$3(cn.netin.launcher.service.aispeech.AIScorer) -> c
    void access$6(cn.netin.launcher.service.aispeech.AIScorer,long) -> a
cn.netin.launcher.service.aispeech.AIScorer$1 -> cn.netin.launcher.service.a.f:
    cn.netin.launcher.service.aispeech.AIScorer this$0 -> a
    void <init>(cn.netin.launcher.service.aispeech.AIScorer) -> <init>
    void run(byte[],int) -> a
cn.netin.launcher.service.aispeech.AIScorer$2 -> cn.netin.launcher.service.a.g:
    cn.netin.launcher.service.aispeech.AIScorer this$0 -> a
    void <init>(cn.netin.launcher.service.aispeech.AIScorer) -> <init>
cn.netin.launcher.service.aispeech.AIScorer$AIScorerListener -> cn.netin.launcher.service.a.h:
    void onCompletion(int,java.lang.String) -> a
cn.netin.launcher.service.aispeech.AIScorer$InitEngineTask -> cn.netin.launcher.service.a.i:
    cn.netin.launcher.service.aispeech.AIScorer this$0 -> a
    void <init>(cn.netin.launcher.service.aispeech.AIScorer) -> <init>
    java.lang.Integer doInBackground(java.lang.Integer[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void <init>(cn.netin.launcher.service.aispeech.AIScorer,cn.netin.launcher.service.aispeech.AIScorer$InitEngineTask) -> <init>
cn.netin.launcher.util.StrEncoder -> cn.netin.launcher.a.a:
    java.nio.charset.Charset charset -> a
    byte[] keyBytes -> b
    void <clinit>() -> <clinit>
    java.lang.String decode(byte[]) -> a
cn.netin.parentalcontrol.AppAdapter -> cn.netin.parentalcontrol.a:
    android.content.Context mContext -> a
    java.util.List mAppList -> b
    int mSelected -> c
    void <init>(android.content.Context) -> <init>
    void setData(java.util.List) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void select(int) -> a
    int getSelected() -> a
cn.netin.parentalcontrol.AppData -> cn.netin.parentalcontrol.b:
    android.content.Context mContext -> a
    android.net.Uri mUri -> b
    int sIconSize -> c
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    java.util.List getAvailableAppList() -> a
    java.util.List getInstalledAppList() -> d
    java.util.List getRemovableLauncherAppList() -> b
    java.util.List getLauncherAppListWithoutGroups() -> c
    android.graphics.drawable.Drawable getAppIcon(com.hanceedu.common.App) -> c
    boolean addApp(com.hanceedu.common.App) -> a
    boolean removeApp(com.hanceedu.common.App) -> b
cn.netin.parentalcontrol.AppExpandableAdapter -> cn.netin.parentalcontrol.c:
    android.content.Context mContext -> a
    java.util.List mAppList -> b
    int mSelectedGroup -> c
    int mSelectedChild -> d
    java.lang.String[] mGroups -> e
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    void setData(java.util.List) -> a
    java.lang.Object getChild(int,int) -> getChild
    long getChildId(int,int) -> getChildId
    android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup) -> getChildView
    int getChildrenCount(int) -> getChildrenCount
    java.lang.Object getGroup(int) -> getGroup
    int getGroupCount() -> getGroupCount
    long getGroupId(int) -> getGroupId
    android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup) -> getGroupView
    boolean hasStableIds() -> hasStableIds
    boolean isChildSelectable(int,int) -> isChildSelectable
    void selectGroup(int) -> a
    void selectChild(int) -> b
    int getSelectedGroup() -> a
    int getSelectedChild() -> b
cn.netin.parentalcontrol.AppManagerActivity -> cn.netin.parentalcontrol.AppManagerActivity:
    cn.netin.parentalcontrol.AppAdapter mAppAdapter -> a
    cn.netin.parentalcontrol.AppExpandableAdapter mExpandableAdapter -> b
    cn.netin.parentalcontrol.AppData mAppData -> c
    void <init>() -> <init>
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onCreate(android.os.Bundle) -> onCreate
    void addApp() -> a
    void removeApp() -> b
    void handleClick(android.view.View) -> handleClick
    cn.netin.parentalcontrol.AppAdapter access$0(cn.netin.parentalcontrol.AppManagerActivity) -> a
    cn.netin.parentalcontrol.AppExpandableAdapter access$1(cn.netin.parentalcontrol.AppManagerActivity) -> b
cn.netin.parentalcontrol.AppManagerActivity$1 -> cn.netin.parentalcontrol.d:
    cn.netin.parentalcontrol.AppManagerActivity this$0 -> a
    android.widget.TextView val$infoView -> b
    void <init>(cn.netin.parentalcontrol.AppManagerActivity,android.widget.TextView) -> <init>
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
cn.netin.parentalcontrol.AppManagerActivity$2 -> cn.netin.parentalcontrol.e:
    cn.netin.parentalcontrol.AppManagerActivity this$0 -> a
    void <init>(cn.netin.parentalcontrol.AppManagerActivity) -> <init>
    boolean onGroupClick(android.widget.ExpandableListView,android.view.View,int,long) -> onGroupClick
cn.netin.parentalcontrol.AppManagerActivity$3 -> cn.netin.parentalcontrol.f:
    cn.netin.parentalcontrol.AppManagerActivity this$0 -> a
    void <init>(cn.netin.parentalcontrol.AppManagerActivity) -> <init>
    boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long) -> onChildClick
cn.netin.parentalcontrol.AppStatData -> cn.netin.parentalcontrol.g:
    android.content.Context mContext -> a
    int sIconSize -> b
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    java.util.List getStats(long,long,int) -> a
    com.hanceedu.common.App cursorToApp(android.database.Cursor) -> a
cn.netin.parentalcontrol.Constants -> cn.netin.parentalcontrol.h:
    int GROUPS_ARRAY -> a
    int ICON_BG_SIZE -> b
    int MAIN_ICON_SIZE -> c
    int ICON_SIZE_SMALL -> d
    void <clinit>() -> <clinit>
cn.netin.parentalcontrol.Controller -> cn.netin.parentalcontrol.i:
    com.hanceedu.common.HanceApplication mApp -> a
    cn.netin.parentalcontrol.MainUiData mData -> b
    java.util.List mAppList -> c
    android.content.Context mContext -> d
    void <init>(android.content.Context) -> <init>
    void getItemList() -> a
    void handleData(com.hanceedu.common.data.DataInterface$Param) -> a
    void startActivitySafely(android.content.Intent) -> a
    void handleItemClick(int) -> a
    void access$0(cn.netin.parentalcontrol.Controller) -> a
    void access$1(cn.netin.parentalcontrol.Controller,int) -> a
    android.content.Context access$2(cn.netin.parentalcontrol.Controller) -> b
    void access$3(cn.netin.parentalcontrol.Controller,com.hanceedu.common.data.DataInterface$Param) -> a
cn.netin.parentalcontrol.Controller$1 -> cn.netin.parentalcontrol.j:
    cn.netin.parentalcontrol.Controller this$0 -> a
    void <init>(cn.netin.parentalcontrol.Controller) -> <init>
    void onData(com.hanceedu.common.data.DataInterface$Param) -> a
cn.netin.parentalcontrol.Controller$MyHandler -> cn.netin.parentalcontrol.k:
    cn.netin.parentalcontrol.Controller this$0 -> a
    void <init>(cn.netin.parentalcontrol.Controller) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
cn.netin.parentalcontrol.GridAdapter -> cn.netin.parentalcontrol.l:
    int[] bgs -> a
    android.content.Context mContext -> b
    java.util.List mAppList -> c
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    void setData(java.util.List) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
cn.netin.parentalcontrol.MainActivity -> cn.netin.parentalcontrol.MainActivity:
    com.hanceedu.common.HanceApplication mApp -> a
    cn.netin.parentalcontrol.GridAdapter mGriddapter -> b
    cn.netin.parentalcontrol.Controller mController -> c
    boolean mDialogShown -> d
    boolean mVerified -> e
    android.app.AlertDialog mDialog -> f
    void <init>() -> <init>
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    boolean isCurrentUserOwner(android.content.Context) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onNewIntent(android.content.Intent) -> onNewIntent
    void handelIntent(android.content.Intent) -> a
    void getItemList(android.content.Intent) -> b
    void handleClick(android.view.View) -> handleClick
    void onResume() -> onResume
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    com.hanceedu.common.HanceApplication access$0(cn.netin.parentalcontrol.MainActivity) -> a
cn.netin.parentalcontrol.MainActivity$1 -> cn.netin.parentalcontrol.m:
    cn.netin.parentalcontrol.MainActivity this$0 -> a
    void <init>(cn.netin.parentalcontrol.MainActivity) -> <init>
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
cn.netin.parentalcontrol.MainUiData -> cn.netin.parentalcontrol.n:
    android.content.Context mContext -> a
    com.hanceedu.common.HanceApplication mApp -> b
    com.hanceedu.common.data.DataInterface$DataListener mListener -> c
    int sIconSize -> d
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    boolean prepare(com.hanceedu.common.data.DataInterface$Param) -> a
    void setListener(com.hanceedu.common.data.DataInterface$DataListener) -> a
    android.content.Context access$0(cn.netin.parentalcontrol.MainUiData) -> a
    int access$1() -> a
    com.hanceedu.common.HanceApplication access$2(cn.netin.parentalcontrol.MainUiData) -> b
    com.hanceedu.common.data.DataInterface$DataListener access$3(cn.netin.parentalcontrol.MainUiData) -> c
cn.netin.parentalcontrol.MainUiData$DataTask -> cn.netin.parentalcontrol.o:
    cn.netin.parentalcontrol.MainUiData this$0 -> a
    void <init>(cn.netin.parentalcontrol.MainUiData) -> <init>
    com.hanceedu.common.data.DataInterface$Param doInBackground(com.hanceedu.common.data.DataInterface$Param[]) -> a
    void onPostExecute(com.hanceedu.common.data.DataInterface$Param) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onPostExecute(java.lang.Object) -> onPostExecute
    void <init>(cn.netin.parentalcontrol.MainUiData,cn.netin.parentalcontrol.MainUiData$DataTask) -> <init>
cn.netin.parentalcontrol.PasswordActivity -> cn.netin.parentalcontrol.PasswordActivity:
    android.widget.EditText mPasswordEdit -> a
    android.widget.TextView mMessageView -> b
    com.hanceedu.common.HanceApplication mApp -> c
    cn.netin.launcher.data.ProtectionData mProtectionData -> d
    void <init>() -> <init>
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void validate() -> a
    void handleClick(android.view.View) -> handleClick
    void handlePass(java.lang.String) -> a
    java.lang.String getPassword() -> b
    void savePassword(java.lang.String) -> b
cn.netin.parentalcontrol.ProtectionActivity -> cn.netin.parentalcontrol.ProtectionActivity:
    com.hanceedu.common.HanceApplication mApp -> a
    android.widget.EditText mPasswordEdit -> b
    android.widget.EditText mConfirmEdit -> c
    android.content.Context mFriendContext -> d
    cn.netin.launcher.data.ProtectionData mData -> e
    android.widget.ToggleButton mSwitch -> f
    cn.netin.launcher.data.Protection mProtection -> g
    void <init>() -> <init>
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean save() -> a
    void handleClick(android.view.View) -> handleClick
    void onStop() -> onStop
    android.widget.EditText access$0(cn.netin.parentalcontrol.ProtectionActivity) -> a
    android.widget.EditText access$1(cn.netin.parentalcontrol.ProtectionActivity) -> b
cn.netin.parentalcontrol.ProtectionActivity$1 -> cn.netin.parentalcontrol.p:
    cn.netin.parentalcontrol.ProtectionActivity this$0 -> a
    void <init>(cn.netin.parentalcontrol.ProtectionActivity) -> <init>
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
cn.netin.parentalcontrol.R -> cn.netin.parentalcontrol.q:
cn.netin.parentalcontrol.R$array -> cn.netin.parentalcontrol.r:
    int data_paths -> data_paths
    int groups -> groups
    int groups_kk -> groups_kk
    int storage_paths -> storage_paths
    int subjectSelector_resourceIds -> subjectSelector_resourceIds
    int subjectSelector_subjects -> subjectSelector_subjects
    int urls -> urls
cn.netin.parentalcontrol.R$drawable -> cn.netin.parentalcontrol.s:
    int bar_o -> bar_o
    int bar_orange -> bar_orange
    int bg_cloud -> bg_cloud
    int bg_cloud_port -> bg_cloud_port
    int bg_cloud_title -> bg_cloud_title
    int bg_ico7 -> bg_ico7
    int bg_icon -> bg_icon
    int bg_icon0 -> bg_icon0
    int bg_icon1 -> bg_icon1
    int bg_icon10 -> bg_icon10
    int bg_icon2 -> bg_icon2
    int bg_icon3 -> bg_icon3
    int bg_icon4 -> bg_icon4
    int bg_icon5 -> bg_icon5
    int bg_icon6 -> bg_icon6
    int bg_icon7 -> bg_icon7
    int bg_icon8 -> bg_icon8
    int bg_icon9 -> bg_icon9
    int bg_input -> bg_input
    int bg_input_big -> bg_input_big
    int bg_input_big_pressed -> bg_input_big_pressed
    int bg_input_pressed -> bg_input_pressed
    int bg_pad -> bg_pad
    int bg_window -> bg_window
    int bt_add -> bt_add
    int bt_add_pressed -> bt_add_pressed
    int bt_day -> bt_day
    int bt_day_pressed -> bt_day_pressed
    int bt_month -> bt_month
    int bt_month_pressed -> bt_month_pressed
    int bt_ok -> bt_ok
    int bt_ok_pressed -> bt_ok_pressed
    int bt_remove -> bt_remove
    int bt_remove_pressed -> bt_remove_pressed
    int bt_test -> bt_test
    int bt_week -> bt_week
    int bt_week_pressed -> bt_week_pressed
    int btn_add -> btn_add
    int btn_add_pressed -> btn_add_pressed
    int button_add -> button_add
    int button_add2 -> button_add2
    int button_close -> button_close
    int button_day -> button_day
    int button_month -> button_month
    int button_ok -> button_ok
    int button_remove -> button_remove
    int button_switch -> button_switch
    int button_week -> button_week
    int close_normal -> close_normal
    int close_pressed -> close_pressed
    int coods -> coods
    int div_grey -> div_grey
    int hd_grey -> hd_grey
    int hd_grey_end -> hd_grey_end
    int hd_grey_mid -> hd_grey_mid
    int hd_grey_start -> hd_grey_start
    int ic_launcher -> ic_launcher
    int ic_trash -> ic_trash
    int ic_trash_pressed -> ic_trash_pressed
    int icon_notification -> icon_notification
    int icon_trash -> icon_trash
    int input -> input
    int navi_end -> navi_end
    int navi_mid -> navi_mid
    int navi_start -> navi_start
    int page_background -> page_background
    int page_beijing -> page_beijing
    int page_btn_numpad_cancel_src -> page_btn_numpad_cancel_src
    int page_btn_numpad_del_src -> page_btn_numpad_del_src
    int page_first_btn -> page_first_btn
    int page_first_default -> page_first_default
    int page_first_enabled -> page_first_enabled
    int page_first_focused -> page_first_focused
    int page_first_press -> page_first_press
    int page_last_btn -> page_last_btn
    int page_last_default -> page_last_default
    int page_last_enabled -> page_last_enabled
    int page_last_focuse -> page_last_focuse
    int page_last_press -> page_last_press
    int page_next_btn -> page_next_btn
    int page_next_default -> page_next_default
    int page_next_enabled -> page_next_enabled
    int page_next_focuse -> page_next_focuse
    int page_next_press -> page_next_press
    int page_number_text -> page_number_text
    int page_numpad -> page_numpad
    int page_numpad_0 -> page_numpad_0
    int page_numpad_1 -> page_numpad_1
    int page_numpad_2 -> page_numpad_2
    int page_numpad_3 -> page_numpad_3
    int page_numpad_4 -> page_numpad_4
    int page_numpad_5 -> page_numpad_5
    int page_numpad_6 -> page_numpad_6
    int page_numpad_7 -> page_numpad_7
    int page_numpad_8 -> page_numpad_8
    int page_numpad_9 -> page_numpad_9
    int page_numpad_cancel -> page_numpad_cancel
    int page_numpad_del -> page_numpad_del
    int page_numpad_enter -> page_numpad_enter
    int page_previous_btn -> page_previous_btn
    int page_previous_default -> page_previous_default
    int page_previous_enabled -> page_previous_enabled
    int page_previous_focused -> page_previous_focused
    int page_previous_press -> page_previous_press
    int pn_end -> pn_end
    int pn_end_pressed -> pn_end_pressed
    int pn_mid -> pn_mid
    int pn_mid_pressed -> pn_mid_pressed
    int pn_start -> pn_start
    int pn_start_pressed -> pn_start_pressed
    int seekbar -> seekbar
    int seekbar30 -> seekbar30
    int seekbar_bg -> seekbar_bg
    int seekbar_bg30 -> seekbar_bg30
    int seekbar_progress -> seekbar_progress
    int seekbar_progress30 -> seekbar_progress30
    int seekbar_thumb -> seekbar_thumb
    int subject_all -> subject_all
    int subject_biology -> subject_biology
    int subject_chemisty -> subject_chemisty
    int subject_chinese -> subject_chinese
    int subject_english -> subject_english
    int subject_geography -> subject_geography
    int subject_history -> subject_history
    int subject_maths -> subject_maths
    int subject_other -> subject_other
    int subject_physics -> subject_physics
    int subject_political -> subject_political
    int subject_science -> subject_science
    int subject_unknown -> subject_unknown
    int switch_off -> switch_off
    int switch_on -> switch_on
    int transparent -> transparent
cn.netin.parentalcontrol.R$id -> cn.netin.parentalcontrol.t:
    int RelativeLayout1 -> RelativeLayout1
    int addButton -> addButton
    int appView -> appView
    int barView -> barView
    int bt_add -> bt_add
    int bt_remove -> bt_remove
    int cancel_btn -> cancel_btn
    int closeButton -> closeButton
    int confirmPasswordEdit -> confirmPasswordEdit
    int dateButtonsLayout -> dateButtonsLayout
    int dayButton -> dayButton
    int del_btn -> del_btn
    int editPageNum -> editPageNum
    int endTime -> endTime
    int expandableListView1 -> expandableListView1
    int first_btn -> first_btn
    int fromText -> fromText
    int gridView -> gridView
    int icon -> icon
    int infoView -> infoView
    int key1 -> key1
    int last_btn -> last_btn
    int listView -> listView
    int listView1 -> listView1
    int messageTextView -> messageTextView
    int monthButton -> monthButton
    int navi1 -> navi1
    int navi2 -> navi2
    int navi3 -> navi3
    int navi4 -> navi4
    int navi5 -> navi5
    int navi6 -> navi6
    int navi7 -> navi7
    int next_btn -> next_btn
    int num_0_btn -> num_0_btn
    int num_1_btn -> num_1_btn
    int num_2_btn -> num_2_btn
    int num_3_btn -> num_3_btn
    int num_4_btn -> num_4_btn
    int num_5_btn -> num_5_btn
    int num_6_btn -> num_6_btn
    int num_7_btn -> num_7_btn
    int num_8_btn -> num_8_btn
    int num_9_btn -> num_9_btn
    int okButton -> okButton
    int pageNum -> pageNum
    int pageableView1 -> pageableView1
    int passwordEdit -> passwordEdit
    int passwordEdit1 -> passwordEdit1
    int playPeriodLayout -> playPeriodLayout
    int playPeriodSwitch -> playPeriodSwitch
    int playPeriodSwitchLayout -> playPeriodSwitchLayout
    int playPeriodText -> playPeriodText
    int playTimeLayout -> playTimeLayout
    int playTimeSwitch -> playTimeSwitch
    int playTimeSwitchLayout -> playTimeSwitchLayout
    int playTimeText -> playTimeText
    int prev_btn -> prev_btn
    int protectionSwitch -> protectionSwitch
    int protectionSwitchLayout -> protectionSwitchLayout
    int radioGroup1 -> radioGroup1
    int restTimeLayout -> restTimeLayout
    int restTimeSeekBar -> restTimeSeekBar
    int restTimeText -> restTimeText
    int sb_play_time -> sb_play_time
    int scrollView1 -> scrollView1
    int showNum -> showNum
    int startTime -> startTime
    int subTitle -> subTitle
    int subjectselector_gridview -> subjectselector_gridview
    int subjectselector_label -> subjectselector_label
    int submit_btn -> submit_btn
    int switchText -> switchText
    int textView -> textView
    int textView1 -> textView1
    int textView2 -> textView2
    int title -> title
    int titleView -> titleView
    int toText -> toText
    int trashButton -> trashButton
    int urlEdit -> urlEdit
    int valueView -> valueView
    int webAccessSwitch -> webAccessSwitch
    int weekButton -> weekButton
    int whiteListText -> whiteListText
cn.netin.parentalcontrol.R$layout -> cn.netin.parentalcontrol.u:
    int act_rest_time -> act_rest_time
    int app_manager -> app_manager
    int icons_item -> icons_item
    int main -> main
    int number_input_dialog -> number_input_dialog
    int page_board -> page_board
    int page_pageable_activity -> page_pageable_activity
    int pagenavi -> pagenavi
    int password -> password
    int protection -> protection
    int subjectselector -> subjectselector
    int subjectselector_item -> subjectselector_item
    int url_item -> url_item
    int usage -> usage
    int usage_item -> usage_item
    int web -> web
cn.netin.parentalcontrol.R$string -> cn.netin.parentalcontrol.v:
    int add -> add
    int add_ok -> add_ok
    int app_name -> app_name
    int app_permit -> app_permit
    int available -> available
    int avatar_setting -> avatar_setting
    int confirm_password -> confirm_password
    int confirm_required -> confirm_required
    int default_pass -> default_pass
    int dialog_message -> dialog_message
    int dialog_no -> dialog_no
    int dialog_ok -> dialog_ok
    int dialog_title -> dialog_title
    int error -> error
    int first_page -> first_page
    int from -> from
    int hello -> hello
    int input_email -> input_email
    int input_password -> input_password
    int invalid_period -> invalid_period
    int invalid_url -> invalid_url
    int kids -> kids
    int last_page -> last_page
    int max_play_time -> max_play_time
    int next_page -> next_page
    int no_launcher -> no_launcher
    int parental_control -> parental_control
    int password_not_confirm -> password_not_confirm
    int password_protection -> password_protection
    int password_required -> password_required
    int play_limit -> play_limit
    int play_peroid_limit -> play_peroid_limit
    int play_time_limit -> play_time_limit
    int previous_page -> previous_page
    int protection_switch -> protection_switch
    int remove -> remove
    int remove_ok -> remove_ok
    int rest_time -> rest_time
    int select_source -> select_source
    int select_target -> select_target
    int service_name -> service_name
    int service_text -> service_text
    int stat_permission -> stat_permission
    int to -> to
    int usage_report -> usage_report
    int web_access -> web_access
    int web_access_limit -> web_access_limit
    int white_list -> white_list
    int wrong_password -> wrong_password
cn.netin.parentalcontrol.RestTime -> cn.netin.parentalcontrol.w:
    boolean enableRest -> a
    int play -> b
    int rest -> c
    boolean enablePeriod -> d
    int startTime -> e
    int endTime -> f
    void <init>() -> <init>
cn.netin.parentalcontrol.RestTimeActivity -> cn.netin.parentalcontrol.RestTimeActivity:
    com.hanceedu.common.HanceApplication mApp -> c
    cn.netin.parentalcontrol.RestTimeData mData -> d
    android.widget.ToggleButton mRestSwitch -> a
    android.widget.ToggleButton mPeriodSwitch -> b
    android.widget.SeekBar mPlayTimeSeekBar -> e
    android.widget.SeekBar mRestTimeSeekBar -> f
    android.widget.TimePicker mStartTimePicker -> g
    android.widget.TimePicker mEndTimePicker -> h
    android.widget.SeekBar$OnSeekBarChangeListener mSeekBarListener -> i
    void <init>() -> <init>
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean save() -> a
    void handleClick(android.view.View) -> handleClick
    void onStop() -> onStop
    android.widget.SeekBar access$0(cn.netin.parentalcontrol.RestTimeActivity) -> a
    android.widget.SeekBar access$1(cn.netin.parentalcontrol.RestTimeActivity) -> b
    android.widget.TimePicker access$2(cn.netin.parentalcontrol.RestTimeActivity) -> c
    android.widget.TimePicker access$3(cn.netin.parentalcontrol.RestTimeActivity) -> d
cn.netin.parentalcontrol.RestTimeActivity$1 -> cn.netin.parentalcontrol.x:
    cn.netin.parentalcontrol.RestTimeActivity this$0 -> a
    void <init>(cn.netin.parentalcontrol.RestTimeActivity) -> <init>
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
cn.netin.parentalcontrol.RestTimeActivity$2 -> cn.netin.parentalcontrol.y:
    cn.netin.parentalcontrol.RestTimeActivity this$0 -> a
    void <init>(cn.netin.parentalcontrol.RestTimeActivity) -> <init>
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
cn.netin.parentalcontrol.RestTimeActivity$3 -> cn.netin.parentalcontrol.z:
    cn.netin.parentalcontrol.RestTimeActivity this$0 -> a
    void <init>(cn.netin.parentalcontrol.RestTimeActivity) -> <init>
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
cn.netin.parentalcontrol.RestTimeData -> cn.netin.parentalcontrol.aa:
    android.content.Context mContext -> a
    void <init>(android.content.Context) -> <init>
    cn.netin.parentalcontrol.RestTime getRestTime() -> a
    int insertOrUpdateRestTime(cn.netin.parentalcontrol.RestTime) -> a
cn.netin.parentalcontrol.UrlAdapter -> cn.netin.parentalcontrol.ab:
    android.content.Context mContext -> a
    java.util.List mUrlList -> b
    int mSelected -> c
    void <init>(android.content.Context) -> <init>
    void setData(java.util.List) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
cn.netin.parentalcontrol.UsageActivity -> cn.netin.parentalcontrol.UsageActivity:
    com.hanceedu.common.HanceApplication mApp -> a
    cn.netin.parentalcontrol.AppStatData mAppStatData -> b
    int mStatType -> c
    int mDateIndex -> d
    com.hanceedu.common.util.DateInfo[] mDateInfos -> e
    android.view.ViewGroup mDateButtonsLayout -> f
    android.widget.ListView mListView -> g
    cn.netin.parentalcontrol.UsageAdapter mUsageAdapter -> h
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void updateList() -> a
    void setupDateButtons() -> b
    void handleClick(android.view.View) -> handleClick
cn.netin.parentalcontrol.UsageAdapter -> cn.netin.parentalcontrol.ac:
    android.content.Context mContext -> a
    java.util.List mAppList -> b
    int mSelected -> c
    void <init>(android.content.Context) -> <init>
    void setData(java.util.List) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
cn.netin.parentalcontrol.WebAccessActivity -> cn.netin.parentalcontrol.WebAccessActivity:
    com.hanceedu.common.HanceApplication mApp -> a
    cn.netin.parentalcontrol.WebAccessData mData -> b
    cn.netin.parentalcontrol.UrlAdapter mUrlAdapter -> c
    android.widget.EditText mUrlEdit -> d
    android.widget.ToggleButton mWebAccessSwitch -> e
    void <init>() -> <init>
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onCreate(android.os.Bundle) -> onCreate
    void saveEnable() -> a
    void removeUrl(java.lang.String) -> a
    void addUrl() -> b
    void handleClick(android.view.View) -> handleClick
    void onStop() -> onStop
cn.netin.parentalcontrol.WebAccessActivity$1 -> cn.netin.parentalcontrol.ad:
    cn.netin.parentalcontrol.WebAccessActivity this$0 -> a
    void <init>(cn.netin.parentalcontrol.WebAccessActivity) -> <init>
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
cn.netin.parentalcontrol.WebAccessData -> cn.netin.parentalcontrol.ae:
    android.content.Context mContext -> a
    void <init>(android.content.Context) -> <init>
    boolean isEnable() -> a
    int setEnable(int) -> a
    java.util.List getUrls() -> b
    int deleteUrl(java.lang.String) -> a
    int insertUrl(java.lang.String,java.lang.String) -> a
cn.netin.wifisetting.MainActivity -> cn.netin.wifisetting.MainActivity:
    cn.netin.wifisetting.WifiUtils mWifiAdmin -> b
    java.util.List mResultList -> c
    cn.netin.wifisetting.PullRefreshListView mListView -> d
    android.widget.ToggleButton mSwitch -> e
    cn.netin.wifisetting.PullRefreshListViewAdapter mAdapter -> f
    int mPosition -> g
    java.lang.String sSSID -> h
    cn.netin.wifisetting.MainActivity$WifiReceiver mReceiver -> i
    android.os.Handler mHandler -> j
    boolean mShouldScan -> a
    cn.netin.wifisetting.OnNetworkChangeListener mOnNetworkChangeListener -> k
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void initView() -> c
    void showNoWifi() -> d
    void switchWifiState(int) -> a
    void registerReceiver() -> e
    void setListViewListener() -> f
    void scanWifi() -> g
    void showWifiList() -> h
    void onStart() -> onStart
    void onStop() -> onStop
    void onClick(android.view.View) -> onClick
    void startRefreshWifiThread() -> i
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void unregisterReceiver() -> j
    void setStatusTransparent() -> a
    void setDarkStatusIcon(boolean) -> a
    void access$0(cn.netin.wifisetting.MainActivity) -> a
    cn.netin.wifisetting.WifiUtils access$1(cn.netin.wifisetting.MainActivity) -> b
    java.lang.String access$2() -> b
    android.widget.ToggleButton access$3(cn.netin.wifisetting.MainActivity) -> c
    cn.netin.wifisetting.PullRefreshListView access$4(cn.netin.wifisetting.MainActivity) -> d
    void access$5(cn.netin.wifisetting.MainActivity) -> e
    void access$6(cn.netin.wifisetting.MainActivity) -> f
    android.os.Handler access$7(cn.netin.wifisetting.MainActivity) -> g
    void access$8(cn.netin.wifisetting.MainActivity,int) -> a
    java.util.List access$9(cn.netin.wifisetting.MainActivity) -> h
    int access$10(cn.netin.wifisetting.MainActivity) -> i
    cn.netin.wifisetting.OnNetworkChangeListener access$11(cn.netin.wifisetting.MainActivity) -> j
    void access$12(java.lang.String) -> a
    cn.netin.wifisetting.PullRefreshListViewAdapter access$13(cn.netin.wifisetting.MainActivity) -> k
cn.netin.wifisetting.MainActivity$1 -> cn.netin.wifisetting.a:
    cn.netin.wifisetting.MainActivity this$0 -> a
    void <init>(cn.netin.wifisetting.MainActivity) -> <init>
    void onNetWorkDisConnect() -> a
    void onNetWorkConnect() -> b
cn.netin.wifisetting.MainActivity$2 -> cn.netin.wifisetting.b:
    cn.netin.wifisetting.MainActivity this$0 -> a
    void <init>(cn.netin.wifisetting.MainActivity) -> <init>
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
cn.netin.wifisetting.MainActivity$3 -> cn.netin.wifisetting.c:
    cn.netin.wifisetting.MainActivity this$0 -> a
    void <init>(cn.netin.wifisetting.MainActivity) -> <init>
    void onRefresh() -> a
    cn.netin.wifisetting.MainActivity access$0(cn.netin.wifisetting.MainActivity$3) -> a
cn.netin.wifisetting.MainActivity$3$1 -> cn.netin.wifisetting.d:
    cn.netin.wifisetting.MainActivity$3 this$1 -> a
    void <init>(cn.netin.wifisetting.MainActivity$3) -> <init>
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onPostExecute(java.lang.Object) -> onPostExecute
cn.netin.wifisetting.MainActivity$4 -> cn.netin.wifisetting.e:
    cn.netin.wifisetting.MainActivity this$0 -> a
    void <init>(cn.netin.wifisetting.MainActivity) -> <init>
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void connectWifi(android.net.wifi.ScanResult) -> a
    void connectWithoutPass(android.net.wifi.ScanResult) -> b
cn.netin.wifisetting.MainActivity$5 -> cn.netin.wifisetting.f:
    cn.netin.wifisetting.MainActivity this$0 -> a
    void <init>(cn.netin.wifisetting.MainActivity) -> <init>
    void run() -> run
cn.netin.wifisetting.MainActivity$MyHandler -> cn.netin.wifisetting.g:
    java.lang.ref.WeakReference reference -> a
    void <init>(cn.netin.wifisetting.MainActivity) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
cn.netin.wifisetting.MainActivity$WifiReceiver -> cn.netin.wifisetting.h:
    boolean isDisConnected -> b
    boolean isConnecting -> c
    cn.netin.wifisetting.MainActivity this$0 -> a
    void <init>(cn.netin.wifisetting.MainActivity) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void <init>(cn.netin.wifisetting.MainActivity,cn.netin.wifisetting.MainActivity$WifiReceiver) -> <init>
cn.netin.wifisetting.OnNetworkChangeListener -> cn.netin.wifisetting.i:
    void onNetWorkDisConnect() -> a
    void onNetWorkConnect() -> b
cn.netin.wifisetting.PullRefreshListView -> cn.netin.wifisetting.PullRefreshListView:
    android.view.LayoutInflater inflater -> a
    android.widget.LinearLayout headView -> b
    android.widget.TextView tipsTextview -> c
    android.widget.TextView lastUpdatedTextView -> d
    android.widget.ImageView arrowImageView -> e
    android.widget.ProgressBar progressBar -> f
    android.view.animation.RotateAnimation animation -> g
    android.view.animation.RotateAnimation reverseAnimation -> h
    boolean isRecored -> i
    int headContentWidth -> j
    int headContentHeight -> k
    int startY -> l
    int firstItemIndex -> m
    int state -> n
    boolean isBack -> o
    cn.netin.wifisetting.PullRefreshListView$OnRefreshListener refreshListener -> p
    boolean isRefreshable -> q
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void init(android.content.Context) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void setRefreshing() -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void changeHeaderViewByState() -> c
    void setonRefreshListener(cn.netin.wifisetting.PullRefreshListView$OnRefreshListener) -> setonRefreshListener
    void onRefreshComplete() -> b
    void onRefresh() -> d
    void measureView(android.view.View) -> a
    void setAdapter(android.widget.BaseAdapter) -> setAdapter
cn.netin.wifisetting.PullRefreshListView$OnRefreshListener -> cn.netin.wifisetting.j:
    void onRefresh() -> a
cn.netin.wifisetting.PullRefreshListViewAdapter -> cn.netin.wifisetting.k:
    java.util.List datas -> a
    android.content.Context context -> b
    android.net.wifi.WifiManager mWifiManager -> c
    android.net.ConnectivityManager cm -> d
    void setDatas(java.util.List) -> a
    void <init>(android.content.Context,java.util.List) -> <init>
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
cn.netin.wifisetting.PullRefreshListViewAdapter$Holder -> cn.netin.wifisetting.l:
    android.widget.TextView txtWifiName -> a
    android.widget.TextView txtWifiDesc -> b
    android.widget.ImageView imgWifiLevelIco -> c
    void <init>() -> <init>
cn.netin.wifisetting.R -> cn.netin.wifisetting.m:
cn.netin.wifisetting.R$id -> cn.netin.wifisetting.n:
    int button_backward -> button_backward
    int cbx_show_pass -> cbx_show_pass
    int edt_password -> edt_password
    int freelook_listview -> freelook_listview
    int head_arrowImageView -> head_arrowImageView
    int head_contentLayout -> head_contentLayout
    int head_lastUpdatedTextView -> head_lastUpdatedTextView
    int head_progressBar -> head_progressBar
    int head_tipsTextView -> head_tipsTextView
    int img_wifi_level_ico -> img_wifi_level_ico
    int layout_titlebar -> layout_titlebar
    int switch1 -> switch1
    int text_title -> text_title
    int txt_btn_cancel -> txt_btn_cancel
    int txt_btn_connect -> txt_btn_connect
    int txt_btn_disconnect -> txt_btn_disconnect
    int txt_conn_status -> txt_conn_status
    int txt_ip_address -> txt_ip_address
    int txt_label_conn_status -> txt_label_conn_status
    int txt_label_ip_address -> txt_label_ip_address
    int txt_label_security_level -> txt_label_security_level
    int txt_label_signal_strength -> txt_label_signal_strength
    int txt_password -> txt_password
    int txt_security_level -> txt_security_level
    int txt_signal_strength -> txt_signal_strength
    int txt_wifi_desc -> txt_wifi_desc
    int txt_wifi_name -> txt_wifi_name
cn.netin.wifisetting.R$layout -> cn.netin.wifisetting.o:
    int activity_wifi_setting -> activity_wifi_setting
    int mylist_wifi_head -> mylist_wifi_head
    int mylist_wifi_item -> mylist_wifi_item
    int titlebar_wifi -> titlebar_wifi
    int view_wifi_conn -> view_wifi_conn
    int view_wifi_status -> view_wifi_status
cn.netin.wifisetting.R$mipmap -> cn.netin.wifisetting.p:
    int bg_ht -> bg_ht
    int bg_sw -> bg_sw
    int ic_launcher -> ic_launcher
    int ic_pulltorefresh_arrow -> ic_pulltorefresh_arrow
    int list_separator -> list_separator
    int load -> load
    int wifi_1 -> wifi_1
    int wifi_2 -> wifi_2
    int wifi_3 -> wifi_3
    int wifi_4 -> wifi_4
    int wifi_none_1 -> wifi_none_1
    int wifi_none_2 -> wifi_none_2
    int wifi_none_3 -> wifi_none_3
    int wifi_none_4 -> wifi_none_4
cn.netin.wifisetting.R$style -> cn.netin.wifisetting.q:
    int AppTheme -> AppTheme
    int defaultDialogStyle -> defaultDialogStyle
cn.netin.wifisetting.WifiConnDialog -> cn.netin.wifisetting.r:
    android.content.Context context -> a
    android.net.wifi.ScanResult scanResult -> b
    android.widget.TextView txtWifiName -> c
    android.widget.TextView txtSinglStrength -> d
    android.widget.TextView txtSecurityLevel -> e
    android.widget.TextView txtBtnConn -> f
    android.widget.TextView txtBtnCancel -> g
    android.widget.EditText edtPassword -> h
    android.widget.CheckBox cbxShowPass -> i
    java.lang.String wifiName -> j
    java.lang.String securigyLevel -> k
    int level -> l
    cn.netin.wifisetting.OnNetworkChangeListener onNetworkChangeListener -> m
    void <init>(android.content.Context,int,java.lang.String,int,java.lang.String) -> <init>
    void <init>(android.content.Context,int,android.widget.ListView,int,cn.netin.wifisetting.PullRefreshListViewAdapter,android.net.wifi.ScanResult,java.util.List,cn.netin.wifisetting.OnNetworkChangeListener) -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void setListener() -> a
    void initView() -> b
    void show() -> show
    android.widget.TextView access$0(cn.netin.wifisetting.WifiConnDialog) -> a
    android.widget.CheckBox access$1(cn.netin.wifisetting.WifiConnDialog) -> b
    android.widget.EditText access$2(cn.netin.wifisetting.WifiConnDialog) -> c
    android.net.wifi.ScanResult access$3(cn.netin.wifisetting.WifiConnDialog) -> d
    android.content.Context access$4(cn.netin.wifisetting.WifiConnDialog) -> e
    cn.netin.wifisetting.OnNetworkChangeListener access$5(cn.netin.wifisetting.WifiConnDialog) -> f
cn.netin.wifisetting.WifiConnDialog$1 -> cn.netin.wifisetting.s:
    cn.netin.wifisetting.WifiConnDialog this$0 -> a
    void <init>(cn.netin.wifisetting.WifiConnDialog) -> <init>
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
cn.netin.wifisetting.WifiConnDialog$2 -> cn.netin.wifisetting.t:
    cn.netin.wifisetting.WifiConnDialog this$0 -> a
    void <init>(cn.netin.wifisetting.WifiConnDialog) -> <init>
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
cn.netin.wifisetting.WifiConnDialog$3 -> cn.netin.wifisetting.u:
    cn.netin.wifisetting.WifiConnDialog this$0 -> a
    void <init>(cn.netin.wifisetting.WifiConnDialog) -> <init>
    void onClick(android.view.View) -> onClick
cn.netin.wifisetting.WifiConnDialog$4 -> cn.netin.wifisetting.v:
    cn.netin.wifisetting.WifiConnDialog this$0 -> a
    void <init>(cn.netin.wifisetting.WifiConnDialog) -> <init>
    void onClick(android.view.View) -> onClick
cn.netin.wifisetting.WifiConnectUtils -> cn.netin.wifisetting.w:
cn.netin.wifisetting.WifiConnectUtils$WifiCipherType -> cn.netin.wifisetting.x:
    cn.netin.wifisetting.WifiConnectUtils$WifiCipherType WIFICIPHER_WEP -> a
    cn.netin.wifisetting.WifiConnectUtils$WifiCipherType WIFICIPHER_WPA -> b
    cn.netin.wifisetting.WifiConnectUtils$WifiCipherType WIFICIPHER_NOPASS -> c
    cn.netin.wifisetting.WifiConnectUtils$WifiCipherType WifiCipherType -> d
    cn.netin.wifisetting.WifiConnectUtils$WifiCipherType WIFICIPHER_INVALID -> e
    cn.netin.wifisetting.WifiConnectUtils$WifiCipherType[] ENUM$VALUES -> f
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    cn.netin.wifisetting.WifiConnectUtils$WifiCipherType[] values() -> values
    cn.netin.wifisetting.WifiConnectUtils$WifiCipherType valueOf(java.lang.String) -> valueOf
cn.netin.wifisetting.WifiStatusDialog -> cn.netin.wifisetting.y:
    cn.netin.wifisetting.WifiUtils mWifiAdmin -> a
    android.net.wifi.ScanResult scanResult -> b
    android.widget.TextView txtWifiName -> c
    android.widget.TextView txtConnStatus -> d
    android.widget.TextView txtSinglStrength -> e
    android.widget.TextView txtSecurityLevel -> f
    android.widget.TextView txtIpAddress -> g
    android.widget.TextView txtBtnDisConn -> h
    android.widget.TextView txtBtnCancel -> i
    java.lang.String wifiName -> j
    java.lang.String securigyLevel -> k
    int level -> l
    cn.netin.wifisetting.OnNetworkChangeListener onNetworkChangeListener -> m
    void <init>(android.content.Context,int,java.lang.String,int,java.lang.String) -> <init>
    void <init>(android.content.Context,int,android.net.wifi.ScanResult,cn.netin.wifisetting.OnNetworkChangeListener) -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void setListener() -> a
    void initView() -> b
    void show() -> show
    cn.netin.wifisetting.WifiUtils access$0(cn.netin.wifisetting.WifiStatusDialog) -> a
    cn.netin.wifisetting.OnNetworkChangeListener access$1(cn.netin.wifisetting.WifiStatusDialog) -> b
cn.netin.wifisetting.WifiStatusDialog$1 -> cn.netin.wifisetting.z:
    cn.netin.wifisetting.WifiStatusDialog this$0 -> a
    void <init>(cn.netin.wifisetting.WifiStatusDialog) -> <init>
    void onClick(android.view.View) -> onClick
cn.netin.wifisetting.WifiStatusDialog$2 -> cn.netin.wifisetting.aa:
    cn.netin.wifisetting.WifiStatusDialog this$0 -> a
    void <init>(cn.netin.wifisetting.WifiStatusDialog) -> <init>
    void onClick(android.view.View) -> onClick
cn.netin.wifisetting.WifiUtils -> cn.netin.wifisetting.ab:
    android.net.wifi.WifiManager mWifiManager -> a
    android.net.wifi.WifiInfo mWifiInfo -> b
    java.util.List mScanWifiList -> c
    java.lang.String[] ERRORS -> d
    void <clinit>() -> <clinit>
    void <init>(android.content.Context) -> <init>
    java.lang.String errorText(int) -> a
    boolean closeWifi() -> a
    int checkState() -> b
    java.util.List getWifiList() -> c
    java.util.List scanWifiList() -> d
    int getIpAddress() -> e
    void disConnectionWifi(int) -> b
    void forgetWifi(int) -> c
    void forgetWifiBySsid(java.lang.String) -> a
    boolean openWifi() -> f
    boolean connect(java.lang.String,java.lang.String,cn.netin.wifisetting.WifiConnectUtils$WifiCipherType) -> a
    int connectIfExist(java.lang.String) -> b
    android.net.wifi.WifiConfiguration isExsits(java.lang.String) -> c
    android.net.wifi.WifiConfiguration createConfig(java.lang.String,java.lang.String,cn.netin.wifisetting.WifiConnectUtils$WifiCipherType) -> b
    boolean isConnected(android.net.wifi.ScanResult) -> a
    java.lang.String ipIntToString(int) -> d
    android.net.wifi.WifiInfo getWifiInfo() -> g
    int getNetworkId() -> h
    java.lang.String singlLevToStr(int) -> e
    boolean addNetwork(android.net.wifi.WifiConfiguration) -> a
    boolean connectSpecificAP(android.net.wifi.ScanResult) -> b
    android.net.wifi.WifiConfiguration CreateWifiInfo(android.net.wifi.ScanResult,java.lang.String) -> a
com.aispeech.AIEngine -> com.aispeech.AIEngine:
    int AIENGINE_MESSAGE_TYPE_JSON -> a
    int AIENGINE_MESSAGE_TYPE_BIN -> b
    int AIENGINE_OPT_GET_VERSION -> c
    int AIENGINE_OPT_GET_MODULES -> d
    int AIENGINE_OPT_GET_TRAFFIC -> e
    void <clinit>() -> <clinit>
    long aiengine_new(java.lang.String,java.lang.Object) -> aiengine_new
    int aiengine_start(long,java.lang.String,byte[],com.aispeech.AIEngine$aiengine_callback) -> aiengine_start
    int aiengine_feed(long,byte[],int) -> aiengine_feed
    int aiengine_stop(long) -> aiengine_stop
    int aiengine_get_device_id(byte[],java.lang.Object) -> aiengine_get_device_id
com.aispeech.AIEngine$aiengine_callback -> com.aispeech.a:
com.hanceedu.common.App -> com.hanceedu.common.a:
    int id -> a
    int category -> b
    int groupId -> c
    int parentId -> d
    int screen -> e
    java.lang.String name -> f
    java.lang.String icon -> g
    java.lang.String pkg -> h
    java.lang.String cls -> i
    java.lang.String data -> j
    java.lang.String contentType -> k
    int sum -> l
    android.graphics.drawable.Drawable drawable -> m
    android.graphics.drawable.Drawable smallDrawable -> n
    void <init>() -> <init>
    android.graphics.drawable.Drawable getSmallDrawable() -> a
    void setSmallDrawable(android.graphics.drawable.Drawable) -> a
    android.graphics.drawable.Drawable getDrawable() -> b
    void setDrawable(android.graphics.drawable.Drawable) -> b
    int getId() -> c
    void setId(int) -> a
    int getCategory() -> d
    void setCategory(int) -> b
    int getGroupId() -> e
    void setGroupId(int) -> c
    int getParentId() -> f
    void setParentId(int) -> d
    void setScreen(int) -> e
    java.lang.String getName() -> g
    void setName(java.lang.String) -> a
    java.lang.String getIcon() -> h
    void setIcon(java.lang.String) -> b
    java.lang.String getPkg() -> i
    void setPkg(java.lang.String) -> c
    java.lang.String getCls() -> j
    void setCls(java.lang.String) -> d
    java.lang.String getData() -> k
    void setData(java.lang.String) -> e
    java.lang.String getContentType() -> l
    void setContentType(java.lang.String) -> f
    int getSum() -> m
    void setSum(int) -> f
com.hanceedu.common.HanceApplication -> com.hanceedu.common.HanceApplication:
    android.os.Handler mAppHandler -> a
    java.util.Map mAppData -> b
    java.util.Map mHandlerMap -> c
    void <init>() -> <init>
    void setHandler(android.os.Handler) -> a
    void setHandler(java.lang.String,android.os.Handler) -> a
    java.lang.Object getAppData(java.lang.String) -> a
    void putAppData(java.lang.String,java.lang.Object) -> a
    void sendMessage(int,int,int,java.lang.String[]) -> a
    void sendMessage(java.lang.String,int,int,int,java.lang.String[]) -> a
    void sendMessage(java.lang.String,int,int,int,int,java.lang.String[]) -> a
    void release() -> a
com.hanceedu.common.Item -> com.hanceedu.common.b:
    int id -> a
    int parentId -> b
    java.lang.String name -> c
    java.lang.String data -> d
    java.lang.String type -> e
    java.lang.String icon -> f
    byte[] bytes -> g
    void <init>() -> <init>
    int getId() -> c
    void setId(int) -> a
    int getParentId() -> f
    void setParentId(int) -> d
    java.lang.String getName() -> g
    void setName(java.lang.String) -> a
    java.lang.String getData() -> k
    void setData(java.lang.String) -> e
    java.lang.String getIcon() -> h
    void setIcon(java.lang.String) -> b
    java.lang.String toString() -> toString
com.hanceedu.common.R -> com.hanceedu.common.c:
com.hanceedu.common.R$drawable -> com.hanceedu.common.d:
    int coods -> coods
    int page_background -> page_background
    int page_beijing -> page_beijing
    int page_btn_numpad_cancel_src -> page_btn_numpad_cancel_src
    int page_btn_numpad_del_src -> page_btn_numpad_del_src
    int page_first_btn -> page_first_btn
    int page_first_default -> page_first_default
    int page_first_enabled -> page_first_enabled
    int page_first_focused -> page_first_focused
    int page_first_press -> page_first_press
    int page_last_btn -> page_last_btn
    int page_last_default -> page_last_default
    int page_last_enabled -> page_last_enabled
    int page_last_focuse -> page_last_focuse
    int page_last_press -> page_last_press
    int page_next_btn -> page_next_btn
    int page_next_default -> page_next_default
    int page_next_enabled -> page_next_enabled
    int page_next_focuse -> page_next_focuse
    int page_next_press -> page_next_press
    int page_number_text -> page_number_text
    int page_numpad -> page_numpad
    int page_numpad_0 -> page_numpad_0
    int page_numpad_1 -> page_numpad_1
    int page_numpad_2 -> page_numpad_2
    int page_numpad_3 -> page_numpad_3
    int page_numpad_4 -> page_numpad_4
    int page_numpad_5 -> page_numpad_5
    int page_numpad_6 -> page_numpad_6
    int page_numpad_7 -> page_numpad_7
    int page_numpad_8 -> page_numpad_8
    int page_numpad_9 -> page_numpad_9
    int page_numpad_cancel -> page_numpad_cancel
    int page_numpad_del -> page_numpad_del
    int page_numpad_enter -> page_numpad_enter
    int page_previous_btn -> page_previous_btn
    int page_previous_default -> page_previous_default
    int page_previous_enabled -> page_previous_enabled
    int page_previous_focused -> page_previous_focused
    int page_previous_press -> page_previous_press
    int subject_all -> subject_all
    int subject_biology -> subject_biology
    int subject_chemisty -> subject_chemisty
    int subject_chinese -> subject_chinese
    int subject_english -> subject_english
    int subject_geography -> subject_geography
    int subject_history -> subject_history
    int subject_maths -> subject_maths
    int subject_other -> subject_other
    int subject_physics -> subject_physics
    int subject_political -> subject_political
    int subject_science -> subject_science
    int subject_unknown -> subject_unknown
    int transparent -> transparent
    void <init>() -> <init>
com.hanceedu.common.data.DataInterface -> com.hanceedu.common.a.a:
com.hanceedu.common.data.DataInterface$DataListener -> com.hanceedu.common.a.b:
    void onData(com.hanceedu.common.data.DataInterface$Param) -> a
com.hanceedu.common.data.DataInterface$Param -> com.hanceedu.common.a.c:
    int msgId -> a
    int status -> b
    java.lang.String key -> c
    int ret -> d
    int i0 -> e
    int i1 -> f
    int i2 -> g
    java.lang.String s0 -> h
    java.lang.String s1 -> i
    java.lang.String s2 -> j
    void <init>() -> <init>
    void <init>(int) -> <init>
com.hanceedu.common.util.AppParser -> com.hanceedu.common.b.a:
    java.util.List parse(java.io.InputStream,java.lang.String) -> a
    java.util.List parse(org.xmlpull.v1.XmlPullParser) -> a
com.hanceedu.common.util.AppUtil -> com.hanceedu.common.b.b:
    java.util.List mAppList -> a
    void <init>() -> <init>
    void setAppList(java.util.List) -> a
    java.util.List getAppList(int) -> a
    boolean hasChild(int) -> b
com.hanceedu.common.util.DateInfo -> com.hanceedu.common.b.c:
    java.lang.String yyyymmdd -> a
    java.lang.String mmmdyyyy -> b
    java.lang.String mmdd -> c
    java.lang.String mmmd -> d
    java.lang.String md -> e
    long days -> f
    void <init>() -> <init>
com.hanceedu.common.util.DateUtil -> com.hanceedu.common.b.d:
    java.lang.String[] formats -> a
    void <clinit>() -> <clinit>
    void setDateInfo(com.hanceedu.common.util.DateInfo,long) -> a
    com.hanceedu.common.util.DateInfo[] getRecent7Days(long) -> a
    com.hanceedu.common.util.DateInfo[] getRecent7Weeks(long) -> b
    com.hanceedu.common.util.DateInfo[] getRecent7Months(long) -> c
    int getCurrentMinutesInDay() -> a
com.hanceedu.common.util.DrawableUtil -> com.hanceedu.common.b.e:
    int getImageId(java.lang.String) -> a
    android.graphics.drawable.Drawable resizeDrawable(android.content.Context,android.graphics.drawable.Drawable,int,int) -> a
    android.graphics.drawable.Drawable resizeDrawable(android.content.Context,android.graphics.drawable.Drawable,int,int,int) -> a
    android.graphics.Bitmap toRoundBitmap(android.graphics.Bitmap) -> a
    android.graphics.Bitmap scaleDownFile(java.lang.String,int,int) -> a
    android.graphics.drawable.Drawable getIconDrawable(android.content.Context,java.lang.String,java.lang.String,int) -> a
    int getLauncherLargeIconDensity(android.content.Context) -> a
    android.graphics.drawable.Drawable getLargeIconDrawable(android.content.Context,android.content.pm.ApplicationInfo,int) -> a
    android.graphics.drawable.Drawable getLargeIconDrawable(android.content.Context,java.lang.String,java.lang.String) -> a
com.hanceedu.common.util.FileSearcher -> com.hanceedu.common.b.f:
    void <init>() -> <init>
    java.util.List search(java.lang.String[],java.lang.String[],boolean) -> a
    void find(java.lang.String,com.hanceedu.common.util.FileSearcher$FileExtensionFilter,boolean,java.util.List) -> a
com.hanceedu.common.util.FileSearcher$FileExtensionFilter -> com.hanceedu.common.b.g:
    java.lang.String[] mExtension -> b
    com.hanceedu.common.util.FileSearcher this$0 -> a
    void <init>(com.hanceedu.common.util.FileSearcher,java.lang.String[]) -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
com.hanceedu.common.util.KeyInfo -> com.hanceedu.common.b.h:
    java.lang.String keyId -> a
    float left -> b
    float top -> c
    float right -> d
    float bottom -> e
    java.lang.String sourceId -> f
    void <init>() -> <init>
    java.lang.String getKeyId() -> a
    void setKeyId(java.lang.String) -> a
    float getLeft() -> b
    void setLeft(float) -> a
    float getTop() -> c
    void setTop(float) -> b
    float getRight() -> d
    void setRight(float) -> c
    float getBottom() -> e
    void setBottom(float) -> d
    java.lang.String getSourceId() -> f
    void setSourceId(java.lang.String) -> b
    java.lang.String toString() -> toString
com.hanceedu.common.util.PullParesXml -> com.hanceedu.common.b.i:
    android.content.Context context -> a
    void <init>(android.content.Context) -> <init>
    java.io.InputStream xmlToStream() -> a
    java.util.List parse() -> b
    com.hanceedu.common.util.KeyInfo byXY(float,float) -> a
com.hanceedu.common.util.StringUtil -> com.hanceedu.common.b.j:
    java.lang.String[] SUBJECTS -> a
    java.lang.String[] sections -> b
    java.lang.String[] volumns -> c
    void <clinit>() -> <clinit>
    java.lang.String getDir(java.lang.String) -> a
com.hanceedu.common.widget.Keys -> com.hanceedu.common.widget.Keys:
    android.graphics.Canvas mCanvas -> a
    android.graphics.Bitmap bitmap -> b
    com.hanceedu.common.util.PullParesXml xml -> c
    java.util.Map maps -> d
    com.hanceedu.common.widget.Keys$OnClickListener clickListener -> e
    java.lang.String LOG_TAG -> f
    void <clinit>() -> <clinit>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void init(android.content.Context) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void setOnClickListener(com.hanceedu.common.widget.Keys$OnClickListener) -> setOnClickListener
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    com.hanceedu.common.util.KeyInfo getKeyInfoByXY(float,float) -> a
com.hanceedu.common.widget.Keys$OnClickListener -> com.hanceedu.common.widget.a:
    void onClick(java.lang.String) -> onClick
org.apache.commons.logging.Log -> org.apache.a.a.a:
org.apache.http.ConnectionClosedException -> org.apache.http.ConnectionClosedException:
    void <init>(java.lang.String) -> <init>
org.apache.http.ConnectionReuseStrategy -> org.apache.http.ConnectionReuseStrategy:
    boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> keepAlive
org.apache.http.FormattedHeader -> org.apache.http.FormattedHeader:
    org.apache.http.util.CharArrayBuffer getBuffer() -> getBuffer
    int getValuePos() -> getValuePos
org.apache.http.Header -> org.apache.http.Header:
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    org.apache.http.HeaderElement[] getElements() -> getElements
org.apache.http.HeaderElement -> org.apache.http.HeaderElement:
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    org.apache.http.NameValuePair[] getParameters() -> getParameters
    org.apache.http.NameValuePair getParameterByName(java.lang.String) -> getParameterByName
    int getParameterCount() -> getParameterCount
    org.apache.http.NameValuePair getParameter(int) -> getParameter
org.apache.http.HeaderElementIterator -> org.apache.http.HeaderElementIterator:
    boolean hasNext() -> hasNext
    org.apache.http.HeaderElement nextElement() -> nextElement
org.apache.http.HeaderIterator -> org.apache.http.HeaderIterator:
    boolean hasNext() -> hasNext
    org.apache.http.Header nextHeader() -> nextHeader
org.apache.http.HttpClientConnection -> org.apache.http.HttpClientConnection:
    boolean isResponseAvailable(int) -> isResponseAvailable
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void receiveResponseEntity(org.apache.http.HttpResponse) -> receiveResponseEntity
    void flush() -> flush
org.apache.http.HttpConnection -> org.apache.http.HttpConnection:
    void close() -> close
    boolean isOpen() -> isOpen
    boolean isStale() -> isStale
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    void shutdown() -> shutdown
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
org.apache.http.HttpConnectionMetrics -> org.apache.http.HttpConnectionMetrics:
    long getRequestCount() -> getRequestCount
    long getResponseCount() -> getResponseCount
    long getSentBytesCount() -> getSentBytesCount
    long getReceivedBytesCount() -> getReceivedBytesCount
    java.lang.Object getMetric(java.lang.String) -> getMetric
    void reset() -> reset
org.apache.http.HttpEntity -> org.apache.http.HttpEntity:
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    void consumeContent() -> consumeContent
org.apache.http.HttpEntityEnclosingRequest -> org.apache.http.HttpEntityEnclosingRequest:
    boolean expectContinue() -> expectContinue
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    org.apache.http.HttpEntity getEntity() -> getEntity
org.apache.http.HttpException -> org.apache.http.HttpException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.HttpHost -> org.apache.http.HttpHost:
    java.lang.String DEFAULT_SCHEME_NAME -> DEFAULT_SCHEME_NAME
    java.lang.String hostname -> hostname
    java.lang.String lcHostname -> lcHostname
    int port -> port
    java.lang.String schemeName -> schemeName
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(org.apache.http.HttpHost) -> <init>
    java.lang.String getHostName() -> getHostName
    int getPort() -> getPort
    java.lang.String getSchemeName() -> getSchemeName
    java.lang.String toURI() -> toURI
    java.lang.String toHostString() -> toHostString
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object clone() -> clone
org.apache.http.HttpInetConnection -> org.apache.http.HttpInetConnection:
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
org.apache.http.HttpMessage -> org.apache.http.HttpMessage:
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    boolean containsHeader(java.lang.String) -> containsHeader
    org.apache.http.Header[] getHeaders(java.lang.String) -> getHeaders
    org.apache.http.Header getFirstHeader(java.lang.String) -> getFirstHeader
    org.apache.http.Header getLastHeader(java.lang.String) -> getLastHeader
    org.apache.http.Header[] getAllHeaders() -> getAllHeaders
    void addHeader(org.apache.http.Header) -> addHeader
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void setHeader(org.apache.http.Header) -> setHeader
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    void setHeaders(org.apache.http.Header[]) -> setHeaders
    void removeHeader(org.apache.http.Header) -> removeHeader
    void removeHeaders(java.lang.String) -> removeHeaders
    org.apache.http.HeaderIterator headerIterator() -> headerIterator
    org.apache.http.HeaderIterator headerIterator(java.lang.String) -> headerIterator
    org.apache.http.params.HttpParams getParams() -> getParams
    void setParams(org.apache.http.params.HttpParams) -> setParams
org.apache.http.HttpRequest -> org.apache.http.HttpRequest:
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
org.apache.http.HttpRequestFactory -> org.apache.http.HttpRequestFactory:
    org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine) -> newHttpRequest
    org.apache.http.HttpRequest newHttpRequest(java.lang.String,java.lang.String) -> newHttpRequest
org.apache.http.HttpRequestInterceptor -> org.apache.http.HttpRequestInterceptor:
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.HttpResponse -> org.apache.http.HttpResponse:
    org.apache.http.StatusLine getStatusLine() -> getStatusLine
    void setStatusLine(org.apache.http.StatusLine) -> setStatusLine
    void setStatusLine(org.apache.http.ProtocolVersion,int) -> setStatusLine
    void setStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String) -> setStatusLine
    void setStatusCode(int) -> setStatusCode
    void setReasonPhrase(java.lang.String) -> setReasonPhrase
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    java.util.Locale getLocale() -> getLocale
    void setLocale(java.util.Locale) -> setLocale
org.apache.http.HttpResponseFactory -> org.apache.http.HttpResponseFactory:
    org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext) -> newHttpResponse
    org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine,org.apache.http.protocol.HttpContext) -> newHttpResponse
org.apache.http.HttpResponseInterceptor -> org.apache.http.HttpResponseInterceptor:
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.HttpServerConnection -> org.apache.http.HttpServerConnection:
    org.apache.http.HttpRequest receiveRequestHeader() -> receiveRequestHeader
    void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> receiveRequestEntity
    void sendResponseHeader(org.apache.http.HttpResponse) -> sendResponseHeader
    void sendResponseEntity(org.apache.http.HttpResponse) -> sendResponseEntity
    void flush() -> flush
org.apache.http.HttpStatus -> org.apache.http.HttpStatus:
    int SC_ACCEPTED -> SC_ACCEPTED
    int SC_BAD_GATEWAY -> SC_BAD_GATEWAY
    int SC_BAD_REQUEST -> SC_BAD_REQUEST
    int SC_CONFLICT -> SC_CONFLICT
    int SC_CONTINUE -> SC_CONTINUE
    int SC_CREATED -> SC_CREATED
    int SC_EXPECTATION_FAILED -> SC_EXPECTATION_FAILED
    int SC_FAILED_DEPENDENCY -> SC_FAILED_DEPENDENCY
    int SC_FORBIDDEN -> SC_FORBIDDEN
    int SC_GATEWAY_TIMEOUT -> SC_GATEWAY_TIMEOUT
    int SC_GONE -> SC_GONE
    int SC_HTTP_VERSION_NOT_SUPPORTED -> SC_HTTP_VERSION_NOT_SUPPORTED
    int SC_INSUFFICIENT_SPACE_ON_RESOURCE -> SC_INSUFFICIENT_SPACE_ON_RESOURCE
    int SC_INSUFFICIENT_STORAGE -> SC_INSUFFICIENT_STORAGE
    int SC_INTERNAL_SERVER_ERROR -> SC_INTERNAL_SERVER_ERROR
    int SC_LENGTH_REQUIRED -> SC_LENGTH_REQUIRED
    int SC_LOCKED -> SC_LOCKED
    int SC_METHOD_FAILURE -> SC_METHOD_FAILURE
    int SC_METHOD_NOT_ALLOWED -> SC_METHOD_NOT_ALLOWED
    int SC_MOVED_PERMANENTLY -> SC_MOVED_PERMANENTLY
    int SC_MOVED_TEMPORARILY -> SC_MOVED_TEMPORARILY
    int SC_MULTIPLE_CHOICES -> SC_MULTIPLE_CHOICES
    int SC_MULTI_STATUS -> SC_MULTI_STATUS
    int SC_NON_AUTHORITATIVE_INFORMATION -> SC_NON_AUTHORITATIVE_INFORMATION
    int SC_NOT_ACCEPTABLE -> SC_NOT_ACCEPTABLE
    int SC_NOT_FOUND -> SC_NOT_FOUND
    int SC_NOT_IMPLEMENTED -> SC_NOT_IMPLEMENTED
    int SC_NOT_MODIFIED -> SC_NOT_MODIFIED
    int SC_NO_CONTENT -> SC_NO_CONTENT
    int SC_OK -> SC_OK
    int SC_PARTIAL_CONTENT -> SC_PARTIAL_CONTENT
    int SC_PAYMENT_REQUIRED -> SC_PAYMENT_REQUIRED
    int SC_PRECONDITION_FAILED -> SC_PRECONDITION_FAILED
    int SC_PROCESSING -> SC_PROCESSING
    int SC_PROXY_AUTHENTICATION_REQUIRED -> SC_PROXY_AUTHENTICATION_REQUIRED
    int SC_REQUESTED_RANGE_NOT_SATISFIABLE -> SC_REQUESTED_RANGE_NOT_SATISFIABLE
    int SC_REQUEST_TIMEOUT -> SC_REQUEST_TIMEOUT
    int SC_REQUEST_TOO_LONG -> SC_REQUEST_TOO_LONG
    int SC_REQUEST_URI_TOO_LONG -> SC_REQUEST_URI_TOO_LONG
    int SC_RESET_CONTENT -> SC_RESET_CONTENT
    int SC_SEE_OTHER -> SC_SEE_OTHER
    int SC_SERVICE_UNAVAILABLE -> SC_SERVICE_UNAVAILABLE
    int SC_SWITCHING_PROTOCOLS -> SC_SWITCHING_PROTOCOLS
    int SC_TEMPORARY_REDIRECT -> SC_TEMPORARY_REDIRECT
    int SC_UNAUTHORIZED -> SC_UNAUTHORIZED
    int SC_UNPROCESSABLE_ENTITY -> SC_UNPROCESSABLE_ENTITY
    int SC_UNSUPPORTED_MEDIA_TYPE -> SC_UNSUPPORTED_MEDIA_TYPE
    int SC_USE_PROXY -> SC_USE_PROXY
org.apache.http.HttpVersion -> org.apache.http.HttpVersion:
    java.lang.String HTTP -> HTTP
    org.apache.http.HttpVersion HTTP_0_9 -> HTTP_0_9
    org.apache.http.HttpVersion HTTP_1_0 -> HTTP_1_0
    org.apache.http.HttpVersion HTTP_1_1 -> HTTP_1_1
    void <init>(int,int) -> <init>
    org.apache.http.ProtocolVersion forVersion(int,int) -> forVersion
    void <clinit>() -> <clinit>
org.apache.http.MalformedChunkCodingException -> org.apache.http.MalformedChunkCodingException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.apache.http.MethodNotSupportedException -> org.apache.http.MethodNotSupportedException:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.NameValuePair -> org.apache.http.NameValuePair:
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
org.apache.http.NoHttpResponseException -> org.apache.http.NoHttpResponseException:
    void <init>(java.lang.String) -> <init>
org.apache.http.ParseException -> org.apache.http.ParseException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.apache.http.ProtocolException -> org.apache.http.ProtocolException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.ProtocolVersion -> org.apache.http.ProtocolVersion:
    int major -> major
    int minor -> minor
    java.lang.String protocol -> protocol
    void <init>(java.lang.String,int,int) -> <init>
    java.lang.String getProtocol() -> getProtocol
    int getMajor() -> getMajor
    int getMinor() -> getMinor
    org.apache.http.ProtocolVersion forVersion(int,int) -> forVersion
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isComparable(org.apache.http.ProtocolVersion) -> isComparable
    int compareToVersion(org.apache.http.ProtocolVersion) -> compareToVersion
    boolean greaterEquals(org.apache.http.ProtocolVersion) -> greaterEquals
    boolean lessEquals(org.apache.http.ProtocolVersion) -> lessEquals
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.ReasonPhraseCatalog -> org.apache.http.ReasonPhraseCatalog:
    java.lang.String getReason(int,java.util.Locale) -> getReason
org.apache.http.RequestLine -> org.apache.http.RequestLine:
    java.lang.String getMethod() -> getMethod
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.lang.String getUri() -> getUri
org.apache.http.StatusLine -> org.apache.http.StatusLine:
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    int getStatusCode() -> getStatusCode
    java.lang.String getReasonPhrase() -> getReasonPhrase
org.apache.http.TokenIterator -> org.apache.http.TokenIterator:
    boolean hasNext() -> hasNext
    java.lang.String nextToken() -> nextToken
org.apache.http.UnsupportedHttpVersionException -> org.apache.http.UnsupportedHttpVersionException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.apache.http.auth.AUTH -> org.apache.http.auth.AUTH:
    java.lang.String PROXY_AUTH -> PROXY_AUTH
    java.lang.String PROXY_AUTH_RESP -> PROXY_AUTH_RESP
    java.lang.String WWW_AUTH -> WWW_AUTH
    java.lang.String WWW_AUTH_RESP -> WWW_AUTH_RESP
    void <init>() -> <init>
org.apache.http.auth.AuthScheme -> org.apache.http.auth.AuthScheme:
    void processChallenge(org.apache.http.Header) -> processChallenge
    java.lang.String getSchemeName() -> getSchemeName
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
    boolean isConnectionBased() -> isConnectionBased
    boolean isComplete() -> isComplete
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
org.apache.http.auth.AuthSchemeFactory -> org.apache.http.auth.AuthSchemeFactory:
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.auth.AuthSchemeRegistry -> org.apache.http.auth.AuthSchemeRegistry:
    void <init>() -> <init>
    void register(java.lang.String,org.apache.http.auth.AuthSchemeFactory) -> register
    void unregister(java.lang.String) -> unregister
    org.apache.http.auth.AuthScheme getAuthScheme(java.lang.String,org.apache.http.params.HttpParams) -> getAuthScheme
    java.util.List getSchemeNames() -> getSchemeNames
    void setItems(java.util.Map) -> setItems
org.apache.http.auth.AuthScope -> org.apache.http.auth.AuthScope:
    org.apache.http.auth.AuthScope ANY -> ANY
    java.lang.String ANY_HOST -> ANY_HOST
    int ANY_PORT -> ANY_PORT
    java.lang.String ANY_REALM -> ANY_REALM
    java.lang.String ANY_SCHEME -> ANY_SCHEME
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <init>(java.lang.String,int) -> <init>
    void <init>(org.apache.http.auth.AuthScope) -> <init>
    java.lang.String getHost() -> getHost
    int getPort() -> getPort
    java.lang.String getRealm() -> getRealm
    java.lang.String getScheme() -> getScheme
    int match(org.apache.http.auth.AuthScope) -> match
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
org.apache.http.auth.AuthState -> org.apache.http.auth.AuthState:
    void <init>() -> <init>
    void invalidate() -> invalidate
    boolean isValid() -> isValid
    void setAuthScheme(org.apache.http.auth.AuthScheme) -> setAuthScheme
    org.apache.http.auth.AuthScheme getAuthScheme() -> getAuthScheme
    org.apache.http.auth.Credentials getCredentials() -> getCredentials
    void setCredentials(org.apache.http.auth.Credentials) -> setCredentials
    org.apache.http.auth.AuthScope getAuthScope() -> getAuthScope
    void setAuthScope(org.apache.http.auth.AuthScope) -> setAuthScope
    java.lang.String toString() -> toString
org.apache.http.auth.AuthenticationException -> org.apache.http.auth.AuthenticationException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.auth.BasicUserPrincipal -> org.apache.http.auth.BasicUserPrincipal:
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.Credentials -> org.apache.http.auth.Credentials:
    java.security.Principal getUserPrincipal() -> getUserPrincipal
    java.lang.String getPassword() -> getPassword
org.apache.http.auth.InvalidCredentialsException -> org.apache.http.auth.InvalidCredentialsException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.auth.MalformedChallengeException -> org.apache.http.auth.MalformedChallengeException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.auth.NTCredentials -> org.apache.http.auth.NTCredentials:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.security.Principal getUserPrincipal() -> getUserPrincipal
    java.lang.String getUserName() -> getUserName
    java.lang.String getPassword() -> getPassword
    java.lang.String getDomain() -> getDomain
    java.lang.String getWorkstation() -> getWorkstation
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.NTUserPrincipal -> org.apache.http.auth.NTUserPrincipal:
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getDomain() -> getDomain
    java.lang.String getUsername() -> getUsername
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.UsernamePasswordCredentials -> org.apache.http.auth.UsernamePasswordCredentials:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.security.Principal getUserPrincipal() -> getUserPrincipal
    java.lang.String getUserName() -> getUserName
    java.lang.String getPassword() -> getPassword
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.params.AuthPNames -> org.apache.http.auth.params.AuthPNames:
    java.lang.String CREDENTIAL_CHARSET -> CREDENTIAL_CHARSET
org.apache.http.auth.params.AuthParamBean -> org.apache.http.auth.params.AuthParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setCredentialCharset(java.lang.String) -> setCredentialCharset
org.apache.http.auth.params.AuthParams -> org.apache.http.auth.params.AuthParams:
    void <init>() -> <init>
    java.lang.String getCredentialCharset(org.apache.http.params.HttpParams) -> getCredentialCharset
    void setCredentialCharset(org.apache.http.params.HttpParams,java.lang.String) -> setCredentialCharset
org.apache.http.client.AuthenticationHandler -> org.apache.http.client.AuthenticationHandler:
    boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> selectScheme
org.apache.http.client.CircularRedirectException -> org.apache.http.client.CircularRedirectException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.client.ClientProtocolException -> org.apache.http.client.ClientProtocolException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.client.CookieStore -> org.apache.http.client.CookieStore:
    void addCookie(org.apache.http.cookie.Cookie) -> addCookie
    java.util.List getCookies() -> getCookies
    boolean clearExpired(java.util.Date) -> clearExpired
    void clear() -> clear
org.apache.http.client.CredentialsProvider -> org.apache.http.client.CredentialsProvider:
    void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials) -> setCredentials
    org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope) -> getCredentials
    void clear() -> clear
org.apache.http.client.HttpClient -> org.apache.http.client.HttpClient:
    org.apache.http.params.HttpParams getParams() -> getParams
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
org.apache.http.client.HttpRequestRetryHandler -> org.apache.http.client.HttpRequestRetryHandler:
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
org.apache.http.client.HttpResponseException -> org.apache.http.client.HttpResponseException:
    void <init>(int,java.lang.String) -> <init>
    int getStatusCode() -> getStatusCode
org.apache.http.client.NonRepeatableRequestException -> org.apache.http.client.NonRepeatableRequestException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.apache.http.client.RedirectException -> org.apache.http.client.RedirectException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.client.RedirectHandler -> org.apache.http.client.RedirectHandler:
    boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirectRequested
    java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getLocationURI
org.apache.http.client.RequestDirector -> org.apache.http.client.RequestDirector:
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
org.apache.http.client.ResponseHandler -> org.apache.http.client.ResponseHandler:
    java.lang.Object handleResponse(org.apache.http.HttpResponse) -> handleResponse
org.apache.http.client.UserTokenHandler -> org.apache.http.client.UserTokenHandler:
    java.lang.Object getUserToken(org.apache.http.protocol.HttpContext) -> getUserToken
org.apache.http.client.entity.UrlEncodedFormEntity -> org.apache.http.client.entity.UrlEncodedFormEntity:
    void <init>(java.util.List,java.lang.String) -> <init>
    void <init>(java.util.List) -> <init>
org.apache.http.client.methods.AbortableHttpRequest -> org.apache.http.client.methods.AbortableHttpRequest:
    void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest) -> setConnectionRequest
    void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger) -> setReleaseTrigger
    void abort() -> abort
org.apache.http.client.methods.HttpDelete -> org.apache.http.client.methods.HttpDelete:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpEntityEnclosingRequestBase -> org.apache.http.client.methods.HttpEntityEnclosingRequestBase:
    void <init>() -> <init>
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
    java.lang.Object clone() -> clone
org.apache.http.client.methods.HttpGet -> org.apache.http.client.methods.HttpGet:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpHead -> org.apache.http.client.methods.HttpHead:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpOptions -> org.apache.http.client.methods.HttpOptions:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
    java.util.Set getAllowedMethods(org.apache.http.HttpResponse) -> getAllowedMethods
org.apache.http.client.methods.HttpPost -> org.apache.http.client.methods.HttpPost:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpPut -> org.apache.http.client.methods.HttpPut:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpRequestBase -> org.apache.http.client.methods.HttpRequestBase:
    void <init>() -> <init>
    java.lang.String getMethod() -> getMethod
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.net.URI getURI() -> getURI
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
    void setURI(java.net.URI) -> setURI
    void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest) -> setConnectionRequest
    void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger) -> setReleaseTrigger
    void abort() -> abort
    boolean isAborted() -> isAborted
    java.lang.Object clone() -> clone
org.apache.http.client.methods.HttpTrace -> org.apache.http.client.methods.HttpTrace:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpUriRequest -> org.apache.http.client.methods.HttpUriRequest:
    java.lang.String getMethod() -> getMethod
    java.net.URI getURI() -> getURI
    void abort() -> abort
    boolean isAborted() -> isAborted
org.apache.http.client.params.AllClientPNames -> org.apache.http.client.params.AllClientPNames:
org.apache.http.client.params.AuthPolicy -> org.apache.http.client.params.AuthPolicy:
    java.lang.String BASIC -> BASIC
    java.lang.String DIGEST -> DIGEST
    java.lang.String NTLM -> NTLM
    void <init>() -> <init>
org.apache.http.client.params.ClientPNames -> org.apache.http.client.params.ClientPNames:
    java.lang.String ALLOW_CIRCULAR_REDIRECTS -> ALLOW_CIRCULAR_REDIRECTS
    java.lang.String CONNECTION_MANAGER_FACTORY -> CONNECTION_MANAGER_FACTORY
    java.lang.String CONNECTION_MANAGER_FACTORY_CLASS_NAME -> CONNECTION_MANAGER_FACTORY_CLASS_NAME
    java.lang.String COOKIE_POLICY -> COOKIE_POLICY
    java.lang.String DEFAULT_HEADERS -> DEFAULT_HEADERS
    java.lang.String DEFAULT_HOST -> DEFAULT_HOST
    java.lang.String HANDLE_AUTHENTICATION -> HANDLE_AUTHENTICATION
    java.lang.String HANDLE_REDIRECTS -> HANDLE_REDIRECTS
    java.lang.String MAX_REDIRECTS -> MAX_REDIRECTS
    java.lang.String REJECT_RELATIVE_REDIRECT -> REJECT_RELATIVE_REDIRECT
    java.lang.String VIRTUAL_HOST -> VIRTUAL_HOST
org.apache.http.client.params.ClientParamBean -> org.apache.http.client.params.ClientParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setConnectionManagerFactoryClassName(java.lang.String) -> setConnectionManagerFactoryClassName
    void setConnectionManagerFactory(org.apache.http.conn.ClientConnectionManagerFactory) -> setConnectionManagerFactory
    void setHandleRedirects(boolean) -> setHandleRedirects
    void setRejectRelativeRedirect(boolean) -> setRejectRelativeRedirect
    void setMaxRedirects(int) -> setMaxRedirects
    void setAllowCircularRedirects(boolean) -> setAllowCircularRedirects
    void setHandleAuthentication(boolean) -> setHandleAuthentication
    void setCookiePolicy(java.lang.String) -> setCookiePolicy
    void setVirtualHost(org.apache.http.HttpHost) -> setVirtualHost
    void setDefaultHeaders(java.util.Collection) -> setDefaultHeaders
    void setDefaultHost(org.apache.http.HttpHost) -> setDefaultHost
org.apache.http.client.params.CookiePolicy -> org.apache.http.client.params.CookiePolicy:
    java.lang.String BEST_MATCH -> BEST_MATCH
    java.lang.String BROWSER_COMPATIBILITY -> BROWSER_COMPATIBILITY
    java.lang.String NETSCAPE -> NETSCAPE
    java.lang.String RFC_2109 -> RFC_2109
    java.lang.String RFC_2965 -> RFC_2965
    void <init>() -> <init>
org.apache.http.client.params.HttpClientParams -> org.apache.http.client.params.HttpClientParams:
    void <init>() -> <init>
    boolean isRedirecting(org.apache.http.params.HttpParams) -> isRedirecting
    void setRedirecting(org.apache.http.params.HttpParams,boolean) -> setRedirecting
    boolean isAuthenticating(org.apache.http.params.HttpParams) -> isAuthenticating
    void setAuthenticating(org.apache.http.params.HttpParams,boolean) -> setAuthenticating
    java.lang.String getCookiePolicy(org.apache.http.params.HttpParams) -> getCookiePolicy
    void setCookiePolicy(org.apache.http.params.HttpParams,java.lang.String) -> setCookiePolicy
org.apache.http.client.protocol.ClientContext -> org.apache.http.client.protocol.ClientContext:
    java.lang.String AUTHSCHEME_REGISTRY -> AUTHSCHEME_REGISTRY
    java.lang.String AUTH_SCHEME_PREF -> AUTH_SCHEME_PREF
    java.lang.String COOKIESPEC_REGISTRY -> COOKIESPEC_REGISTRY
    java.lang.String COOKIE_ORIGIN -> COOKIE_ORIGIN
    java.lang.String COOKIE_SPEC -> COOKIE_SPEC
    java.lang.String COOKIE_STORE -> COOKIE_STORE
    java.lang.String CREDS_PROVIDER -> CREDS_PROVIDER
    java.lang.String PROXY_AUTH_STATE -> PROXY_AUTH_STATE
    java.lang.String TARGET_AUTH_STATE -> TARGET_AUTH_STATE
    java.lang.String USER_TOKEN -> USER_TOKEN
org.apache.http.client.protocol.ClientContextConfigurer -> org.apache.http.client.protocol.ClientContextConfigurer:
    void <init>(org.apache.http.protocol.HttpContext) -> <init>
    void setCookieSpecRegistry(org.apache.http.cookie.CookieSpecRegistry) -> setCookieSpecRegistry
    void setAuthSchemeRegistry(org.apache.http.auth.AuthSchemeRegistry) -> setAuthSchemeRegistry
    void setCookieStore(org.apache.http.client.CookieStore) -> setCookieStore
    void setCredentialsProvider(org.apache.http.client.CredentialsProvider) -> setCredentialsProvider
    void setAuthSchemePref(java.util.List) -> setAuthSchemePref
org.apache.http.client.protocol.RequestAddCookies -> org.apache.http.client.protocol.RequestAddCookies:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestDefaultHeaders -> org.apache.http.client.protocol.RequestDefaultHeaders:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestProxyAuthentication -> org.apache.http.client.protocol.RequestProxyAuthentication:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestTargetAuthentication -> org.apache.http.client.protocol.RequestTargetAuthentication:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.ResponseProcessCookies -> org.apache.http.client.protocol.ResponseProcessCookies:
    void <init>() -> <init>
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.utils.CloneUtils -> org.apache.http.client.utils.CloneUtils:
    void <init>() -> <init>
    java.lang.Object clone(java.lang.Object) -> clone
org.apache.http.client.utils.URIUtils -> org.apache.http.client.utils.URIUtils:
    void <init>() -> <init>
    java.net.URI createURI(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String) -> createURI
    java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean) -> rewriteURI
    java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost) -> rewriteURI
    java.net.URI resolve(java.net.URI,java.lang.String) -> resolve
    java.net.URI resolve(java.net.URI,java.net.URI) -> resolve
org.apache.http.client.utils.URLEncodedUtils -> org.apache.http.client.utils.URLEncodedUtils:
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    void <init>() -> <init>
    java.util.List parse(java.net.URI,java.lang.String) -> parse
    java.util.List parse(org.apache.http.HttpEntity) -> parse
    boolean isEncoded(org.apache.http.HttpEntity) -> isEncoded
    void parse(java.util.List,java.util.Scanner,java.lang.String) -> parse
    java.lang.String format(java.util.List,java.lang.String) -> format
org.apache.http.conn.BasicEofSensorWatcher -> org.apache.http.conn.BasicEofSensorWatcher:
    boolean attemptReuse -> attemptReuse
    org.apache.http.conn.ManagedClientConnection managedConn -> managedConn
    void <init>(org.apache.http.conn.ManagedClientConnection,boolean) -> <init>
    boolean eofDetected(java.io.InputStream) -> eofDetected
    boolean streamClosed(java.io.InputStream) -> streamClosed
    boolean streamAbort(java.io.InputStream) -> streamAbort
org.apache.http.conn.BasicManagedEntity -> org.apache.http.conn.BasicManagedEntity:
    boolean attemptReuse -> attemptReuse
    org.apache.http.conn.ManagedClientConnection managedConn -> managedConn
    void <init>(org.apache.http.HttpEntity,org.apache.http.conn.ManagedClientConnection,boolean) -> <init>
    boolean isRepeatable() -> isRepeatable
    java.io.InputStream getContent() -> getContent
    void consumeContent() -> consumeContent
    void writeTo(java.io.OutputStream) -> writeTo
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
    boolean eofDetected(java.io.InputStream) -> eofDetected
    boolean streamClosed(java.io.InputStream) -> streamClosed
    boolean streamAbort(java.io.InputStream) -> streamAbort
    void releaseManagedConnection() -> releaseManagedConnection
org.apache.http.conn.ClientConnectionManager -> org.apache.http.conn.ClientConnectionManager:
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    void shutdown() -> shutdown
org.apache.http.conn.ClientConnectionManagerFactory -> org.apache.http.conn.ClientConnectionManagerFactory:
    org.apache.http.conn.ClientConnectionManager newInstance(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry) -> newInstance
org.apache.http.conn.ClientConnectionOperator -> org.apache.http.conn.ClientConnectionOperator:
    org.apache.http.conn.OperatedClientConnection createConnection() -> createConnection
    void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> openConnection
    void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> updateSecureConnection
org.apache.http.conn.ClientConnectionRequest -> org.apache.http.conn.ClientConnectionRequest:
    org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> getConnection
    void abortRequest() -> abortRequest
org.apache.http.conn.ConnectTimeoutException -> org.apache.http.conn.ConnectTimeoutException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.apache.http.conn.ConnectionKeepAliveStrategy -> org.apache.http.conn.ConnectionKeepAliveStrategy:
    long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getKeepAliveDuration
org.apache.http.conn.ConnectionPoolTimeoutException -> org.apache.http.conn.ConnectionPoolTimeoutException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.apache.http.conn.ConnectionReleaseTrigger -> org.apache.http.conn.ConnectionReleaseTrigger:
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
org.apache.http.conn.EofSensorInputStream -> org.apache.http.conn.EofSensorInputStream:
    java.io.InputStream wrappedStream -> wrappedStream
    void <init>(java.io.InputStream,org.apache.http.conn.EofSensorWatcher) -> <init>
    boolean isReadAllowed() -> isReadAllowed
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    int available() -> available
    void close() -> close
    void checkEOF(int) -> checkEOF
    void checkClose() -> checkClose
    void checkAbort() -> checkAbort
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
org.apache.http.conn.EofSensorWatcher -> org.apache.http.conn.EofSensorWatcher:
    boolean eofDetected(java.io.InputStream) -> eofDetected
    boolean streamClosed(java.io.InputStream) -> streamClosed
    boolean streamAbort(java.io.InputStream) -> streamAbort
org.apache.http.conn.HttpHostConnectException -> org.apache.http.conn.HttpHostConnectException:
    void <init>(org.apache.http.HttpHost,java.net.ConnectException) -> <init>
    org.apache.http.HttpHost getHost() -> getHost
org.apache.http.conn.ManagedClientConnection -> org.apache.http.conn.ManagedClientConnection:
    boolean isSecure() -> isSecure
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
    void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> open
    void tunnelTarget(boolean,org.apache.http.params.HttpParams) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> tunnelProxy
    void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> layerProtocol
    void markReusable() -> markReusable
    void unmarkReusable() -> unmarkReusable
    boolean isMarkedReusable() -> isMarkedReusable
    void setState(java.lang.Object) -> setState
    java.lang.Object getState() -> getState
    void setIdleDuration(long,java.util.concurrent.TimeUnit) -> setIdleDuration
org.apache.http.conn.MultihomePlainSocketFactory -> org.apache.http.conn.MultihomePlainSocketFactory:
    void <init>() -> <init>
    org.apache.http.conn.MultihomePlainSocketFactory getSocketFactory() -> getSocketFactory
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.http.conn.OperatedClientConnection -> org.apache.http.conn.OperatedClientConnection:
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    boolean isSecure() -> isSecure
    java.net.Socket getSocket() -> getSocket
    void opening(java.net.Socket,org.apache.http.HttpHost) -> opening
    void openCompleted(boolean,org.apache.http.params.HttpParams) -> openCompleted
    void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> update
org.apache.http.conn.params.ConnConnectionPNames -> org.apache.http.conn.params.ConnConnectionPNames:
    java.lang.String MAX_STATUS_LINE_GARBAGE -> MAX_STATUS_LINE_GARBAGE
org.apache.http.conn.params.ConnConnectionParamBean -> org.apache.http.conn.params.ConnConnectionParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setMaxStatusLineGarbage(int) -> setMaxStatusLineGarbage
org.apache.http.conn.params.ConnManagerPNames -> org.apache.http.conn.params.ConnManagerPNames:
    java.lang.String MAX_CONNECTIONS_PER_ROUTE -> MAX_CONNECTIONS_PER_ROUTE
    java.lang.String MAX_TOTAL_CONNECTIONS -> MAX_TOTAL_CONNECTIONS
    java.lang.String TIMEOUT -> TIMEOUT
org.apache.http.conn.params.ConnManagerParamBean -> org.apache.http.conn.params.ConnManagerParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setTimeout(long) -> setTimeout
    void setMaxTotalConnections(int) -> setMaxTotalConnections
    void setConnectionsPerRoute(org.apache.http.conn.params.ConnPerRouteBean) -> setConnectionsPerRoute
org.apache.http.conn.params.ConnManagerParams -> org.apache.http.conn.params.ConnManagerParams:
    int DEFAULT_MAX_TOTAL_CONNECTIONS -> DEFAULT_MAX_TOTAL_CONNECTIONS
    void <init>() -> <init>
    long getTimeout(org.apache.http.params.HttpParams) -> getTimeout
    void setTimeout(org.apache.http.params.HttpParams,long) -> setTimeout
    void setMaxConnectionsPerRoute(org.apache.http.params.HttpParams,org.apache.http.conn.params.ConnPerRoute) -> setMaxConnectionsPerRoute
    org.apache.http.conn.params.ConnPerRoute getMaxConnectionsPerRoute(org.apache.http.params.HttpParams) -> getMaxConnectionsPerRoute
    void setMaxTotalConnections(org.apache.http.params.HttpParams,int) -> setMaxTotalConnections
    int getMaxTotalConnections(org.apache.http.params.HttpParams) -> getMaxTotalConnections
org.apache.http.conn.params.ConnPerRoute -> org.apache.http.conn.params.ConnPerRoute:
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
org.apache.http.conn.params.ConnPerRouteBean -> org.apache.http.conn.params.ConnPerRouteBean:
    int DEFAULT_MAX_CONNECTIONS_PER_ROUTE -> DEFAULT_MAX_CONNECTIONS_PER_ROUTE
    void <init>(int) -> <init>
    void <init>() -> <init>
    int getDefaultMax() -> getDefaultMax
    void setDefaultMaxPerRoute(int) -> setDefaultMaxPerRoute
    void setMaxForRoute(org.apache.http.conn.routing.HttpRoute,int) -> setMaxForRoute
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
    void setMaxForRoutes(java.util.Map) -> setMaxForRoutes
org.apache.http.conn.params.ConnRoutePNames -> org.apache.http.conn.params.ConnRoutePNames:
    java.lang.String DEFAULT_PROXY -> DEFAULT_PROXY
    java.lang.String FORCED_ROUTE -> FORCED_ROUTE
    java.lang.String LOCAL_ADDRESS -> LOCAL_ADDRESS
org.apache.http.conn.params.ConnRouteParamBean -> org.apache.http.conn.params.ConnRouteParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setDefaultProxy(org.apache.http.HttpHost) -> setDefaultProxy
    void setLocalAddress(java.net.InetAddress) -> setLocalAddress
    void setForcedRoute(org.apache.http.conn.routing.HttpRoute) -> setForcedRoute
org.apache.http.conn.params.ConnRouteParams -> org.apache.http.conn.params.ConnRouteParams:
    org.apache.http.HttpHost NO_HOST -> NO_HOST
    org.apache.http.conn.routing.HttpRoute NO_ROUTE -> NO_ROUTE
    void <init>() -> <init>
    org.apache.http.HttpHost getDefaultProxy(org.apache.http.params.HttpParams) -> getDefaultProxy
    void setDefaultProxy(org.apache.http.params.HttpParams,org.apache.http.HttpHost) -> setDefaultProxy
    org.apache.http.conn.routing.HttpRoute getForcedRoute(org.apache.http.params.HttpParams) -> getForcedRoute
    void setForcedRoute(org.apache.http.params.HttpParams,org.apache.http.conn.routing.HttpRoute) -> setForcedRoute
    java.net.InetAddress getLocalAddress(org.apache.http.params.HttpParams) -> getLocalAddress
    void setLocalAddress(org.apache.http.params.HttpParams,java.net.InetAddress) -> setLocalAddress
    void <clinit>() -> <clinit>
org.apache.http.conn.routing.BasicRouteDirector -> org.apache.http.conn.routing.BasicRouteDirector:
    void <init>() -> <init>
    int nextStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> nextStep
    int firstStep(org.apache.http.conn.routing.RouteInfo) -> firstStep
    int directStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> directStep
    int proxiedStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> proxiedStep
org.apache.http.conn.routing.HttpRoute -> org.apache.http.conn.routing.HttpRoute:
    void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost[],boolean,org.apache.http.conn.routing.RouteInfo$TunnelType,org.apache.http.conn.routing.RouteInfo$LayerType) -> <init>
    void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean,org.apache.http.conn.routing.RouteInfo$TunnelType,org.apache.http.conn.routing.RouteInfo$LayerType) -> <init>
    void <init>(org.apache.http.HttpHost,java.net.InetAddress,boolean) -> <init>
    void <init>(org.apache.http.HttpHost) -> <init>
    void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean) -> <init>
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getHopCount() -> getHopCount
    org.apache.http.HttpHost getHopTarget(int) -> getHopTarget
    org.apache.http.HttpHost getProxyHost() -> getProxyHost
    org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType() -> getTunnelType
    boolean isTunnelled() -> isTunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType getLayerType() -> getLayerType
    boolean isLayered() -> isLayered
    boolean isSecure() -> isSecure
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.conn.routing.HttpRouteDirector -> org.apache.http.conn.routing.HttpRouteDirector:
    int COMPLETE -> COMPLETE
    int CONNECT_PROXY -> CONNECT_PROXY
    int CONNECT_TARGET -> CONNECT_TARGET
    int LAYER_PROTOCOL -> LAYER_PROTOCOL
    int TUNNEL_PROXY -> TUNNEL_PROXY
    int TUNNEL_TARGET -> TUNNEL_TARGET
    int UNREACHABLE -> UNREACHABLE
    int nextStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> nextStep
org.apache.http.conn.routing.HttpRoutePlanner -> org.apache.http.conn.routing.HttpRoutePlanner:
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
org.apache.http.conn.routing.RouteInfo -> org.apache.http.conn.routing.RouteInfo:
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getHopCount() -> getHopCount
    org.apache.http.HttpHost getHopTarget(int) -> getHopTarget
    org.apache.http.HttpHost getProxyHost() -> getProxyHost
    org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType() -> getTunnelType
    boolean isTunnelled() -> isTunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType getLayerType() -> getLayerType
    boolean isLayered() -> isLayered
    boolean isSecure() -> isSecure
org.apache.http.conn.routing.RouteInfo$LayerType -> org.apache.http.conn.routing.RouteInfo$LayerType:
    org.apache.http.conn.routing.RouteInfo$LayerType LAYERED -> LAYERED
    org.apache.http.conn.routing.RouteInfo$LayerType PLAIN -> PLAIN
    org.apache.http.conn.routing.RouteInfo$LayerType[] $VALUES -> $VALUES
    org.apache.http.conn.routing.RouteInfo$LayerType[] values() -> values
    org.apache.http.conn.routing.RouteInfo$LayerType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.apache.http.conn.routing.RouteInfo$TunnelType -> org.apache.http.conn.routing.RouteInfo$TunnelType:
    org.apache.http.conn.routing.RouteInfo$TunnelType PLAIN -> PLAIN
    org.apache.http.conn.routing.RouteInfo$TunnelType TUNNELLED -> TUNNELLED
    org.apache.http.conn.routing.RouteInfo$TunnelType[] $VALUES -> $VALUES
    org.apache.http.conn.routing.RouteInfo$TunnelType[] values() -> values
    org.apache.http.conn.routing.RouteInfo$TunnelType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.apache.http.conn.routing.RouteTracker -> org.apache.http.conn.routing.RouteTracker:
    void <init>(org.apache.http.HttpHost,java.net.InetAddress) -> <init>
    void <init>(org.apache.http.conn.routing.HttpRoute) -> <init>
    void connectTarget(boolean) -> connectTarget
    void connectProxy(org.apache.http.HttpHost,boolean) -> connectProxy
    void tunnelTarget(boolean) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean) -> tunnelProxy
    void layerProtocol(boolean) -> layerProtocol
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getHopCount() -> getHopCount
    org.apache.http.HttpHost getHopTarget(int) -> getHopTarget
    org.apache.http.HttpHost getProxyHost() -> getProxyHost
    boolean isConnected() -> isConnected
    org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType() -> getTunnelType
    boolean isTunnelled() -> isTunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType getLayerType() -> getLayerType
    boolean isLayered() -> isLayered
    boolean isSecure() -> isSecure
    org.apache.http.conn.routing.HttpRoute toRoute() -> toRoute
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.conn.scheme.HostNameResolver -> org.apache.http.conn.scheme.HostNameResolver:
    java.net.InetAddress resolve(java.lang.String) -> resolve
org.apache.http.conn.scheme.LayeredSocketFactory -> org.apache.http.conn.scheme.LayeredSocketFactory:
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
org.apache.http.conn.scheme.PlainSocketFactory -> org.apache.http.conn.scheme.PlainSocketFactory:
    void <init>(org.apache.http.conn.scheme.HostNameResolver) -> <init>
    void <init>() -> <init>
    org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory() -> getSocketFactory
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.http.conn.scheme.Scheme -> org.apache.http.conn.scheme.Scheme:
    void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int) -> <init>
    int getDefaultPort() -> getDefaultPort
    org.apache.http.conn.scheme.SocketFactory getSocketFactory() -> getSocketFactory
    java.lang.String getName() -> getName
    boolean isLayered() -> isLayered
    int resolvePort(int) -> resolvePort
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.http.conn.scheme.SchemeRegistry -> org.apache.http.conn.scheme.SchemeRegistry:
    void <init>() -> <init>
    org.apache.http.conn.scheme.Scheme getScheme(java.lang.String) -> getScheme
    org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost) -> getScheme
    org.apache.http.conn.scheme.Scheme get(java.lang.String) -> get
    org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme) -> register
    org.apache.http.conn.scheme.Scheme unregister(java.lang.String) -> unregister
    java.util.List getSchemeNames() -> getSchemeNames
    void setItems(java.util.Map) -> setItems
org.apache.http.conn.scheme.SocketFactory -> org.apache.http.conn.scheme.SocketFactory:
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
org.apache.http.conn.util.InetAddressUtils -> org.apache.http.conn.util.InetAddressUtils:
    void <init>() -> <init>
    boolean isIPv4Address(java.lang.String) -> isIPv4Address
    boolean isIPv6StdAddress(java.lang.String) -> isIPv6StdAddress
    boolean isIPv6HexCompressedAddress(java.lang.String) -> isIPv6HexCompressedAddress
    boolean isIPv6Address(java.lang.String) -> isIPv6Address
org.apache.http.cookie.ClientCookie -> org.apache.http.cookie.ClientCookie:
    java.lang.String COMMENTURL_ATTR -> COMMENTURL_ATTR
    java.lang.String COMMENT_ATTR -> COMMENT_ATTR
    java.lang.String DISCARD_ATTR -> DISCARD_ATTR
    java.lang.String DOMAIN_ATTR -> DOMAIN_ATTR
    java.lang.String EXPIRES_ATTR -> EXPIRES_ATTR
    java.lang.String MAX_AGE_ATTR -> MAX_AGE_ATTR
    java.lang.String PATH_ATTR -> PATH_ATTR
    java.lang.String PORT_ATTR -> PORT_ATTR
    java.lang.String SECURE_ATTR -> SECURE_ATTR
    java.lang.String VERSION_ATTR -> VERSION_ATTR
    java.lang.String getAttribute(java.lang.String) -> getAttribute
    boolean containsAttribute(java.lang.String) -> containsAttribute
org.apache.http.cookie.Cookie -> org.apache.http.cookie.Cookie:
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    java.lang.String getComment() -> getComment
    java.lang.String getCommentURL() -> getCommentURL
    java.util.Date getExpiryDate() -> getExpiryDate
    boolean isPersistent() -> isPersistent
    java.lang.String getDomain() -> getDomain
    java.lang.String getPath() -> getPath
    int[] getPorts() -> getPorts
    boolean isSecure() -> isSecure
    int getVersion() -> getVersion
    boolean isExpired(java.util.Date) -> isExpired
org.apache.http.cookie.CookieAttributeHandler -> org.apache.http.cookie.CookieAttributeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.cookie.CookieIdentityComparator -> org.apache.http.cookie.CookieIdentityComparator:
    void <init>() -> <init>
    int compare(org.apache.http.cookie.Cookie,org.apache.http.cookie.Cookie) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.http.cookie.CookieOrigin -> org.apache.http.cookie.CookieOrigin:
    void <init>(java.lang.String,int,java.lang.String,boolean) -> <init>
    java.lang.String getHost() -> getHost
    java.lang.String getPath() -> getPath
    int getPort() -> getPort
    boolean isSecure() -> isSecure
    java.lang.String toString() -> toString
org.apache.http.cookie.CookiePathComparator -> org.apache.http.cookie.CookiePathComparator:
    void <init>() -> <init>
    int compare(org.apache.http.cookie.Cookie,org.apache.http.cookie.Cookie) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.http.cookie.CookieSpec -> org.apache.http.cookie.CookieSpec:
    int getVersion() -> getVersion
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
    java.util.List formatCookies(java.util.List) -> formatCookies
    org.apache.http.Header getVersionHeader() -> getVersionHeader
org.apache.http.cookie.CookieSpecFactory -> org.apache.http.cookie.CookieSpecFactory:
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.cookie.CookieSpecRegistry -> org.apache.http.cookie.CookieSpecRegistry:
    void <init>() -> <init>
    void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory) -> register
    void unregister(java.lang.String) -> unregister
    org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String,org.apache.http.params.HttpParams) -> getCookieSpec
    org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String) -> getCookieSpec
    java.util.List getSpecNames() -> getSpecNames
    void setItems(java.util.Map) -> setItems
org.apache.http.cookie.MalformedCookieException -> org.apache.http.cookie.MalformedCookieException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.cookie.SM -> org.apache.http.cookie.SM:
    java.lang.String COOKIE -> COOKIE
    java.lang.String COOKIE2 -> COOKIE2
    java.lang.String SET_COOKIE -> SET_COOKIE
    java.lang.String SET_COOKIE2 -> SET_COOKIE2
org.apache.http.cookie.SetCookie -> org.apache.http.cookie.SetCookie:
    void setValue(java.lang.String) -> setValue
    void setComment(java.lang.String) -> setComment
    void setExpiryDate(java.util.Date) -> setExpiryDate
    void setDomain(java.lang.String) -> setDomain
    void setPath(java.lang.String) -> setPath
    void setSecure(boolean) -> setSecure
    void setVersion(int) -> setVersion
org.apache.http.cookie.SetCookie2 -> org.apache.http.cookie.SetCookie2:
    void setCommentURL(java.lang.String) -> setCommentURL
    void setPorts(int[]) -> setPorts
    void setDiscard(boolean) -> setDiscard
org.apache.http.cookie.params.CookieSpecPNames -> org.apache.http.cookie.params.CookieSpecPNames:
    java.lang.String DATE_PATTERNS -> DATE_PATTERNS
    java.lang.String SINGLE_COOKIE_HEADER -> SINGLE_COOKIE_HEADER
org.apache.http.cookie.params.CookieSpecParamBean -> org.apache.http.cookie.params.CookieSpecParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setDatePatterns(java.util.Collection) -> setDatePatterns
    void setSingleHeader(boolean) -> setSingleHeader
org.apache.http.entity.AbstractHttpEntity -> org.apache.http.entity.AbstractHttpEntity:
    boolean chunked -> chunked
    org.apache.http.Header contentEncoding -> contentEncoding
    org.apache.http.Header contentType -> contentType
    void <init>() -> <init>
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    boolean isChunked() -> isChunked
    void setContentType(org.apache.http.Header) -> setContentType
    void setContentType(java.lang.String) -> setContentType
    void setContentEncoding(org.apache.http.Header) -> setContentEncoding
    void setContentEncoding(java.lang.String) -> setContentEncoding
    void setChunked(boolean) -> setChunked
    void consumeContent() -> consumeContent
org.apache.http.entity.BasicHttpEntity -> org.apache.http.entity.BasicHttpEntity:
    void <init>() -> <init>
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    boolean isRepeatable() -> isRepeatable
    void setContentLength(long) -> setContentLength
    void setContent(java.io.InputStream) -> setContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    void consumeContent() -> consumeContent
org.apache.http.entity.BufferedHttpEntity -> org.apache.http.entity.BufferedHttpEntity:
    void <init>(org.apache.http.HttpEntity) -> <init>
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    boolean isChunked() -> isChunked
    boolean isRepeatable() -> isRepeatable
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
org.apache.http.entity.ByteArrayEntity -> org.apache.http.entity.ByteArrayEntity:
    byte[] content -> content
    void <init>(byte[]) -> <init>
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    java.lang.Object clone() -> clone
org.apache.http.entity.ContentLengthStrategy -> org.apache.http.entity.ContentLengthStrategy:
    int CHUNKED -> CHUNKED
    int IDENTITY -> IDENTITY
    long determineLength(org.apache.http.HttpMessage) -> determineLength
org.apache.http.entity.ContentProducer -> org.apache.http.entity.ContentProducer:
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.entity.EntityTemplate -> org.apache.http.entity.EntityTemplate:
    void <init>(org.apache.http.entity.ContentProducer) -> <init>
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    boolean isRepeatable() -> isRepeatable
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    void consumeContent() -> consumeContent
org.apache.http.entity.FileEntity -> org.apache.http.entity.FileEntity:
    java.io.File file -> file
    void <init>(java.io.File,java.lang.String) -> <init>
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    java.lang.Object clone() -> clone
org.apache.http.entity.HttpEntityWrapper -> org.apache.http.entity.HttpEntityWrapper:
    org.apache.http.HttpEntity wrappedEntity -> wrappedEntity
    void <init>(org.apache.http.HttpEntity) -> <init>
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    void consumeContent() -> consumeContent
org.apache.http.entity.InputStreamEntity -> org.apache.http.entity.InputStreamEntity:
    void <init>(java.io.InputStream,long) -> <init>
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    void consumeContent() -> consumeContent
org.apache.http.entity.SerializableEntity -> org.apache.http.entity.SerializableEntity:
    void <init>(java.io.Serializable,boolean) -> <init>
    java.io.InputStream getContent() -> getContent
    long getContentLength() -> getContentLength
    boolean isRepeatable() -> isRepeatable
    boolean isStreaming() -> isStreaming
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.entity.StringEntity -> org.apache.http.entity.StringEntity:
    byte[] content -> content
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String) -> <init>
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    java.lang.Object clone() -> clone
org.apache.http.impl.AbstractHttpClientConnection -> org.apache.http.impl.AbstractHttpClientConnection:
    void <init>() -> <init>
    void assertOpen() -> assertOpen
    org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer() -> createEntityDeserializer
    org.apache.http.impl.entity.EntitySerializer createEntitySerializer() -> createEntitySerializer
    org.apache.http.HttpResponseFactory createHttpResponseFactory() -> createHttpResponseFactory
    org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams) -> createResponseParser
    org.apache.http.io.HttpMessageWriter createRequestWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams) -> createRequestWriter
    void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams) -> init
    boolean isResponseAvailable(int) -> isResponseAvailable
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    void doFlush() -> doFlush
    void flush() -> flush
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void receiveResponseEntity(org.apache.http.HttpResponse) -> receiveResponseEntity
    boolean isStale() -> isStale
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
org.apache.http.impl.AbstractHttpServerConnection -> org.apache.http.impl.AbstractHttpServerConnection:
    void <init>() -> <init>
    void assertOpen() -> assertOpen
    org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer() -> createEntityDeserializer
    org.apache.http.impl.entity.EntitySerializer createEntitySerializer() -> createEntitySerializer
    org.apache.http.HttpRequestFactory createHttpRequestFactory() -> createHttpRequestFactory
    org.apache.http.io.HttpMessageParser createRequestParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams) -> createRequestParser
    org.apache.http.io.HttpMessageWriter createResponseWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams) -> createResponseWriter
    void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams) -> init
    org.apache.http.HttpRequest receiveRequestHeader() -> receiveRequestHeader
    void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> receiveRequestEntity
    void doFlush() -> doFlush
    void flush() -> flush
    void sendResponseHeader(org.apache.http.HttpResponse) -> sendResponseHeader
    void sendResponseEntity(org.apache.http.HttpResponse) -> sendResponseEntity
    boolean isStale() -> isStale
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
org.apache.http.impl.DefaultConnectionReuseStrategy -> org.apache.http.impl.DefaultConnectionReuseStrategy:
    void <init>() -> <init>
    boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> keepAlive
    org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator) -> createTokenIterator
org.apache.http.impl.DefaultHttpClientConnection -> org.apache.http.impl.DefaultHttpClientConnection:
    void <init>() -> <init>
    void bind(java.net.Socket,org.apache.http.params.HttpParams) -> bind
    java.lang.String toString() -> toString
org.apache.http.impl.DefaultHttpRequestFactory -> org.apache.http.impl.DefaultHttpRequestFactory:
    void <init>() -> <init>
    org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine) -> newHttpRequest
    org.apache.http.HttpRequest newHttpRequest(java.lang.String,java.lang.String) -> newHttpRequest
org.apache.http.impl.DefaultHttpResponseFactory -> org.apache.http.impl.DefaultHttpResponseFactory:
    org.apache.http.ReasonPhraseCatalog reasonCatalog -> reasonCatalog
    void <init>(org.apache.http.ReasonPhraseCatalog) -> <init>
    void <init>() -> <init>
    org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext) -> newHttpResponse
    org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine,org.apache.http.protocol.HttpContext) -> newHttpResponse
    java.util.Locale determineLocale(org.apache.http.protocol.HttpContext) -> determineLocale
org.apache.http.impl.DefaultHttpServerConnection -> org.apache.http.impl.DefaultHttpServerConnection:
    void <init>() -> <init>
    void bind(java.net.Socket,org.apache.http.params.HttpParams) -> bind
    java.lang.String toString() -> toString
org.apache.http.impl.EnglishReasonPhraseCatalog -> org.apache.http.impl.EnglishReasonPhraseCatalog:
    org.apache.http.impl.EnglishReasonPhraseCatalog INSTANCE -> INSTANCE
    void <init>() -> <init>
    java.lang.String getReason(int,java.util.Locale) -> getReason
    void <clinit>() -> <clinit>
org.apache.http.impl.HttpConnectionMetricsImpl -> org.apache.http.impl.HttpConnectionMetricsImpl:
    java.lang.String RECEIVED_BYTES_COUNT -> RECEIVED_BYTES_COUNT
    java.lang.String REQUEST_COUNT -> REQUEST_COUNT
    java.lang.String RESPONSE_COUNT -> RESPONSE_COUNT
    java.lang.String SENT_BYTES_COUNT -> SENT_BYTES_COUNT
    void <init>(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics) -> <init>
    long getReceivedBytesCount() -> getReceivedBytesCount
    long getSentBytesCount() -> getSentBytesCount
    long getRequestCount() -> getRequestCount
    void incrementRequestCount() -> incrementRequestCount
    long getResponseCount() -> getResponseCount
    void incrementResponseCount() -> incrementResponseCount
    java.lang.Object getMetric(java.lang.String) -> getMetric
    void setMetric(java.lang.String,java.lang.Object) -> setMetric
    void reset() -> reset
org.apache.http.impl.NoConnectionReuseStrategy -> org.apache.http.impl.NoConnectionReuseStrategy:
    void <init>() -> <init>
    boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> keepAlive
org.apache.http.impl.SocketHttpClientConnection -> org.apache.http.impl.SocketHttpClientConnection:
    void <init>() -> <init>
    void assertNotOpen() -> assertNotOpen
    void assertOpen() -> assertOpen
    org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionInputBuffer
    org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionOutputBuffer
    void bind(java.net.Socket,org.apache.http.params.HttpParams) -> bind
    boolean isOpen() -> isOpen
    java.net.Socket getSocket() -> getSocket
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    void shutdown() -> shutdown
    void close() -> close
org.apache.http.impl.SocketHttpServerConnection -> org.apache.http.impl.SocketHttpServerConnection:
    void <init>() -> <init>
    void assertNotOpen() -> assertNotOpen
    void assertOpen() -> assertOpen
    org.apache.http.io.SessionInputBuffer createHttpDataReceiver(java.net.Socket,int,org.apache.http.params.HttpParams) -> createHttpDataReceiver
    org.apache.http.io.SessionOutputBuffer createHttpDataTransmitter(java.net.Socket,int,org.apache.http.params.HttpParams) -> createHttpDataTransmitter
    void bind(java.net.Socket,org.apache.http.params.HttpParams) -> bind
    java.net.Socket getSocket() -> getSocket
    boolean isOpen() -> isOpen
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    void shutdown() -> shutdown
    void close() -> close
org.apache.http.impl.auth.AuthSchemeBase -> org.apache.http.impl.auth.AuthSchemeBase:
    void <init>() -> <init>
    void processChallenge(org.apache.http.Header) -> processChallenge
    void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int) -> parseChallenge
    boolean isProxy() -> isProxy
org.apache.http.impl.auth.BasicScheme -> org.apache.http.impl.auth.BasicScheme:
    void <init>() -> <init>
    java.lang.String getSchemeName() -> getSchemeName
    void processChallenge(org.apache.http.Header) -> processChallenge
    boolean isComplete() -> isComplete
    boolean isConnectionBased() -> isConnectionBased
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,java.lang.String,boolean) -> authenticate
org.apache.http.impl.auth.BasicSchemeFactory -> org.apache.http.impl.auth.BasicSchemeFactory:
    void <init>() -> <init>
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.auth.DigestScheme -> org.apache.http.impl.auth.DigestScheme:
    void <init>() -> <init>
    void processChallenge(org.apache.http.Header) -> processChallenge
    boolean isComplete() -> isComplete
    java.lang.String getSchemeName() -> getSchemeName
    boolean isConnectionBased() -> isConnectionBased
    void overrideParamter(java.lang.String,java.lang.String) -> overrideParamter
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    java.lang.String createCnonce() -> createCnonce
org.apache.http.impl.auth.DigestSchemeFactory -> org.apache.http.impl.auth.DigestSchemeFactory:
    void <init>() -> <init>
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.auth.NTLMEngine -> org.apache.http.impl.auth.NTLMEngine:
    java.lang.String generateType1Msg(java.lang.String,java.lang.String) -> generateType1Msg
    java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> generateType3Msg
org.apache.http.impl.auth.NTLMEngineException -> org.apache.http.impl.auth.NTLMEngineException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.impl.auth.NTLMScheme -> org.apache.http.impl.auth.NTLMScheme:
    void <init>(org.apache.http.impl.auth.NTLMEngine) -> <init>
    java.lang.String getSchemeName() -> getSchemeName
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
    boolean isConnectionBased() -> isConnectionBased
    void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int) -> parseChallenge
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    boolean isComplete() -> isComplete
org.apache.http.impl.auth.RFC2617Scheme -> org.apache.http.impl.auth.RFC2617Scheme:
    void <init>() -> <init>
    void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int) -> parseChallenge
    java.util.Map getParameters() -> getParameters
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
org.apache.http.impl.auth.UnsupportedDigestAlgorithmException -> org.apache.http.impl.auth.UnsupportedDigestAlgorithmException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.impl.client.AbstractAuthenticationHandler -> org.apache.http.impl.client.AbstractAuthenticationHandler:
    void <init>() -> <init>
    java.util.Map parseChallenges(org.apache.http.Header[]) -> parseChallenges
    java.util.List getAuthPreferences() -> getAuthPreferences
    org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> selectScheme
org.apache.http.impl.client.AbstractHttpClient -> org.apache.http.impl.client.AbstractHttpClient:
    void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams) -> <init>
    org.apache.http.params.HttpParams createHttpParams() -> createHttpParams
    org.apache.http.protocol.HttpContext createHttpContext() -> createHttpContext
    org.apache.http.protocol.HttpRequestExecutor createRequestExecutor() -> createRequestExecutor
    org.apache.http.conn.ClientConnectionManager createClientConnectionManager() -> createClientConnectionManager
    org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry() -> createAuthSchemeRegistry
    org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry() -> createCookieSpecRegistry
    org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy() -> createConnectionReuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy() -> createConnectionKeepAliveStrategy
    org.apache.http.protocol.BasicHttpProcessor createHttpProcessor() -> createHttpProcessor
    org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler() -> createHttpRequestRetryHandler
    org.apache.http.client.RedirectHandler createRedirectHandler() -> createRedirectHandler
    org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler() -> createTargetAuthenticationHandler
    org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler() -> createProxyAuthenticationHandler
    org.apache.http.client.CookieStore createCookieStore() -> createCookieStore
    org.apache.http.client.CredentialsProvider createCredentialsProvider() -> createCredentialsProvider
    org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner() -> createHttpRoutePlanner
    org.apache.http.client.UserTokenHandler createUserTokenHandler() -> createUserTokenHandler
    org.apache.http.params.HttpParams getParams() -> getParams
    void setParams(org.apache.http.params.HttpParams) -> setParams
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.protocol.HttpRequestExecutor getRequestExecutor() -> getRequestExecutor
    org.apache.http.auth.AuthSchemeRegistry getAuthSchemes() -> getAuthSchemes
    void setAuthSchemes(org.apache.http.auth.AuthSchemeRegistry) -> setAuthSchemes
    org.apache.http.cookie.CookieSpecRegistry getCookieSpecs() -> getCookieSpecs
    void setCookieSpecs(org.apache.http.cookie.CookieSpecRegistry) -> setCookieSpecs
    org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy() -> getConnectionReuseStrategy
    void setReuseStrategy(org.apache.http.ConnectionReuseStrategy) -> setReuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy() -> getConnectionKeepAliveStrategy
    void setKeepAliveStrategy(org.apache.http.conn.ConnectionKeepAliveStrategy) -> setKeepAliveStrategy
    org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler() -> getHttpRequestRetryHandler
    void setHttpRequestRetryHandler(org.apache.http.client.HttpRequestRetryHandler) -> setHttpRequestRetryHandler
    org.apache.http.client.RedirectHandler getRedirectHandler() -> getRedirectHandler
    void setRedirectHandler(org.apache.http.client.RedirectHandler) -> setRedirectHandler
    org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler() -> getTargetAuthenticationHandler
    void setTargetAuthenticationHandler(org.apache.http.client.AuthenticationHandler) -> setTargetAuthenticationHandler
    org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler() -> getProxyAuthenticationHandler
    void setProxyAuthenticationHandler(org.apache.http.client.AuthenticationHandler) -> setProxyAuthenticationHandler
    org.apache.http.client.CookieStore getCookieStore() -> getCookieStore
    void setCookieStore(org.apache.http.client.CookieStore) -> setCookieStore
    org.apache.http.client.CredentialsProvider getCredentialsProvider() -> getCredentialsProvider
    void setCredentialsProvider(org.apache.http.client.CredentialsProvider) -> setCredentialsProvider
    org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner() -> getRoutePlanner
    void setRoutePlanner(org.apache.http.conn.routing.HttpRoutePlanner) -> setRoutePlanner
    org.apache.http.client.UserTokenHandler getUserTokenHandler() -> getUserTokenHandler
    void setUserTokenHandler(org.apache.http.client.UserTokenHandler) -> setUserTokenHandler
    org.apache.http.protocol.BasicHttpProcessor getHttpProcessor() -> getHttpProcessor
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor) -> addResponseInterceptor
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int) -> addResponseInterceptor
    org.apache.http.HttpResponseInterceptor getResponseInterceptor(int) -> getResponseInterceptor
    int getResponseInterceptorCount() -> getResponseInterceptorCount
    void clearResponseInterceptors() -> clearResponseInterceptors
    void removeResponseInterceptorByClass(java.lang.Class) -> removeResponseInterceptorByClass
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor) -> addRequestInterceptor
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int) -> addRequestInterceptor
    org.apache.http.HttpRequestInterceptor getRequestInterceptor(int) -> getRequestInterceptor
    int getRequestInterceptorCount() -> getRequestInterceptorCount
    void clearRequestInterceptors() -> clearRequestInterceptors
    void removeRequestInterceptorByClass(java.lang.Class) -> removeRequestInterceptorByClass
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams) -> createClientRequestDirector
    org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest) -> determineParams
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
org.apache.http.impl.client.BasicCookieStore -> org.apache.http.impl.client.BasicCookieStore:
    void <init>() -> <init>
    void addCookie(org.apache.http.cookie.Cookie) -> addCookie
    void addCookies(org.apache.http.cookie.Cookie[]) -> addCookies
    java.util.List getCookies() -> getCookies
    boolean clearExpired(java.util.Date) -> clearExpired
    java.lang.String toString() -> toString
    void clear() -> clear
org.apache.http.impl.client.BasicCredentialsProvider -> org.apache.http.impl.client.BasicCredentialsProvider:
    void <init>() -> <init>
    void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials) -> setCredentials
    org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope) -> getCredentials
    java.lang.String toString() -> toString
    void clear() -> clear
org.apache.http.impl.client.BasicResponseHandler -> org.apache.http.impl.client.BasicResponseHandler:
    void <init>() -> <init>
    java.lang.String handleResponse(org.apache.http.HttpResponse) -> handleResponse
    java.lang.Object handleResponse(org.apache.http.HttpResponse) -> handleResponse
org.apache.http.impl.client.ClientParamsStack -> org.apache.http.impl.client.ClientParamsStack:
    org.apache.http.params.HttpParams applicationParams -> applicationParams
    org.apache.http.params.HttpParams clientParams -> clientParams
    org.apache.http.params.HttpParams overrideParams -> overrideParams
    org.apache.http.params.HttpParams requestParams -> requestParams
    void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams) -> <init>
    void <init>(org.apache.http.impl.client.ClientParamsStack) -> <init>
    void <init>(org.apache.http.impl.client.ClientParamsStack,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams) -> <init>
    org.apache.http.params.HttpParams getApplicationParams() -> getApplicationParams
    org.apache.http.params.HttpParams getClientParams() -> getClientParams
    org.apache.http.params.HttpParams getRequestParams() -> getRequestParams
    org.apache.http.params.HttpParams getOverrideParams() -> getOverrideParams
    java.lang.Object getParameter(java.lang.String) -> getParameter
    org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> setParameter
    boolean removeParameter(java.lang.String) -> removeParameter
    org.apache.http.params.HttpParams copy() -> copy
org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy -> org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy:
    void <init>() -> <init>
    long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getKeepAliveDuration
org.apache.http.impl.client.DefaultHttpClient -> org.apache.http.impl.client.DefaultHttpClient:
    void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams) -> <init>
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void <init>() -> <init>
    org.apache.http.params.HttpParams createHttpParams() -> createHttpParams
    org.apache.http.protocol.HttpRequestExecutor createRequestExecutor() -> createRequestExecutor
    org.apache.http.conn.ClientConnectionManager createClientConnectionManager() -> createClientConnectionManager
    org.apache.http.protocol.HttpContext createHttpContext() -> createHttpContext
    org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy() -> createConnectionReuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy() -> createConnectionKeepAliveStrategy
    org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry() -> createAuthSchemeRegistry
    org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry() -> createCookieSpecRegistry
    org.apache.http.protocol.BasicHttpProcessor createHttpProcessor() -> createHttpProcessor
    org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler() -> createHttpRequestRetryHandler
    org.apache.http.client.RedirectHandler createRedirectHandler() -> createRedirectHandler
    org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler() -> createTargetAuthenticationHandler
    org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler() -> createProxyAuthenticationHandler
    org.apache.http.client.CookieStore createCookieStore() -> createCookieStore
    org.apache.http.client.CredentialsProvider createCredentialsProvider() -> createCredentialsProvider
    org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner() -> createHttpRoutePlanner
    org.apache.http.client.UserTokenHandler createUserTokenHandler() -> createUserTokenHandler
org.apache.http.impl.client.DefaultHttpRequestRetryHandler -> org.apache.http.impl.client.DefaultHttpRequestRetryHandler:
    void <init>(int,boolean) -> <init>
    void <init>() -> <init>
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
    boolean isRequestSentRetryEnabled() -> isRequestSentRetryEnabled
    int getRetryCount() -> getRetryCount
org.apache.http.impl.client.DefaultProxyAuthenticationHandler -> org.apache.http.impl.client.DefaultProxyAuthenticationHandler:
    void <init>() -> <init>
    boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
org.apache.http.impl.client.DefaultRedirectHandler -> org.apache.http.impl.client.DefaultRedirectHandler:
    void <init>() -> <init>
    boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirectRequested
    java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getLocationURI
org.apache.http.impl.client.DefaultRequestDirector -> org.apache.http.impl.client.DefaultRequestDirector:
    org.apache.http.conn.ClientConnectionManager connManager -> connManager
    org.apache.http.protocol.HttpProcessor httpProcessor -> httpProcessor
    org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy -> keepAliveStrategy
    org.apache.http.conn.ManagedClientConnection managedConn -> managedConn
    org.apache.http.params.HttpParams params -> params
    org.apache.http.client.RedirectHandler redirectHandler -> redirectHandler
    org.apache.http.protocol.HttpRequestExecutor requestExec -> requestExec
    org.apache.http.client.HttpRequestRetryHandler retryHandler -> retryHandler
    org.apache.http.ConnectionReuseStrategy reuseStrategy -> reuseStrategy
    org.apache.http.conn.routing.HttpRoutePlanner routePlanner -> routePlanner
    void <init>(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams) -> <init>
    void rewriteRequestURI(org.apache.http.impl.client.RequestWrapper,org.apache.http.conn.routing.HttpRoute) -> rewriteRequestURI
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    void releaseConnection() -> releaseConnection
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
    void establishRoute(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> establishRoute
    boolean createTunnelToTarget(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> createTunnelToTarget
    boolean createTunnelToProxy(org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext) -> createTunnelToProxy
    org.apache.http.HttpRequest createConnectRequest(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> createConnectRequest
    org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> handleResponse
org.apache.http.impl.client.DefaultTargetAuthenticationHandler -> org.apache.http.impl.client.DefaultTargetAuthenticationHandler:
    void <init>() -> <init>
    boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
org.apache.http.impl.client.DefaultUserTokenHandler -> org.apache.http.impl.client.DefaultUserTokenHandler:
    void <init>() -> <init>
    java.lang.Object getUserToken(org.apache.http.protocol.HttpContext) -> getUserToken
org.apache.http.impl.client.EntityEnclosingRequestWrapper -> org.apache.http.impl.client.EntityEnclosingRequestWrapper:
    void <init>(org.apache.http.HttpEntityEnclosingRequest) -> <init>
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
    boolean isRepeatable() -> isRepeatable
org.apache.http.impl.client.RedirectLocations -> org.apache.http.impl.client.RedirectLocations:
    void <init>() -> <init>
    boolean contains(java.net.URI) -> contains
    void add(java.net.URI) -> add
    boolean remove(java.net.URI) -> remove
org.apache.http.impl.client.RequestWrapper -> org.apache.http.impl.client.RequestWrapper:
    void <init>(org.apache.http.HttpRequest) -> <init>
    void resetHeaders() -> resetHeaders
    java.lang.String getMethod() -> getMethod
    void setMethod(java.lang.String) -> setMethod
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    void setProtocolVersion(org.apache.http.ProtocolVersion) -> setProtocolVersion
    java.net.URI getURI() -> getURI
    void setURI(java.net.URI) -> setURI
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
    void abort() -> abort
    boolean isAborted() -> isAborted
    org.apache.http.HttpRequest getOriginal() -> getOriginal
    boolean isRepeatable() -> isRepeatable
    int getExecCount() -> getExecCount
    void incrementExecCount() -> incrementExecCount
org.apache.http.impl.client.RoutedRequest -> org.apache.http.impl.client.RoutedRequest:
    org.apache.http.impl.client.RequestWrapper request -> request
    org.apache.http.conn.routing.HttpRoute route -> route
    void <init>(org.apache.http.impl.client.RequestWrapper,org.apache.http.conn.routing.HttpRoute) -> <init>
    org.apache.http.impl.client.RequestWrapper getRequest() -> getRequest
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
org.apache.http.impl.client.TunnelRefusedException -> org.apache.http.impl.client.TunnelRefusedException:
    void <init>(java.lang.String,org.apache.http.HttpResponse) -> <init>
    org.apache.http.HttpResponse getResponse() -> getResponse
org.apache.http.impl.conn.AbstractClientConnAdapter -> org.apache.http.impl.conn.AbstractClientConnAdapter:
    void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.conn.OperatedClientConnection) -> <init>
    void detach() -> detach
    org.apache.http.conn.OperatedClientConnection getWrappedConnection() -> getWrappedConnection
    org.apache.http.conn.ClientConnectionManager getManager() -> getManager
    void assertNotAborted() -> assertNotAborted
    void assertValid(org.apache.http.conn.OperatedClientConnection) -> assertValid
    boolean isOpen() -> isOpen
    boolean isStale() -> isStale
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
    void flush() -> flush
    boolean isResponseAvailable(int) -> isResponseAvailable
    void receiveResponseEntity(org.apache.http.HttpResponse) -> receiveResponseEntity
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    boolean isSecure() -> isSecure
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
    void markReusable() -> markReusable
    void unmarkReusable() -> unmarkReusable
    boolean isMarkedReusable() -> isMarkedReusable
    void setIdleDuration(long,java.util.concurrent.TimeUnit) -> setIdleDuration
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
org.apache.http.impl.conn.AbstractPoolEntry -> org.apache.http.impl.conn.AbstractPoolEntry:
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    org.apache.http.conn.OperatedClientConnection connection -> connection
    org.apache.http.conn.routing.HttpRoute route -> route
    java.lang.Object state -> state
    org.apache.http.conn.routing.RouteTracker tracker -> tracker
    void <init>(org.apache.http.conn.ClientConnectionOperator,org.apache.http.conn.routing.HttpRoute) -> <init>
    java.lang.Object getState() -> getState
    void setState(java.lang.Object) -> setState
    void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> open
    void tunnelTarget(boolean,org.apache.http.params.HttpParams) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> tunnelProxy
    void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> layerProtocol
    void shutdownEntry() -> shutdownEntry
org.apache.http.impl.conn.AbstractPooledConnAdapter -> org.apache.http.impl.conn.AbstractPooledConnAdapter:
    org.apache.http.impl.conn.AbstractPoolEntry poolEntry -> poolEntry
    void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.impl.conn.AbstractPoolEntry) -> <init>
    void assertAttached() -> assertAttached
    void detach() -> detach
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> open
    void tunnelTarget(boolean,org.apache.http.params.HttpParams) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> tunnelProxy
    void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> layerProtocol
    void close() -> close
    void shutdown() -> shutdown
    java.lang.Object getState() -> getState
    void setState(java.lang.Object) -> setState
org.apache.http.impl.conn.DefaultClientConnection -> org.apache.http.impl.conn.DefaultClientConnection:
    void <init>() -> <init>
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    boolean isSecure() -> isSecure
    java.net.Socket getSocket() -> getSocket
    void opening(java.net.Socket,org.apache.http.HttpHost) -> opening
    void openCompleted(boolean,org.apache.http.params.HttpParams) -> openCompleted
    void shutdown() -> shutdown
    void close() -> close
    org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionInputBuffer
    org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionOutputBuffer
    org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams) -> createResponseParser
    void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> update
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
org.apache.http.impl.conn.DefaultClientConnectionOperator -> org.apache.http.impl.conn.DefaultClientConnectionOperator:
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    void <init>(org.apache.http.conn.scheme.SchemeRegistry) -> <init>
    org.apache.http.conn.OperatedClientConnection createConnection() -> createConnection
    void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> openConnection
    void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> updateSecureConnection
    void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> prepareSocket
org.apache.http.impl.conn.DefaultHttpRoutePlanner -> org.apache.http.impl.conn.DefaultHttpRoutePlanner:
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    void <init>(org.apache.http.conn.scheme.SchemeRegistry) -> <init>
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
org.apache.http.impl.conn.DefaultResponseParser -> org.apache.http.impl.conn.DefaultResponseParser:
    void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams) -> <init>
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
org.apache.http.impl.conn.IdleConnectionHandler -> org.apache.http.impl.conn.IdleConnectionHandler:
    void <init>() -> <init>
    void add(org.apache.http.HttpConnection,long,java.util.concurrent.TimeUnit) -> add
    boolean remove(org.apache.http.HttpConnection) -> remove
    void removeAll() -> removeAll
    void closeIdleConnections(long) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
org.apache.http.impl.conn.LoggingSessionInputBuffer -> org.apache.http.impl.conn.LoggingSessionInputBuffer:
    void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.impl.conn.Wire) -> <init>
    boolean isDataAvailable(int) -> isDataAvailable
    int read(byte[],int,int) -> read
    int read() -> read
    int read(byte[]) -> read
    java.lang.String readLine() -> readLine
    int readLine(org.apache.http.util.CharArrayBuffer) -> readLine
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.impl.conn.LoggingSessionOutputBuffer -> org.apache.http.impl.conn.LoggingSessionOutputBuffer:
    void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.impl.conn.Wire) -> <init>
    void write(byte[],int,int) -> write
    void write(int) -> write
    void write(byte[]) -> write
    void flush() -> flush
    void writeLine(org.apache.http.util.CharArrayBuffer) -> writeLine
    void writeLine(java.lang.String) -> writeLine
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.impl.conn.ProxySelectorRoutePlanner -> org.apache.http.impl.conn.ProxySelectorRoutePlanner:
    java.net.ProxySelector proxySelector -> proxySelector
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    void <init>(org.apache.http.conn.scheme.SchemeRegistry,java.net.ProxySelector) -> <init>
    java.net.ProxySelector getProxySelector() -> getProxySelector
    void setProxySelector(java.net.ProxySelector) -> setProxySelector
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
    org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineProxy
    java.lang.String getHost(java.net.InetSocketAddress) -> getHost
    java.net.Proxy chooseProxy(java.util.List,org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> chooseProxy
org.apache.http.impl.conn.SingleClientConnManager -> org.apache.http.impl.conn.SingleClientConnManager:
    java.lang.String MISUSE_MESSAGE -> MISUSE_MESSAGE
    boolean alwaysShutDown -> alwaysShutDown
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    long connectionExpiresTime -> connectionExpiresTime
    boolean isShutDown -> isShutDown
    long lastReleaseTime -> lastReleaseTime
    org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn -> managedConn
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry -> uniquePoolEntry
    void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry) -> <init>
    void finalize() -> finalize
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry) -> createConnectionOperator
    void assertStillUp() -> assertStillUp
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> getConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void closeExpiredConnections() -> closeExpiredConnections
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void shutdown() -> shutdown
    void revokeConnection() -> revokeConnection
org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter -> org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter:
    org.apache.http.impl.conn.SingleClientConnManager this$0 -> this$0
    void <init>(org.apache.http.impl.conn.SingleClientConnManager,org.apache.http.impl.conn.SingleClientConnManager$PoolEntry,org.apache.http.conn.routing.HttpRoute) -> <init>
org.apache.http.impl.conn.SingleClientConnManager$PoolEntry -> org.apache.http.impl.conn.SingleClientConnManager$PoolEntry:
    org.apache.http.impl.conn.SingleClientConnManager this$0 -> this$0
    void <init>(org.apache.http.impl.conn.SingleClientConnManager) -> <init>
    void close() -> close
    void shutdown() -> shutdown
org.apache.http.impl.conn.Wire -> org.apache.http.impl.conn.Wire:
    void <init>(org.apache.commons.logging.Log) -> <init>
    boolean enabled() -> enabled
    void output(java.io.InputStream) -> output
    void input(java.io.InputStream) -> input
    void output(byte[],int,int) -> output
    void input(byte[],int,int) -> input
    void output(byte[]) -> output
    void input(byte[]) -> input
    void output(int) -> output
    void input(int) -> input
    void output(java.lang.String) -> output
    void input(java.lang.String) -> input
org.apache.http.impl.conn.tsccm.AbstractConnPool -> org.apache.http.impl.conn.tsccm.AbstractConnPool:
    org.apache.http.impl.conn.IdleConnectionHandler idleConnHandler -> idleConnHandler
    boolean isShutDown -> isShutDown
    java.util.Set issuedConnections -> issuedConnections
    int numConnections -> numConnections
    java.util.concurrent.locks.Lock poolLock -> poolLock
    java.lang.ref.ReferenceQueue refQueue -> refQueue
    void <init>() -> <init>
    void enableConnectionGC() -> enableConnectionGC
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit) -> getEntry
    org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestPoolEntry
    void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit) -> freeEntry
    void handleReference(java.lang.ref.Reference) -> handleReference
    void handleLostEntry(org.apache.http.conn.routing.HttpRoute) -> handleLostEntry
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    void deleteClosedConnections() -> deleteClosedConnections
    void shutdown() -> shutdown
    void closeConnection(org.apache.http.conn.OperatedClientConnection) -> closeConnection
org.apache.http.impl.conn.tsccm.BasicPoolEntry -> org.apache.http.impl.conn.tsccm.BasicPoolEntry:
    void <init>(org.apache.http.conn.ClientConnectionOperator,org.apache.http.conn.routing.HttpRoute,java.lang.ref.ReferenceQueue) -> <init>
    org.apache.http.conn.OperatedClientConnection getConnection() -> getConnection
    org.apache.http.conn.routing.HttpRoute getPlannedRoute() -> getPlannedRoute
    org.apache.http.impl.conn.tsccm.BasicPoolEntryRef getWeakRef() -> getWeakRef
org.apache.http.impl.conn.tsccm.BasicPoolEntryRef -> org.apache.http.impl.conn.tsccm.BasicPoolEntryRef:
    void <init>(org.apache.http.impl.conn.tsccm.BasicPoolEntry,java.lang.ref.ReferenceQueue) -> <init>
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter -> org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter:
    void <init>(org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager,org.apache.http.impl.conn.AbstractPoolEntry) -> <init>
    org.apache.http.conn.ClientConnectionManager getManager() -> getManager
    org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry() -> getPoolEntry
    void detach() -> detach
org.apache.http.impl.conn.tsccm.ConnPoolByRoute -> org.apache.http.impl.conn.tsccm.ConnPoolByRoute:
    java.util.Queue freeConnections -> freeConnections
    int maxTotalConnections -> maxTotalConnections
    org.apache.http.conn.ClientConnectionOperator operator -> operator
    java.util.Map routeToPool -> routeToPool
    java.util.Queue waitingThreads -> waitingThreads
    void <init>(org.apache.http.conn.ClientConnectionOperator,org.apache.http.params.HttpParams) -> <init>
    java.util.Queue createFreeConnQueue() -> createFreeConnQueue
    java.util.Queue createWaitingThreadQueue() -> createWaitingThreadQueue
    java.util.Map createRouteToPoolMap() -> createRouteToPoolMap
    org.apache.http.impl.conn.tsccm.RouteSpecificPool newRouteSpecificPool(org.apache.http.conn.routing.HttpRoute) -> newRouteSpecificPool
    org.apache.http.impl.conn.tsccm.WaitingThread newWaitingThread(java.util.concurrent.locks.Condition,org.apache.http.impl.conn.tsccm.RouteSpecificPool) -> newWaitingThread
    org.apache.http.impl.conn.tsccm.RouteSpecificPool getRoutePool(org.apache.http.conn.routing.HttpRoute,boolean) -> getRoutePool
    int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute) -> getConnectionsInPool
    org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestPoolEntry
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntryBlocking(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.impl.conn.tsccm.WaitingThreadAborter) -> getEntryBlocking
    void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit) -> freeEntry
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getFreeEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,java.lang.Object) -> getFreeEntry
    org.apache.http.impl.conn.tsccm.BasicPoolEntry createEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,org.apache.http.conn.ClientConnectionOperator) -> createEntry
    void deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> deleteEntry
    void deleteLeastUsedEntry() -> deleteLeastUsedEntry
    void handleLostEntry(org.apache.http.conn.routing.HttpRoute) -> handleLostEntry
    void notifyWaitingThread(org.apache.http.impl.conn.tsccm.RouteSpecificPool) -> notifyWaitingThread
    void deleteClosedConnections() -> deleteClosedConnections
    void shutdown() -> shutdown
org.apache.http.impl.conn.tsccm.PoolEntryRequest -> org.apache.http.impl.conn.tsccm.PoolEntryRequest:
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getPoolEntry(long,java.util.concurrent.TimeUnit) -> getPoolEntry
    void abortRequest() -> abortRequest
org.apache.http.impl.conn.tsccm.RefQueueHandler -> org.apache.http.impl.conn.tsccm.RefQueueHandler:
    void handleReference(java.lang.ref.Reference) -> handleReference
org.apache.http.impl.conn.tsccm.RefQueueWorker -> org.apache.http.impl.conn.tsccm.RefQueueWorker:
    org.apache.http.impl.conn.tsccm.RefQueueHandler refHandler -> refHandler
    java.lang.ref.ReferenceQueue refQueue -> refQueue
    java.lang.Thread workerThread -> workerThread
    void <init>(java.lang.ref.ReferenceQueue,org.apache.http.impl.conn.tsccm.RefQueueHandler) -> <init>
    void run() -> run
    void shutdown() -> shutdown
    java.lang.String toString() -> toString
org.apache.http.impl.conn.tsccm.RouteSpecificPool -> org.apache.http.impl.conn.tsccm.RouteSpecificPool:
    java.util.LinkedList freeEntries -> freeEntries
    int maxEntries -> maxEntries
    int numEntries -> numEntries
    org.apache.http.conn.routing.HttpRoute route -> route
    java.util.Queue waitingThreads -> waitingThreads
    void <init>(org.apache.http.conn.routing.HttpRoute,int) -> <init>
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    int getMaxEntries() -> getMaxEntries
    boolean isUnused() -> isUnused
    int getCapacity() -> getCapacity
    int getEntryCount() -> getEntryCount
    org.apache.http.impl.conn.tsccm.BasicPoolEntry allocEntry(java.lang.Object) -> allocEntry
    void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> freeEntry
    void createdEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> createdEntry
    boolean deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> deleteEntry
    void dropEntry() -> dropEntry
    void queueThread(org.apache.http.impl.conn.tsccm.WaitingThread) -> queueThread
    boolean hasThread() -> hasThread
    org.apache.http.impl.conn.tsccm.WaitingThread nextThread() -> nextThread
    void removeThread(org.apache.http.impl.conn.tsccm.WaitingThread) -> removeThread
org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager -> org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager:
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool -> connectionPool
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry) -> <init>
    void finalize() -> finalize
    org.apache.http.impl.conn.tsccm.AbstractConnPool createConnectionPool(org.apache.http.params.HttpParams) -> createConnectionPool
    org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry) -> createConnectionOperator
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void shutdown() -> shutdown
    int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute) -> getConnectionsInPool
    int getConnectionsInPool() -> getConnectionsInPool
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
org.apache.http.impl.conn.tsccm.WaitingThread -> org.apache.http.impl.conn.tsccm.WaitingThread:
    void <init>(java.util.concurrent.locks.Condition,org.apache.http.impl.conn.tsccm.RouteSpecificPool) -> <init>
    java.util.concurrent.locks.Condition getCondition() -> getCondition
    org.apache.http.impl.conn.tsccm.RouteSpecificPool getPool() -> getPool
    java.lang.Thread getThread() -> getThread
    boolean await(java.util.Date) -> await
    void wakeup() -> wakeup
    void interrupt() -> interrupt
org.apache.http.impl.conn.tsccm.WaitingThreadAborter -> org.apache.http.impl.conn.tsccm.WaitingThreadAborter:
    void <init>() -> <init>
    void abort() -> abort
    void setWaitingThread(org.apache.http.impl.conn.tsccm.WaitingThread) -> setWaitingThread
org.apache.http.impl.cookie.AbstractCookieAttributeHandler -> org.apache.http.impl.cookie.AbstractCookieAttributeHandler:
    void <init>() -> <init>
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.AbstractCookieSpec -> org.apache.http.impl.cookie.AbstractCookieSpec:
    void <init>() -> <init>
    void registerAttribHandler(java.lang.String,org.apache.http.cookie.CookieAttributeHandler) -> registerAttribHandler
    org.apache.http.cookie.CookieAttributeHandler findAttribHandler(java.lang.String) -> findAttribHandler
    org.apache.http.cookie.CookieAttributeHandler getAttribHandler(java.lang.String) -> getAttribHandler
    java.util.Collection getAttribHandlers() -> getAttribHandlers
org.apache.http.impl.cookie.BasicClientCookie -> org.apache.http.impl.cookie.BasicClientCookie:
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    java.lang.String getComment() -> getComment
    void setComment(java.lang.String) -> setComment
    java.lang.String getCommentURL() -> getCommentURL
    java.util.Date getExpiryDate() -> getExpiryDate
    void setExpiryDate(java.util.Date) -> setExpiryDate
    boolean isPersistent() -> isPersistent
    java.lang.String getDomain() -> getDomain
    void setDomain(java.lang.String) -> setDomain
    java.lang.String getPath() -> getPath
    void setPath(java.lang.String) -> setPath
    boolean isSecure() -> isSecure
    void setSecure(boolean) -> setSecure
    int[] getPorts() -> getPorts
    int getVersion() -> getVersion
    void setVersion(int) -> setVersion
    boolean isExpired(java.util.Date) -> isExpired
    void setAttribute(java.lang.String,java.lang.String) -> setAttribute
    java.lang.String getAttribute(java.lang.String) -> getAttribute
    boolean containsAttribute(java.lang.String) -> containsAttribute
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
org.apache.http.impl.cookie.BasicClientCookie2 -> org.apache.http.impl.cookie.BasicClientCookie2:
    void <init>(java.lang.String,java.lang.String) -> <init>
    int[] getPorts() -> getPorts
    void setPorts(int[]) -> setPorts
    java.lang.String getCommentURL() -> getCommentURL
    void setCommentURL(java.lang.String) -> setCommentURL
    void setDiscard(boolean) -> setDiscard
    boolean isPersistent() -> isPersistent
    boolean isExpired(java.util.Date) -> isExpired
    java.lang.Object clone() -> clone
org.apache.http.impl.cookie.BasicCommentHandler -> org.apache.http.impl.cookie.BasicCommentHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
org.apache.http.impl.cookie.BasicDomainHandler -> org.apache.http.impl.cookie.BasicDomainHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.BasicExpiresHandler -> org.apache.http.impl.cookie.BasicExpiresHandler:
    void <init>(java.lang.String[]) -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
org.apache.http.impl.cookie.BasicMaxAgeHandler -> org.apache.http.impl.cookie.BasicMaxAgeHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
org.apache.http.impl.cookie.BasicPathHandler -> org.apache.http.impl.cookie.BasicPathHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.BasicSecureHandler -> org.apache.http.impl.cookie.BasicSecureHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.BestMatchSpec -> org.apache.http.impl.cookie.BestMatchSpec:
    void <init>(java.lang.String[],boolean) -> <init>
    void <init>() -> <init>
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
    java.util.List formatCookies(java.util.List) -> formatCookies
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
org.apache.http.impl.cookie.BestMatchSpecFactory -> org.apache.http.impl.cookie.BestMatchSpecFactory:
    void <init>() -> <init>
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.BrowserCompatSpec -> org.apache.http.impl.cookie.BrowserCompatSpec:
    java.lang.String[] DATE_PATTERNS -> DATE_PATTERNS
    void <init>(java.lang.String[]) -> <init>
    void <init>() -> <init>
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    java.util.List formatCookies(java.util.List) -> formatCookies
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
    void <clinit>() -> <clinit>
org.apache.http.impl.cookie.BrowserCompatSpecFactory -> org.apache.http.impl.cookie.BrowserCompatSpecFactory:
    void <init>() -> <init>
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.CookieSpecBase -> org.apache.http.impl.cookie.CookieSpecBase:
    void <init>() -> <init>
    java.lang.String getDefaultPath(org.apache.http.cookie.CookieOrigin) -> getDefaultPath
    java.lang.String getDefaultDomain(org.apache.http.cookie.CookieOrigin) -> getDefaultDomain
    java.util.List parse(org.apache.http.HeaderElement[],org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.DateParseException -> org.apache.http.impl.cookie.DateParseException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.apache.http.impl.cookie.DateUtils -> org.apache.http.impl.cookie.DateUtils:
    java.util.TimeZone GMT -> GMT
    java.lang.String PATTERN_ASCTIME -> PATTERN_ASCTIME
    java.lang.String PATTERN_RFC1036 -> PATTERN_RFC1036
    java.lang.String PATTERN_RFC1123 -> PATTERN_RFC1123
    void <init>() -> <init>
    java.util.Date parseDate(java.lang.String) -> parseDate
    java.util.Date parseDate(java.lang.String,java.lang.String[]) -> parseDate
    java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date) -> parseDate
    java.lang.String formatDate(java.util.Date) -> formatDate
    java.lang.String formatDate(java.util.Date,java.lang.String) -> formatDate
    void <clinit>() -> <clinit>
org.apache.http.impl.cookie.NetscapeDomainHandler -> org.apache.http.impl.cookie.NetscapeDomainHandler:
    void <init>() -> <init>
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.NetscapeDraftHeaderParser -> org.apache.http.impl.cookie.NetscapeDraftHeaderParser:
    org.apache.http.impl.cookie.NetscapeDraftHeaderParser DEFAULT -> DEFAULT
    void <init>() -> <init>
    org.apache.http.HeaderElement parseHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseHeader
    void <clinit>() -> <clinit>
org.apache.http.impl.cookie.NetscapeDraftSpec -> org.apache.http.impl.cookie.NetscapeDraftSpec:
    java.lang.String EXPIRES_PATTERN -> EXPIRES_PATTERN
    void <init>(java.lang.String[]) -> <init>
    void <init>() -> <init>
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    java.util.List formatCookies(java.util.List) -> formatCookies
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
org.apache.http.impl.cookie.NetscapeDraftSpecFactory -> org.apache.http.impl.cookie.NetscapeDraftSpecFactory:
    void <init>() -> <init>
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.RFC2109DomainHandler -> org.apache.http.impl.cookie.RFC2109DomainHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2109Spec -> org.apache.http.impl.cookie.RFC2109Spec:
    void <init>(java.lang.String[],boolean) -> <init>
    void <init>() -> <init>
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    java.util.List formatCookies(java.util.List) -> formatCookies
    void formatParamAsVer(org.apache.http.util.CharArrayBuffer,java.lang.String,java.lang.String,int) -> formatParamAsVer
    void formatCookieAsVer(org.apache.http.util.CharArrayBuffer,org.apache.http.cookie.Cookie,int) -> formatCookieAsVer
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
org.apache.http.impl.cookie.RFC2109SpecFactory -> org.apache.http.impl.cookie.RFC2109SpecFactory:
    void <init>() -> <init>
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.RFC2109VersionHandler -> org.apache.http.impl.cookie.RFC2109VersionHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler -> org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler -> org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965DomainAttributeHandler -> org.apache.http.impl.cookie.RFC2965DomainAttributeHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    boolean domainMatch(java.lang.String,java.lang.String) -> domainMatch
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965PortAttributeHandler -> org.apache.http.impl.cookie.RFC2965PortAttributeHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965Spec -> org.apache.http.impl.cookie.RFC2965Spec:
    void <init>() -> <init>
    void <init>(java.lang.String[],boolean) -> <init>
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
    void formatCookieAsVer(org.apache.http.util.CharArrayBuffer,org.apache.http.cookie.Cookie,int) -> formatCookieAsVer
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
org.apache.http.impl.cookie.RFC2965SpecFactory -> org.apache.http.impl.cookie.RFC2965SpecFactory:
    void <init>() -> <init>
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.RFC2965VersionAttributeHandler -> org.apache.http.impl.cookie.RFC2965VersionAttributeHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.entity.EntityDeserializer -> org.apache.http.impl.entity.EntityDeserializer:
    void <init>(org.apache.http.entity.ContentLengthStrategy) -> <init>
    org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage) -> doDeserialize
    org.apache.http.HttpEntity deserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage) -> deserialize
org.apache.http.impl.entity.EntitySerializer -> org.apache.http.impl.entity.EntitySerializer:
    void <init>(org.apache.http.entity.ContentLengthStrategy) -> <init>
    java.io.OutputStream doSerialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage) -> doSerialize
    void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity) -> serialize
org.apache.http.impl.entity.LaxContentLengthStrategy -> org.apache.http.impl.entity.LaxContentLengthStrategy:
    void <init>() -> <init>
    long determineLength(org.apache.http.HttpMessage) -> determineLength
org.apache.http.impl.entity.StrictContentLengthStrategy -> org.apache.http.impl.entity.StrictContentLengthStrategy:
    void <init>() -> <init>
    long determineLength(org.apache.http.HttpMessage) -> determineLength
org.apache.http.impl.io.AbstractMessageParser -> org.apache.http.impl.io.AbstractMessageParser:
    org.apache.http.message.LineParser lineParser -> lineParser
    void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.params.HttpParams) -> <init>
    org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser) -> parseHeaders
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
    org.apache.http.HttpMessage parse() -> parse
org.apache.http.impl.io.AbstractMessageWriter -> org.apache.http.impl.io.AbstractMessageWriter:
    org.apache.http.util.CharArrayBuffer lineBuf -> lineBuf
    org.apache.http.message.LineFormatter lineFormatter -> lineFormatter
    org.apache.http.io.SessionOutputBuffer sessionBuffer -> sessionBuffer
    void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams) -> <init>
    void writeHeadLine(org.apache.http.HttpMessage) -> writeHeadLine
    void write(org.apache.http.HttpMessage) -> write
org.apache.http.impl.io.AbstractSessionInputBuffer -> org.apache.http.impl.io.AbstractSessionInputBuffer:
    void <init>() -> <init>
    void init(java.io.InputStream,int,org.apache.http.params.HttpParams) -> init
    int fillBuffer() -> fillBuffer
    boolean hasBufferedData() -> hasBufferedData
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    int readLine(org.apache.http.util.CharArrayBuffer) -> readLine
    java.lang.String readLine() -> readLine
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.impl.io.AbstractSessionOutputBuffer -> org.apache.http.impl.io.AbstractSessionOutputBuffer:
    void <init>() -> <init>
    void init(java.io.OutputStream,int,org.apache.http.params.HttpParams) -> init
    void flushBuffer() -> flushBuffer
    void flush() -> flush
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
    void writeLine(java.lang.String) -> writeLine
    void writeLine(org.apache.http.util.CharArrayBuffer) -> writeLine
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.impl.io.ChunkedInputStream -> org.apache.http.impl.io.ChunkedInputStream:
    void <init>(org.apache.http.io.SessionInputBuffer) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    void close() -> close
    org.apache.http.Header[] getFooters() -> getFooters
org.apache.http.impl.io.ChunkedOutputStream -> org.apache.http.impl.io.ChunkedOutputStream:
    void <init>(org.apache.http.io.SessionOutputBuffer,int) -> <init>
    void <init>(org.apache.http.io.SessionOutputBuffer) -> <init>
    void flushCache() -> flushCache
    void flushCacheWithAppend(byte[],int,int) -> flushCacheWithAppend
    void writeClosingChunk() -> writeClosingChunk
    void finish() -> finish
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
org.apache.http.impl.io.ContentLengthInputStream -> org.apache.http.impl.io.ContentLengthInputStream:
    void <init>(org.apache.http.io.SessionInputBuffer,long) -> <init>
    void close() -> close
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    long skip(long) -> skip
org.apache.http.impl.io.ContentLengthOutputStream -> org.apache.http.impl.io.ContentLengthOutputStream:
    void <init>(org.apache.http.io.SessionOutputBuffer,long) -> <init>
    void close() -> close
    void flush() -> flush
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
org.apache.http.impl.io.HttpRequestParser -> org.apache.http.impl.io.HttpRequestParser:
    void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams) -> <init>
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
org.apache.http.impl.io.HttpRequestWriter -> org.apache.http.impl.io.HttpRequestWriter:
    void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams) -> <init>
    void writeHeadLine(org.apache.http.HttpMessage) -> writeHeadLine
org.apache.http.impl.io.HttpResponseParser -> org.apache.http.impl.io.HttpResponseParser:
    void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams) -> <init>
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
org.apache.http.impl.io.HttpResponseWriter -> org.apache.http.impl.io.HttpResponseWriter:
    void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams) -> <init>
    void writeHeadLine(org.apache.http.HttpMessage) -> writeHeadLine
org.apache.http.impl.io.HttpTransportMetricsImpl -> org.apache.http.impl.io.HttpTransportMetricsImpl:
    void <init>() -> <init>
    long getBytesTransferred() -> getBytesTransferred
    void setBytesTransferred(long) -> setBytesTransferred
    void incrementBytesTransferred(long) -> incrementBytesTransferred
    void reset() -> reset
org.apache.http.impl.io.IdentityInputStream -> org.apache.http.impl.io.IdentityInputStream:
    void <init>(org.apache.http.io.SessionInputBuffer) -> <init>
    int available() -> available
    void close() -> close
    int read() -> read
    int read(byte[],int,int) -> read
org.apache.http.impl.io.IdentityOutputStream -> org.apache.http.impl.io.IdentityOutputStream:
    void <init>(org.apache.http.io.SessionOutputBuffer) -> <init>
    void close() -> close
    void flush() -> flush
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
org.apache.http.impl.io.SocketInputBuffer -> org.apache.http.impl.io.SocketInputBuffer:
    void <init>(java.net.Socket,int,org.apache.http.params.HttpParams) -> <init>
    boolean isDataAvailable(int) -> isDataAvailable
    boolean isStale() -> isStale
org.apache.http.impl.io.SocketOutputBuffer -> org.apache.http.impl.io.SocketOutputBuffer:
    void <init>(java.net.Socket,int,org.apache.http.params.HttpParams) -> <init>
org.apache.http.io.HttpMessageParser -> org.apache.http.io.HttpMessageParser:
    org.apache.http.HttpMessage parse() -> parse
org.apache.http.io.HttpMessageWriter -> org.apache.http.io.HttpMessageWriter:
    void write(org.apache.http.HttpMessage) -> write
org.apache.http.io.HttpTransportMetrics -> org.apache.http.io.HttpTransportMetrics:
    long getBytesTransferred() -> getBytesTransferred
    void reset() -> reset
org.apache.http.io.SessionInputBuffer -> org.apache.http.io.SessionInputBuffer:
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    int read() -> read
    int readLine(org.apache.http.util.CharArrayBuffer) -> readLine
    java.lang.String readLine() -> readLine
    boolean isDataAvailable(int) -> isDataAvailable
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.io.SessionOutputBuffer -> org.apache.http.io.SessionOutputBuffer:
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
    void writeLine(java.lang.String) -> writeLine
    void writeLine(org.apache.http.util.CharArrayBuffer) -> writeLine
    void flush() -> flush
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.message.AbstractHttpMessage -> org.apache.http.message.AbstractHttpMessage:
    org.apache.http.message.HeaderGroup headergroup -> headergroup
    org.apache.http.params.HttpParams params -> params
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void <init>() -> <init>
    boolean containsHeader(java.lang.String) -> containsHeader
    org.apache.http.Header[] getHeaders(java.lang.String) -> getHeaders
    org.apache.http.Header getFirstHeader(java.lang.String) -> getFirstHeader
    org.apache.http.Header getLastHeader(java.lang.String) -> getLastHeader
    org.apache.http.Header[] getAllHeaders() -> getAllHeaders
    void addHeader(org.apache.http.Header) -> addHeader
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void setHeader(org.apache.http.Header) -> setHeader
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    void setHeaders(org.apache.http.Header[]) -> setHeaders
    void removeHeader(org.apache.http.Header) -> removeHeader
    void removeHeaders(java.lang.String) -> removeHeaders
    org.apache.http.HeaderIterator headerIterator() -> headerIterator
    org.apache.http.HeaderIterator headerIterator(java.lang.String) -> headerIterator
    org.apache.http.params.HttpParams getParams() -> getParams
    void setParams(org.apache.http.params.HttpParams) -> setParams
org.apache.http.message.BasicHeader -> org.apache.http.message.BasicHeader:
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    java.lang.String toString() -> toString
    org.apache.http.HeaderElement[] getElements() -> getElements
    java.lang.Object clone() -> clone
org.apache.http.message.BasicHeaderElement -> org.apache.http.message.BasicHeaderElement:
    void <init>(java.lang.String,java.lang.String,org.apache.http.NameValuePair[]) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    org.apache.http.NameValuePair[] getParameters() -> getParameters
    int getParameterCount() -> getParameterCount
    org.apache.http.NameValuePair getParameter(int) -> getParameter
    org.apache.http.NameValuePair getParameterByName(java.lang.String) -> getParameterByName
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.message.BasicHeaderElementIterator -> org.apache.http.message.BasicHeaderElementIterator:
    void <init>(org.apache.http.HeaderIterator,org.apache.http.message.HeaderValueParser) -> <init>
    void <init>(org.apache.http.HeaderIterator) -> <init>
    boolean hasNext() -> hasNext
    org.apache.http.HeaderElement nextElement() -> nextElement
    java.lang.Object next() -> next
    void remove() -> remove
org.apache.http.message.BasicHeaderIterator -> org.apache.http.message.BasicHeaderIterator:
    org.apache.http.Header[] allHeaders -> allHeaders
    int currentIndex -> currentIndex
    java.lang.String headerName -> headerName
    void <init>(org.apache.http.Header[],java.lang.String) -> <init>
    int findNext(int) -> findNext
    boolean filterHeader(int) -> filterHeader
    boolean hasNext() -> hasNext
    org.apache.http.Header nextHeader() -> nextHeader
    java.lang.Object next() -> next
    void remove() -> remove
org.apache.http.message.BasicHeaderValueFormatter -> org.apache.http.message.BasicHeaderValueFormatter:
    org.apache.http.message.BasicHeaderValueFormatter DEFAULT -> DEFAULT
    java.lang.String SEPARATORS -> SEPARATORS
    java.lang.String UNSAFE_CHARS -> UNSAFE_CHARS
    void <init>() -> <init>
    java.lang.String formatElements(org.apache.http.HeaderElement[],boolean,org.apache.http.message.HeaderValueFormatter) -> formatElements
    org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean) -> formatElements
    int estimateElementsLen(org.apache.http.HeaderElement[]) -> estimateElementsLen
    java.lang.String formatHeaderElement(org.apache.http.HeaderElement,boolean,org.apache.http.message.HeaderValueFormatter) -> formatHeaderElement
    org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean) -> formatHeaderElement
    int estimateHeaderElementLen(org.apache.http.HeaderElement) -> estimateHeaderElementLen
    java.lang.String formatParameters(org.apache.http.NameValuePair[],boolean,org.apache.http.message.HeaderValueFormatter) -> formatParameters
    org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean) -> formatParameters
    int estimateParametersLen(org.apache.http.NameValuePair[]) -> estimateParametersLen
    java.lang.String formatNameValuePair(org.apache.http.NameValuePair,boolean,org.apache.http.message.HeaderValueFormatter) -> formatNameValuePair
    org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean) -> formatNameValuePair
    int estimateNameValuePairLen(org.apache.http.NameValuePair) -> estimateNameValuePairLen
    void doFormatValue(org.apache.http.util.CharArrayBuffer,java.lang.String,boolean) -> doFormatValue
    boolean isSeparator(char) -> isSeparator
    boolean isUnsafe(char) -> isUnsafe
    void <clinit>() -> <clinit>
org.apache.http.message.BasicHeaderValueParser -> org.apache.http.message.BasicHeaderValueParser:
    org.apache.http.message.BasicHeaderValueParser DEFAULT -> DEFAULT
    void <init>() -> <init>
    org.apache.http.HeaderElement[] parseElements(java.lang.String,org.apache.http.message.HeaderValueParser) -> parseElements
    org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseElements
    org.apache.http.HeaderElement parseHeaderElement(java.lang.String,org.apache.http.message.HeaderValueParser) -> parseHeaderElement
    org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseHeaderElement
    org.apache.http.HeaderElement createHeaderElement(java.lang.String,java.lang.String,org.apache.http.NameValuePair[]) -> createHeaderElement
    org.apache.http.NameValuePair[] parseParameters(java.lang.String,org.apache.http.message.HeaderValueParser) -> parseParameters
    org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseParameters
    org.apache.http.NameValuePair parseNameValuePair(java.lang.String,org.apache.http.message.HeaderValueParser) -> parseNameValuePair
    org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseNameValuePair
    org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[]) -> parseNameValuePair
    org.apache.http.NameValuePair createNameValuePair(java.lang.String,java.lang.String) -> createNameValuePair
    void <clinit>() -> <clinit>
org.apache.http.message.BasicHttpEntityEnclosingRequest -> org.apache.http.message.BasicHttpEntityEnclosingRequest:
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion) -> <init>
    void <init>(org.apache.http.RequestLine) -> <init>
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
org.apache.http.message.BasicHttpRequest -> org.apache.http.message.BasicHttpRequest:
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion) -> <init>
    void <init>(org.apache.http.RequestLine) -> <init>
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
org.apache.http.message.BasicHttpResponse -> org.apache.http.message.BasicHttpResponse:
    void <init>(org.apache.http.StatusLine,org.apache.http.ReasonPhraseCatalog,java.util.Locale) -> <init>
    void <init>(org.apache.http.StatusLine) -> <init>
    void <init>(org.apache.http.ProtocolVersion,int,java.lang.String) -> <init>
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    org.apache.http.StatusLine getStatusLine() -> getStatusLine
    org.apache.http.HttpEntity getEntity() -> getEntity
    java.util.Locale getLocale() -> getLocale
    void setStatusLine(org.apache.http.StatusLine) -> setStatusLine
    void setStatusLine(org.apache.http.ProtocolVersion,int) -> setStatusLine
    void setStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String) -> setStatusLine
    void setStatusCode(int) -> setStatusCode
    void setReasonPhrase(java.lang.String) -> setReasonPhrase
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    void setLocale(java.util.Locale) -> setLocale
    java.lang.String getReason(int) -> getReason
org.apache.http.message.BasicLineFormatter -> org.apache.http.message.BasicLineFormatter:
    org.apache.http.message.BasicLineFormatter DEFAULT -> DEFAULT
    void <init>() -> <init>
    org.apache.http.util.CharArrayBuffer initBuffer(org.apache.http.util.CharArrayBuffer) -> initBuffer
    java.lang.String formatProtocolVersion(org.apache.http.ProtocolVersion,org.apache.http.message.LineFormatter) -> formatProtocolVersion
    org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion) -> appendProtocolVersion
    int estimateProtocolVersionLen(org.apache.http.ProtocolVersion) -> estimateProtocolVersionLen
    java.lang.String formatRequestLine(org.apache.http.RequestLine,org.apache.http.message.LineFormatter) -> formatRequestLine
    org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine) -> formatRequestLine
    void doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine) -> doFormatRequestLine
    java.lang.String formatStatusLine(org.apache.http.StatusLine,org.apache.http.message.LineFormatter) -> formatStatusLine
    org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine) -> formatStatusLine
    void doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine) -> doFormatStatusLine
    java.lang.String formatHeader(org.apache.http.Header,org.apache.http.message.LineFormatter) -> formatHeader
    org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header) -> formatHeader
    void doFormatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header) -> doFormatHeader
    void <clinit>() -> <clinit>
org.apache.http.message.BasicLineParser -> org.apache.http.message.BasicLineParser:
    org.apache.http.message.BasicLineParser DEFAULT -> DEFAULT
    org.apache.http.ProtocolVersion protocol -> protocol
    void <init>(org.apache.http.ProtocolVersion) -> <init>
    void <init>() -> <init>
    org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String,org.apache.http.message.LineParser) -> parseProtocolVersion
    org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseProtocolVersion
    org.apache.http.ProtocolVersion createProtocolVersion(int,int) -> createProtocolVersion
    boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> hasProtocolVersion
    org.apache.http.RequestLine parseRequestLine(java.lang.String,org.apache.http.message.LineParser) -> parseRequestLine
    org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseRequestLine
    org.apache.http.RequestLine createRequestLine(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion) -> createRequestLine
    org.apache.http.StatusLine parseStatusLine(java.lang.String,org.apache.http.message.LineParser) -> parseStatusLine
    org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseStatusLine
    org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String) -> createStatusLine
    org.apache.http.Header parseHeader(java.lang.String,org.apache.http.message.LineParser) -> parseHeader
    org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) -> parseHeader
    void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> skipWhitespace
    void <clinit>() -> <clinit>
org.apache.http.message.BasicListHeaderIterator -> org.apache.http.message.BasicListHeaderIterator:
    java.util.List allHeaders -> allHeaders
    int currentIndex -> currentIndex
    java.lang.String headerName -> headerName
    int lastIndex -> lastIndex
    void <init>(java.util.List,java.lang.String) -> <init>
    int findNext(int) -> findNext
    boolean filterHeader(int) -> filterHeader
    boolean hasNext() -> hasNext
    org.apache.http.Header nextHeader() -> nextHeader
    java.lang.Object next() -> next
    void remove() -> remove
org.apache.http.message.BasicNameValuePair -> org.apache.http.message.BasicNameValuePair:
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object clone() -> clone
org.apache.http.message.BasicRequestLine -> org.apache.http.message.BasicRequestLine:
    void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion) -> <init>
    java.lang.String getMethod() -> getMethod
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.lang.String getUri() -> getUri
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.message.BasicStatusLine -> org.apache.http.message.BasicStatusLine:
    void <init>(org.apache.http.ProtocolVersion,int,java.lang.String) -> <init>
    int getStatusCode() -> getStatusCode
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.lang.String getReasonPhrase() -> getReasonPhrase
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.message.BasicTokenIterator -> org.apache.http.message.BasicTokenIterator:
    java.lang.String HTTP_SEPARATORS -> HTTP_SEPARATORS
    java.lang.String currentHeader -> currentHeader
    java.lang.String currentToken -> currentToken
    org.apache.http.HeaderIterator headerIt -> headerIt
    int searchPos -> searchPos
    void <init>(org.apache.http.HeaderIterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.String nextToken() -> nextToken
    java.lang.Object next() -> next
    void remove() -> remove
    int findNext(int) -> findNext
    java.lang.String createToken(java.lang.String,int,int) -> createToken
    int findTokenStart(int) -> findTokenStart
    int findTokenSeparator(int) -> findTokenSeparator
    int findTokenEnd(int) -> findTokenEnd
    boolean isTokenSeparator(char) -> isTokenSeparator
    boolean isWhitespace(char) -> isWhitespace
    boolean isTokenChar(char) -> isTokenChar
    boolean isHttpSeparator(char) -> isHttpSeparator
org.apache.http.message.BufferedHeader -> org.apache.http.message.BufferedHeader:
    void <init>(org.apache.http.util.CharArrayBuffer) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    org.apache.http.HeaderElement[] getElements() -> getElements
    int getValuePos() -> getValuePos
    org.apache.http.util.CharArrayBuffer getBuffer() -> getBuffer
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.message.HeaderGroup -> org.apache.http.message.HeaderGroup:
    void <init>() -> <init>
    void clear() -> clear
    void addHeader(org.apache.http.Header) -> addHeader
    void removeHeader(org.apache.http.Header) -> removeHeader
    void updateHeader(org.apache.http.Header) -> updateHeader
    void setHeaders(org.apache.http.Header[]) -> setHeaders
    org.apache.http.Header getCondensedHeader(java.lang.String) -> getCondensedHeader
    org.apache.http.Header[] getHeaders(java.lang.String) -> getHeaders
    org.apache.http.Header getFirstHeader(java.lang.String) -> getFirstHeader
    org.apache.http.Header getLastHeader(java.lang.String) -> getLastHeader
    org.apache.http.Header[] getAllHeaders() -> getAllHeaders
    boolean containsHeader(java.lang.String) -> containsHeader
    org.apache.http.HeaderIterator iterator() -> iterator
    org.apache.http.HeaderIterator iterator(java.lang.String) -> iterator
    org.apache.http.message.HeaderGroup copy() -> copy
    java.lang.Object clone() -> clone
org.apache.http.message.HeaderValueFormatter -> org.apache.http.message.HeaderValueFormatter:
    org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean) -> formatElements
    org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean) -> formatHeaderElement
    org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean) -> formatParameters
    org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean) -> formatNameValuePair
org.apache.http.message.HeaderValueParser -> org.apache.http.message.HeaderValueParser:
    org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseElements
    org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseHeaderElement
    org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseParameters
    org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseNameValuePair
org.apache.http.message.LineFormatter -> org.apache.http.message.LineFormatter:
    org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion) -> appendProtocolVersion
    org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine) -> formatRequestLine
    org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine) -> formatStatusLine
    org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header) -> formatHeader
org.apache.http.message.LineParser -> org.apache.http.message.LineParser:
    org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseProtocolVersion
    boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> hasProtocolVersion
    org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseRequestLine
    org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseStatusLine
    org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) -> parseHeader
org.apache.http.message.ParserCursor -> org.apache.http.message.ParserCursor:
    void <init>(int,int) -> <init>
    int getLowerBound() -> getLowerBound
    int getUpperBound() -> getUpperBound
    int getPos() -> getPos
    void updatePos(int) -> updatePos
    boolean atEnd() -> atEnd
    java.lang.String toString() -> toString
org.apache.http.params.AbstractHttpParams -> org.apache.http.params.AbstractHttpParams:
    void <init>() -> <init>
    long getLongParameter(java.lang.String,long) -> getLongParameter
    org.apache.http.params.HttpParams setLongParameter(java.lang.String,long) -> setLongParameter
    int getIntParameter(java.lang.String,int) -> getIntParameter
    org.apache.http.params.HttpParams setIntParameter(java.lang.String,int) -> setIntParameter
    double getDoubleParameter(java.lang.String,double) -> getDoubleParameter
    org.apache.http.params.HttpParams setDoubleParameter(java.lang.String,double) -> setDoubleParameter
    boolean getBooleanParameter(java.lang.String,boolean) -> getBooleanParameter
    org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean) -> setBooleanParameter
    boolean isParameterTrue(java.lang.String) -> isParameterTrue
    boolean isParameterFalse(java.lang.String) -> isParameterFalse
org.apache.http.params.BasicHttpParams -> org.apache.http.params.BasicHttpParams:
    void <init>() -> <init>
    java.lang.Object getParameter(java.lang.String) -> getParameter
    org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> setParameter
    boolean removeParameter(java.lang.String) -> removeParameter
    void setParameters(java.lang.String[],java.lang.Object) -> setParameters
    boolean isParameterSet(java.lang.String) -> isParameterSet
    boolean isParameterSetLocally(java.lang.String) -> isParameterSetLocally
    void clear() -> clear
    org.apache.http.params.HttpParams copy() -> copy
    java.lang.Object clone() -> clone
    void copyParams(org.apache.http.params.HttpParams) -> copyParams
org.apache.http.params.CoreConnectionPNames -> org.apache.http.params.CoreConnectionPNames:
    java.lang.String CONNECTION_TIMEOUT -> CONNECTION_TIMEOUT
    java.lang.String MAX_HEADER_COUNT -> MAX_HEADER_COUNT
    java.lang.String MAX_LINE_LENGTH -> MAX_LINE_LENGTH
    java.lang.String SOCKET_BUFFER_SIZE -> SOCKET_BUFFER_SIZE
    java.lang.String SO_LINGER -> SO_LINGER
    java.lang.String SO_TIMEOUT -> SO_TIMEOUT
    java.lang.String STALE_CONNECTION_CHECK -> STALE_CONNECTION_CHECK
    java.lang.String TCP_NODELAY -> TCP_NODELAY
org.apache.http.params.CoreProtocolPNames -> org.apache.http.params.CoreProtocolPNames:
    java.lang.String HTTP_CONTENT_CHARSET -> HTTP_CONTENT_CHARSET
    java.lang.String HTTP_ELEMENT_CHARSET -> HTTP_ELEMENT_CHARSET
    java.lang.String ORIGIN_SERVER -> ORIGIN_SERVER
    java.lang.String PROTOCOL_VERSION -> PROTOCOL_VERSION
    java.lang.String STRICT_TRANSFER_ENCODING -> STRICT_TRANSFER_ENCODING
    java.lang.String USER_AGENT -> USER_AGENT
    java.lang.String USE_EXPECT_CONTINUE -> USE_EXPECT_CONTINUE
    java.lang.String WAIT_FOR_CONTINUE -> WAIT_FOR_CONTINUE
org.apache.http.params.DefaultedHttpParams -> org.apache.http.params.DefaultedHttpParams:
    void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams) -> <init>
    org.apache.http.params.HttpParams copy() -> copy
    java.lang.Object getParameter(java.lang.String) -> getParameter
    boolean removeParameter(java.lang.String) -> removeParameter
    org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> setParameter
    org.apache.http.params.HttpParams getDefaults() -> getDefaults
org.apache.http.params.HttpAbstractParamBean -> org.apache.http.params.HttpAbstractParamBean:
    org.apache.http.params.HttpParams params -> params
    void <init>(org.apache.http.params.HttpParams) -> <init>
org.apache.http.params.HttpConnectionParamBean -> org.apache.http.params.HttpConnectionParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setSoTimeout(int) -> setSoTimeout
    void setTcpNoDelay(boolean) -> setTcpNoDelay
    void setSocketBufferSize(int) -> setSocketBufferSize
    void setLinger(int) -> setLinger
    void setConnectionTimeout(int) -> setConnectionTimeout
    void setStaleCheckingEnabled(boolean) -> setStaleCheckingEnabled
org.apache.http.params.HttpConnectionParams -> org.apache.http.params.HttpConnectionParams:
    void <init>() -> <init>
    int getSoTimeout(org.apache.http.params.HttpParams) -> getSoTimeout
    void setSoTimeout(org.apache.http.params.HttpParams,int) -> setSoTimeout
    boolean getTcpNoDelay(org.apache.http.params.HttpParams) -> getTcpNoDelay
    void setTcpNoDelay(org.apache.http.params.HttpParams,boolean) -> setTcpNoDelay
    int getSocketBufferSize(org.apache.http.params.HttpParams) -> getSocketBufferSize
    void setSocketBufferSize(org.apache.http.params.HttpParams,int) -> setSocketBufferSize
    int getLinger(org.apache.http.params.HttpParams) -> getLinger
    void setLinger(org.apache.http.params.HttpParams,int) -> setLinger
    int getConnectionTimeout(org.apache.http.params.HttpParams) -> getConnectionTimeout
    void setConnectionTimeout(org.apache.http.params.HttpParams,int) -> setConnectionTimeout
    boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams) -> isStaleCheckingEnabled
    void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean) -> setStaleCheckingEnabled
org.apache.http.params.HttpParams -> org.apache.http.params.HttpParams:
    java.lang.Object getParameter(java.lang.String) -> getParameter
    org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> setParameter
    org.apache.http.params.HttpParams copy() -> copy
    boolean removeParameter(java.lang.String) -> removeParameter
    long getLongParameter(java.lang.String,long) -> getLongParameter
    org.apache.http.params.HttpParams setLongParameter(java.lang.String,long) -> setLongParameter
    int getIntParameter(java.lang.String,int) -> getIntParameter
    org.apache.http.params.HttpParams setIntParameter(java.lang.String,int) -> setIntParameter
    double getDoubleParameter(java.lang.String,double) -> getDoubleParameter
    org.apache.http.params.HttpParams setDoubleParameter(java.lang.String,double) -> setDoubleParameter
    boolean getBooleanParameter(java.lang.String,boolean) -> getBooleanParameter
    org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean) -> setBooleanParameter
    boolean isParameterTrue(java.lang.String) -> isParameterTrue
    boolean isParameterFalse(java.lang.String) -> isParameterFalse
org.apache.http.params.HttpProtocolParamBean -> org.apache.http.params.HttpProtocolParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setHttpElementCharset(java.lang.String) -> setHttpElementCharset
    void setContentCharset(java.lang.String) -> setContentCharset
    void setVersion(org.apache.http.HttpVersion) -> setVersion
    void setUserAgent(java.lang.String) -> setUserAgent
    void setUseExpectContinue(boolean) -> setUseExpectContinue
org.apache.http.params.HttpProtocolParams -> org.apache.http.params.HttpProtocolParams:
    void <init>() -> <init>
    java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams) -> getHttpElementCharset
    void setHttpElementCharset(org.apache.http.params.HttpParams,java.lang.String) -> setHttpElementCharset
    java.lang.String getContentCharset(org.apache.http.params.HttpParams) -> getContentCharset
    void setContentCharset(org.apache.http.params.HttpParams,java.lang.String) -> setContentCharset
    org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams) -> getVersion
    void setVersion(org.apache.http.params.HttpParams,org.apache.http.ProtocolVersion) -> setVersion
    java.lang.String getUserAgent(org.apache.http.params.HttpParams) -> getUserAgent
    void setUserAgent(org.apache.http.params.HttpParams,java.lang.String) -> setUserAgent
    boolean useExpectContinue(org.apache.http.params.HttpParams) -> useExpectContinue
    void setUseExpectContinue(org.apache.http.params.HttpParams,boolean) -> setUseExpectContinue
org.apache.http.protocol.BasicHttpContext -> org.apache.http.protocol.BasicHttpContext:
    void <init>() -> <init>
    void <init>(org.apache.http.protocol.HttpContext) -> <init>
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
org.apache.http.protocol.BasicHttpProcessor -> org.apache.http.protocol.BasicHttpProcessor:
    java.util.List requestInterceptors -> requestInterceptors
    java.util.List responseInterceptors -> responseInterceptors
    void <init>() -> <init>
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor) -> addRequestInterceptor
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int) -> addRequestInterceptor
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int) -> addResponseInterceptor
    void removeRequestInterceptorByClass(java.lang.Class) -> removeRequestInterceptorByClass
    void removeResponseInterceptorByClass(java.lang.Class) -> removeResponseInterceptorByClass
    void addInterceptor(org.apache.http.HttpRequestInterceptor) -> addInterceptor
    void addInterceptor(org.apache.http.HttpRequestInterceptor,int) -> addInterceptor
    int getRequestInterceptorCount() -> getRequestInterceptorCount
    org.apache.http.HttpRequestInterceptor getRequestInterceptor(int) -> getRequestInterceptor
    void clearRequestInterceptors() -> clearRequestInterceptors
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor) -> addResponseInterceptor
    void addInterceptor(org.apache.http.HttpResponseInterceptor) -> addInterceptor
    void addInterceptor(org.apache.http.HttpResponseInterceptor,int) -> addInterceptor
    int getResponseInterceptorCount() -> getResponseInterceptorCount
    org.apache.http.HttpResponseInterceptor getResponseInterceptor(int) -> getResponseInterceptor
    void clearResponseInterceptors() -> clearResponseInterceptors
    void setInterceptors(java.util.List) -> setInterceptors
    void clearInterceptors() -> clearInterceptors
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
    void copyInterceptors(org.apache.http.protocol.BasicHttpProcessor) -> copyInterceptors
    org.apache.http.protocol.BasicHttpProcessor copy() -> copy
    java.lang.Object clone() -> clone
org.apache.http.protocol.DefaultedHttpContext -> org.apache.http.protocol.DefaultedHttpContext:
    void <init>(org.apache.http.protocol.HttpContext,org.apache.http.protocol.HttpContext) -> <init>
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    org.apache.http.protocol.HttpContext getDefaults() -> getDefaults
org.apache.http.protocol.ExecutionContext -> org.apache.http.protocol.ExecutionContext:
    java.lang.String HTTP_CONNECTION -> HTTP_CONNECTION
    java.lang.String HTTP_PROXY_HOST -> HTTP_PROXY_HOST
    java.lang.String HTTP_REQUEST -> HTTP_REQUEST
    java.lang.String HTTP_REQ_SENT -> HTTP_REQ_SENT
    java.lang.String HTTP_RESPONSE -> HTTP_RESPONSE
    java.lang.String HTTP_TARGET_HOST -> HTTP_TARGET_HOST
org.apache.http.protocol.HTTP -> org.apache.http.protocol.HTTP:
    java.lang.String ASCII -> ASCII
    java.lang.String CHARSET_PARAM -> CHARSET_PARAM
    java.lang.String CHUNK_CODING -> CHUNK_CODING
    java.lang.String CONN_CLOSE -> CONN_CLOSE
    java.lang.String CONN_DIRECTIVE -> CONN_DIRECTIVE
    java.lang.String CONN_KEEP_ALIVE -> CONN_KEEP_ALIVE
    java.lang.String CONTENT_ENCODING -> CONTENT_ENCODING
    java.lang.String CONTENT_LEN -> CONTENT_LEN
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    int CR -> CR
    java.lang.String DATE_HEADER -> DATE_HEADER
    java.lang.String DEFAULT_CONTENT_CHARSET -> DEFAULT_CONTENT_CHARSET
    java.lang.String DEFAULT_CONTENT_TYPE -> DEFAULT_CONTENT_TYPE
    java.lang.String DEFAULT_PROTOCOL_CHARSET -> DEFAULT_PROTOCOL_CHARSET
    java.lang.String EXPECT_CONTINUE -> EXPECT_CONTINUE
    java.lang.String EXPECT_DIRECTIVE -> EXPECT_DIRECTIVE
    int HT -> HT
    java.lang.String IDENTITY_CODING -> IDENTITY_CODING
    java.lang.String ISO_8859_1 -> ISO_8859_1
    int LF -> LF
    java.lang.String OCTET_STREAM_TYPE -> OCTET_STREAM_TYPE
    java.lang.String PLAIN_TEXT_TYPE -> PLAIN_TEXT_TYPE
    java.lang.String SERVER_HEADER -> SERVER_HEADER
    int SP -> SP
    java.lang.String TARGET_HOST -> TARGET_HOST
    java.lang.String TRANSFER_ENCODING -> TRANSFER_ENCODING
    java.lang.String USER_AGENT -> USER_AGENT
    java.lang.String US_ASCII -> US_ASCII
    java.lang.String UTF_16 -> UTF_16
    java.lang.String UTF_8 -> UTF_8
    void <init>() -> <init>
    boolean isWhitespace(char) -> isWhitespace
org.apache.http.protocol.HttpContext -> org.apache.http.protocol.HttpContext:
    java.lang.String RESERVED_PREFIX -> RESERVED_PREFIX
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
org.apache.http.protocol.HttpDateGenerator -> org.apache.http.protocol.HttpDateGenerator:
    java.util.TimeZone GMT -> GMT
    java.lang.String PATTERN_RFC1123 -> PATTERN_RFC1123
    void <init>() -> <init>
    java.lang.String getCurrentDate() -> getCurrentDate
    void <clinit>() -> <clinit>
org.apache.http.protocol.HttpExpectationVerifier -> org.apache.http.protocol.HttpExpectationVerifier:
    void verify(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> verify
org.apache.http.protocol.HttpProcessor -> org.apache.http.protocol.HttpProcessor:
org.apache.http.protocol.HttpRequestExecutor -> org.apache.http.protocol.HttpRequestExecutor:
    void <init>() -> <init>
    boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse) -> canResponseHaveBody
    org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext) -> execute
    void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext) -> preProcess
    org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext) -> doSendRequest
    org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext) -> doReceiveResponse
    void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext) -> postProcess
org.apache.http.protocol.HttpRequestHandler -> org.apache.http.protocol.HttpRequestHandler:
    void handle(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> handle
org.apache.http.protocol.HttpRequestHandlerRegistry -> org.apache.http.protocol.HttpRequestHandlerRegistry:
    void <init>() -> <init>
    void register(java.lang.String,org.apache.http.protocol.HttpRequestHandler) -> register
    void unregister(java.lang.String) -> unregister
    void setHandlers(java.util.Map) -> setHandlers
    org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String) -> lookup
    boolean matchUriRequestPattern(java.lang.String,java.lang.String) -> matchUriRequestPattern
org.apache.http.protocol.HttpRequestHandlerResolver -> org.apache.http.protocol.HttpRequestHandlerResolver:
    org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String) -> lookup
org.apache.http.protocol.HttpRequestInterceptorList -> org.apache.http.protocol.HttpRequestInterceptorList:
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor) -> addRequestInterceptor
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int) -> addRequestInterceptor
    int getRequestInterceptorCount() -> getRequestInterceptorCount
    org.apache.http.HttpRequestInterceptor getRequestInterceptor(int) -> getRequestInterceptor
    void clearRequestInterceptors() -> clearRequestInterceptors
    void removeRequestInterceptorByClass(java.lang.Class) -> removeRequestInterceptorByClass
    void setInterceptors(java.util.List) -> setInterceptors
org.apache.http.protocol.HttpResponseInterceptorList -> org.apache.http.protocol.HttpResponseInterceptorList:
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor) -> addResponseInterceptor
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int) -> addResponseInterceptor
    int getResponseInterceptorCount() -> getResponseInterceptorCount
    org.apache.http.HttpResponseInterceptor getResponseInterceptor(int) -> getResponseInterceptor
    void clearResponseInterceptors() -> clearResponseInterceptors
    void removeResponseInterceptorByClass(java.lang.Class) -> removeResponseInterceptorByClass
    void setInterceptors(java.util.List) -> setInterceptors
org.apache.http.protocol.HttpService -> org.apache.http.protocol.HttpService:
    void <init>(org.apache.http.protocol.HttpProcessor,org.apache.http.ConnectionReuseStrategy,org.apache.http.HttpResponseFactory) -> <init>
    void setHttpProcessor(org.apache.http.protocol.HttpProcessor) -> setHttpProcessor
    void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy) -> setConnReuseStrategy
    void setResponseFactory(org.apache.http.HttpResponseFactory) -> setResponseFactory
    void setHandlerResolver(org.apache.http.protocol.HttpRequestHandlerResolver) -> setHandlerResolver
    void setExpectationVerifier(org.apache.http.protocol.HttpExpectationVerifier) -> setExpectationVerifier
    org.apache.http.params.HttpParams getParams() -> getParams
    void setParams(org.apache.http.params.HttpParams) -> setParams
    void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext) -> handleRequest
    void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse) -> handleException
    void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> doService
org.apache.http.protocol.RequestConnControl -> org.apache.http.protocol.RequestConnControl:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestContent -> org.apache.http.protocol.RequestContent:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestDate -> org.apache.http.protocol.RequestDate:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestExpectContinue -> org.apache.http.protocol.RequestExpectContinue:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestTargetHost -> org.apache.http.protocol.RequestTargetHost:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestUserAgent -> org.apache.http.protocol.RequestUserAgent:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.ResponseConnControl -> org.apache.http.protocol.ResponseConnControl:
    void <init>() -> <init>
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.ResponseContent -> org.apache.http.protocol.ResponseContent:
    void <init>() -> <init>
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.ResponseDate -> org.apache.http.protocol.ResponseDate:
    void <init>() -> <init>
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.ResponseServer -> org.apache.http.protocol.ResponseServer:
    void <init>() -> <init>
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.SyncBasicHttpContext -> org.apache.http.protocol.SyncBasicHttpContext:
    void <init>(org.apache.http.protocol.HttpContext) -> <init>
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
org.apache.http.protocol.UriPatternMatcher -> org.apache.http.protocol.UriPatternMatcher:
    void <init>() -> <init>
    void register(java.lang.String,java.lang.Object) -> register
    void unregister(java.lang.String) -> unregister
    void setHandlers(java.util.Map) -> setHandlers
    java.lang.Object lookup(java.lang.String) -> lookup
    boolean matchUriRequestPattern(java.lang.String,java.lang.String) -> matchUriRequestPattern
org.apache.http.util.ByteArrayBuffer -> org.apache.http.util.ByteArrayBuffer:
    void <init>(int) -> <init>
    void append(byte[],int,int) -> append
    void append(int) -> append
    void append(char[],int,int) -> append
    void append(org.apache.http.util.CharArrayBuffer,int,int) -> append
    void clear() -> clear
    byte[] toByteArray() -> toByteArray
    int byteAt(int) -> byteAt
    int capacity() -> capacity
    int length() -> length
    byte[] buffer() -> buffer
    void setLength(int) -> setLength
    boolean isEmpty() -> isEmpty
    boolean isFull() -> isFull
org.apache.http.util.CharArrayBuffer -> org.apache.http.util.CharArrayBuffer:
    void <init>(int) -> <init>
    void append(char[],int,int) -> append
    void append(java.lang.String) -> append
    void append(org.apache.http.util.CharArrayBuffer,int,int) -> append
    void append(org.apache.http.util.CharArrayBuffer) -> append
    void append(char) -> append
    void append(byte[],int,int) -> append
    void append(org.apache.http.util.ByteArrayBuffer,int,int) -> append
    void append(java.lang.Object) -> append
    void clear() -> clear
    char[] toCharArray() -> toCharArray
    char charAt(int) -> charAt
    char[] buffer() -> buffer
    int capacity() -> capacity
    int length() -> length
    void ensureCapacity(int) -> ensureCapacity
    void setLength(int) -> setLength
    boolean isEmpty() -> isEmpty
    boolean isFull() -> isFull
    int indexOf(int,int,int) -> indexOf
    int indexOf(int) -> indexOf
    java.lang.String substring(int,int) -> substring
    java.lang.String substringTrimmed(int,int) -> substringTrimmed
    java.lang.String toString() -> toString
org.apache.http.util.EncodingUtils -> org.apache.http.util.EncodingUtils:
    void <init>() -> <init>
    java.lang.String getString(byte[],int,int,java.lang.String) -> getString
    java.lang.String getString(byte[],java.lang.String) -> getString
    byte[] getBytes(java.lang.String,java.lang.String) -> getBytes
    byte[] getAsciiBytes(java.lang.String) -> getAsciiBytes
    java.lang.String getAsciiString(byte[],int,int) -> getAsciiString
    java.lang.String getAsciiString(byte[]) -> getAsciiString
org.apache.http.util.EntityUtils -> org.apache.http.util.EntityUtils:
    void <init>() -> <init>
    byte[] toByteArray(org.apache.http.HttpEntity) -> toByteArray
    java.lang.String getContentCharSet(org.apache.http.HttpEntity) -> getContentCharSet
    java.lang.String toString(org.apache.http.HttpEntity,java.lang.String) -> toString
    java.lang.String toString(org.apache.http.HttpEntity) -> toString
org.apache.http.util.ExceptionUtils -> org.apache.http.util.ExceptionUtils:
    void <init>() -> <init>
    void initCause(java.lang.Throwable,java.lang.Throwable) -> initCause
org.apache.http.util.LangUtils -> org.apache.http.util.LangUtils:
    int HASH_OFFSET -> HASH_OFFSET
    int HASH_SEED -> HASH_SEED
    void <init>() -> <init>
    int hashCode(int,int) -> hashCode
    int hashCode(int,boolean) -> hashCode
    int hashCode(int,java.lang.Object) -> hashCode
    boolean equals(java.lang.Object,java.lang.Object) -> equals
    boolean equals(java.lang.Object[],java.lang.Object[]) -> equals
org.apache.http.util.VersionInfo -> org.apache.http.util.VersionInfo:
    java.lang.String PROPERTY_MODULE -> PROPERTY_MODULE
    java.lang.String PROPERTY_RELEASE -> PROPERTY_RELEASE
    java.lang.String PROPERTY_TIMESTAMP -> PROPERTY_TIMESTAMP
    java.lang.String UNAVAILABLE -> UNAVAILABLE
    java.lang.String VERSION_PROPERTY_FILE -> VERSION_PROPERTY_FILE
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String getPackage() -> getPackage
    java.lang.String getModule() -> getModule
    java.lang.String getRelease() -> getRelease
    java.lang.String getTimestamp() -> getTimestamp
    java.lang.String getClassloader() -> getClassloader
    java.lang.String toString() -> toString
    org.apache.http.util.VersionInfo[] loadVersionInfo(java.lang.String[],java.lang.ClassLoader) -> loadVersionInfo
    org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String,java.lang.ClassLoader) -> loadVersionInfo
    org.apache.http.util.VersionInfo fromMap(java.lang.String,java.util.Map,java.lang.ClassLoader) -> fromMap
